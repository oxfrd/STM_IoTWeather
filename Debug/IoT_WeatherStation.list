
IoT_WeatherStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007234  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080073c4  080073c4  000173c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007498  08007498  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007498  08007498  00017498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074a0  080074a0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074a0  080074a0  000174a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074a4  080074a4  000174a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080074a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  20000078  08007520  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  08007520  00020344  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015455  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f49  00000000  00000000  000354fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  00038448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e68  00000000  00000000  00039408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000280df  00000000  00000000  0003a270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013f33  00000000  00000000  0006234f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000edf81  00000000  00000000  00076282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00164203  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004440  00000000  00000000  00164258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080073ac 	.word	0x080073ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080073ac 	.word	0x080073ac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_ldivmod>:
 8000a4c:	b97b      	cbnz	r3, 8000a6e <__aeabi_ldivmod+0x22>
 8000a4e:	b972      	cbnz	r2, 8000a6e <__aeabi_ldivmod+0x22>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bfbe      	ittt	lt
 8000a54:	2000      	movlt	r0, #0
 8000a56:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000a5a:	e006      	blt.n	8000a6a <__aeabi_ldivmod+0x1e>
 8000a5c:	bf08      	it	eq
 8000a5e:	2800      	cmpeq	r0, #0
 8000a60:	bf1c      	itt	ne
 8000a62:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000a66:	f04f 30ff 	movne.w	r0, #4294967295
 8000a6a:	f000 b9b9 	b.w	8000de0 <__aeabi_idiv0>
 8000a6e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a72:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a76:	2900      	cmp	r1, #0
 8000a78:	db09      	blt.n	8000a8e <__aeabi_ldivmod+0x42>
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	db1a      	blt.n	8000ab4 <__aeabi_ldivmod+0x68>
 8000a7e:	f000 f84d 	bl	8000b1c <__udivmoddi4>
 8000a82:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a8a:	b004      	add	sp, #16
 8000a8c:	4770      	bx	lr
 8000a8e:	4240      	negs	r0, r0
 8000a90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	db1b      	blt.n	8000ad0 <__aeabi_ldivmod+0x84>
 8000a98:	f000 f840 	bl	8000b1c <__udivmoddi4>
 8000a9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa4:	b004      	add	sp, #16
 8000aa6:	4240      	negs	r0, r0
 8000aa8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000aac:	4252      	negs	r2, r2
 8000aae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ab2:	4770      	bx	lr
 8000ab4:	4252      	negs	r2, r2
 8000ab6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000aba:	f000 f82f 	bl	8000b1c <__udivmoddi4>
 8000abe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac6:	b004      	add	sp, #16
 8000ac8:	4240      	negs	r0, r0
 8000aca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ace:	4770      	bx	lr
 8000ad0:	4252      	negs	r2, r2
 8000ad2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ad6:	f000 f821 	bl	8000b1c <__udivmoddi4>
 8000ada:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ade:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae2:	b004      	add	sp, #16
 8000ae4:	4252      	negs	r2, r2
 8000ae6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000aea:	4770      	bx	lr

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b96e 	b.w	8000de0 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9d08      	ldr	r5, [sp, #32]
 8000b22:	4604      	mov	r4, r0
 8000b24:	468c      	mov	ip, r1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	f040 8083 	bne.w	8000c32 <__udivmoddi4+0x116>
 8000b2c:	428a      	cmp	r2, r1
 8000b2e:	4617      	mov	r7, r2
 8000b30:	d947      	bls.n	8000bc2 <__udivmoddi4+0xa6>
 8000b32:	fab2 f282 	clz	r2, r2
 8000b36:	b142      	cbz	r2, 8000b4a <__udivmoddi4+0x2e>
 8000b38:	f1c2 0020 	rsb	r0, r2, #32
 8000b3c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b40:	4091      	lsls	r1, r2
 8000b42:	4097      	lsls	r7, r2
 8000b44:	ea40 0c01 	orr.w	ip, r0, r1
 8000b48:	4094      	lsls	r4, r2
 8000b4a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b4e:	0c23      	lsrs	r3, r4, #16
 8000b50:	fbbc f6f8 	udiv	r6, ip, r8
 8000b54:	fa1f fe87 	uxth.w	lr, r7
 8000b58:	fb08 c116 	mls	r1, r8, r6, ip
 8000b5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b60:	fb06 f10e 	mul.w	r1, r6, lr
 8000b64:	4299      	cmp	r1, r3
 8000b66:	d909      	bls.n	8000b7c <__udivmoddi4+0x60>
 8000b68:	18fb      	adds	r3, r7, r3
 8000b6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b6e:	f080 8119 	bcs.w	8000da4 <__udivmoddi4+0x288>
 8000b72:	4299      	cmp	r1, r3
 8000b74:	f240 8116 	bls.w	8000da4 <__udivmoddi4+0x288>
 8000b78:	3e02      	subs	r6, #2
 8000b7a:	443b      	add	r3, r7
 8000b7c:	1a5b      	subs	r3, r3, r1
 8000b7e:	b2a4      	uxth	r4, r4
 8000b80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b84:	fb08 3310 	mls	r3, r8, r0, r3
 8000b88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b90:	45a6      	cmp	lr, r4
 8000b92:	d909      	bls.n	8000ba8 <__udivmoddi4+0x8c>
 8000b94:	193c      	adds	r4, r7, r4
 8000b96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b9a:	f080 8105 	bcs.w	8000da8 <__udivmoddi4+0x28c>
 8000b9e:	45a6      	cmp	lr, r4
 8000ba0:	f240 8102 	bls.w	8000da8 <__udivmoddi4+0x28c>
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	443c      	add	r4, r7
 8000ba8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bac:	eba4 040e 	sub.w	r4, r4, lr
 8000bb0:	2600      	movs	r6, #0
 8000bb2:	b11d      	cbz	r5, 8000bbc <__udivmoddi4+0xa0>
 8000bb4:	40d4      	lsrs	r4, r2
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bbc:	4631      	mov	r1, r6
 8000bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc2:	b902      	cbnz	r2, 8000bc6 <__udivmoddi4+0xaa>
 8000bc4:	deff      	udf	#255	; 0xff
 8000bc6:	fab2 f282 	clz	r2, r2
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	d150      	bne.n	8000c70 <__udivmoddi4+0x154>
 8000bce:	1bcb      	subs	r3, r1, r7
 8000bd0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bd4:	fa1f f887 	uxth.w	r8, r7
 8000bd8:	2601      	movs	r6, #1
 8000bda:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bde:	0c21      	lsrs	r1, r4, #16
 8000be0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000be4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000be8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bec:	428b      	cmp	r3, r1
 8000bee:	d907      	bls.n	8000c00 <__udivmoddi4+0xe4>
 8000bf0:	1879      	adds	r1, r7, r1
 8000bf2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0xe2>
 8000bf8:	428b      	cmp	r3, r1
 8000bfa:	f200 80e9 	bhi.w	8000dd0 <__udivmoddi4+0x2b4>
 8000bfe:	4684      	mov	ip, r0
 8000c00:	1ac9      	subs	r1, r1, r3
 8000c02:	b2a3      	uxth	r3, r4
 8000c04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c08:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c0c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c10:	fb08 f800 	mul.w	r8, r8, r0
 8000c14:	45a0      	cmp	r8, r4
 8000c16:	d907      	bls.n	8000c28 <__udivmoddi4+0x10c>
 8000c18:	193c      	adds	r4, r7, r4
 8000c1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x10a>
 8000c20:	45a0      	cmp	r8, r4
 8000c22:	f200 80d9 	bhi.w	8000dd8 <__udivmoddi4+0x2bc>
 8000c26:	4618      	mov	r0, r3
 8000c28:	eba4 0408 	sub.w	r4, r4, r8
 8000c2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c30:	e7bf      	b.n	8000bb2 <__udivmoddi4+0x96>
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x12e>
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	f000 80b1 	beq.w	8000d9e <__udivmoddi4+0x282>
 8000c3c:	2600      	movs	r6, #0
 8000c3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c42:	4630      	mov	r0, r6
 8000c44:	4631      	mov	r1, r6
 8000c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4a:	fab3 f683 	clz	r6, r3
 8000c4e:	2e00      	cmp	r6, #0
 8000c50:	d14a      	bne.n	8000ce8 <__udivmoddi4+0x1cc>
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d302      	bcc.n	8000c5c <__udivmoddi4+0x140>
 8000c56:	4282      	cmp	r2, r0
 8000c58:	f200 80b8 	bhi.w	8000dcc <__udivmoddi4+0x2b0>
 8000c5c:	1a84      	subs	r4, r0, r2
 8000c5e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c62:	2001      	movs	r0, #1
 8000c64:	468c      	mov	ip, r1
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	d0a8      	beq.n	8000bbc <__udivmoddi4+0xa0>
 8000c6a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c6e:	e7a5      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000c70:	f1c2 0320 	rsb	r3, r2, #32
 8000c74:	fa20 f603 	lsr.w	r6, r0, r3
 8000c78:	4097      	lsls	r7, r2
 8000c7a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c7e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c82:	40d9      	lsrs	r1, r3
 8000c84:	4330      	orrs	r0, r6
 8000c86:	0c03      	lsrs	r3, r0, #16
 8000c88:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c8c:	fa1f f887 	uxth.w	r8, r7
 8000c90:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c98:	fb06 f108 	mul.w	r1, r6, r8
 8000c9c:	4299      	cmp	r1, r3
 8000c9e:	fa04 f402 	lsl.w	r4, r4, r2
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x19c>
 8000ca4:	18fb      	adds	r3, r7, r3
 8000ca6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000caa:	f080 808d 	bcs.w	8000dc8 <__udivmoddi4+0x2ac>
 8000cae:	4299      	cmp	r1, r3
 8000cb0:	f240 808a 	bls.w	8000dc8 <__udivmoddi4+0x2ac>
 8000cb4:	3e02      	subs	r6, #2
 8000cb6:	443b      	add	r3, r7
 8000cb8:	1a5b      	subs	r3, r3, r1
 8000cba:	b281      	uxth	r1, r0
 8000cbc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cc0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cc4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc8:	fb00 f308 	mul.w	r3, r0, r8
 8000ccc:	428b      	cmp	r3, r1
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0x1c4>
 8000cd0:	1879      	adds	r1, r7, r1
 8000cd2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cd6:	d273      	bcs.n	8000dc0 <__udivmoddi4+0x2a4>
 8000cd8:	428b      	cmp	r3, r1
 8000cda:	d971      	bls.n	8000dc0 <__udivmoddi4+0x2a4>
 8000cdc:	3802      	subs	r0, #2
 8000cde:	4439      	add	r1, r7
 8000ce0:	1acb      	subs	r3, r1, r3
 8000ce2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ce6:	e778      	b.n	8000bda <__udivmoddi4+0xbe>
 8000ce8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cec:	fa03 f406 	lsl.w	r4, r3, r6
 8000cf0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cf4:	431c      	orrs	r4, r3
 8000cf6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000cfe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d02:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d06:	431f      	orrs	r7, r3
 8000d08:	0c3b      	lsrs	r3, r7, #16
 8000d0a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d0e:	fa1f f884 	uxth.w	r8, r4
 8000d12:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d16:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d1a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d1e:	458a      	cmp	sl, r1
 8000d20:	fa02 f206 	lsl.w	r2, r2, r6
 8000d24:	fa00 f306 	lsl.w	r3, r0, r6
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x220>
 8000d2a:	1861      	adds	r1, r4, r1
 8000d2c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d30:	d248      	bcs.n	8000dc4 <__udivmoddi4+0x2a8>
 8000d32:	458a      	cmp	sl, r1
 8000d34:	d946      	bls.n	8000dc4 <__udivmoddi4+0x2a8>
 8000d36:	f1a9 0902 	sub.w	r9, r9, #2
 8000d3a:	4421      	add	r1, r4
 8000d3c:	eba1 010a 	sub.w	r1, r1, sl
 8000d40:	b2bf      	uxth	r7, r7
 8000d42:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d46:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d4a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d4e:	fb00 f808 	mul.w	r8, r0, r8
 8000d52:	45b8      	cmp	r8, r7
 8000d54:	d907      	bls.n	8000d66 <__udivmoddi4+0x24a>
 8000d56:	19e7      	adds	r7, r4, r7
 8000d58:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5c:	d22e      	bcs.n	8000dbc <__udivmoddi4+0x2a0>
 8000d5e:	45b8      	cmp	r8, r7
 8000d60:	d92c      	bls.n	8000dbc <__udivmoddi4+0x2a0>
 8000d62:	3802      	subs	r0, #2
 8000d64:	4427      	add	r7, r4
 8000d66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d6a:	eba7 0708 	sub.w	r7, r7, r8
 8000d6e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d72:	454f      	cmp	r7, r9
 8000d74:	46c6      	mov	lr, r8
 8000d76:	4649      	mov	r1, r9
 8000d78:	d31a      	bcc.n	8000db0 <__udivmoddi4+0x294>
 8000d7a:	d017      	beq.n	8000dac <__udivmoddi4+0x290>
 8000d7c:	b15d      	cbz	r5, 8000d96 <__udivmoddi4+0x27a>
 8000d7e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d82:	eb67 0701 	sbc.w	r7, r7, r1
 8000d86:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d8a:	40f2      	lsrs	r2, r6
 8000d8c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d90:	40f7      	lsrs	r7, r6
 8000d92:	e9c5 2700 	strd	r2, r7, [r5]
 8000d96:	2600      	movs	r6, #0
 8000d98:	4631      	mov	r1, r6
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	462e      	mov	r6, r5
 8000da0:	4628      	mov	r0, r5
 8000da2:	e70b      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000da4:	4606      	mov	r6, r0
 8000da6:	e6e9      	b.n	8000b7c <__udivmoddi4+0x60>
 8000da8:	4618      	mov	r0, r3
 8000daa:	e6fd      	b.n	8000ba8 <__udivmoddi4+0x8c>
 8000dac:	4543      	cmp	r3, r8
 8000dae:	d2e5      	bcs.n	8000d7c <__udivmoddi4+0x260>
 8000db0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000db4:	eb69 0104 	sbc.w	r1, r9, r4
 8000db8:	3801      	subs	r0, #1
 8000dba:	e7df      	b.n	8000d7c <__udivmoddi4+0x260>
 8000dbc:	4608      	mov	r0, r1
 8000dbe:	e7d2      	b.n	8000d66 <__udivmoddi4+0x24a>
 8000dc0:	4660      	mov	r0, ip
 8000dc2:	e78d      	b.n	8000ce0 <__udivmoddi4+0x1c4>
 8000dc4:	4681      	mov	r9, r0
 8000dc6:	e7b9      	b.n	8000d3c <__udivmoddi4+0x220>
 8000dc8:	4666      	mov	r6, ip
 8000dca:	e775      	b.n	8000cb8 <__udivmoddi4+0x19c>
 8000dcc:	4630      	mov	r0, r6
 8000dce:	e74a      	b.n	8000c66 <__udivmoddi4+0x14a>
 8000dd0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dd4:	4439      	add	r1, r7
 8000dd6:	e713      	b.n	8000c00 <__udivmoddi4+0xe4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	443c      	add	r4, r7
 8000ddc:	e724      	b.n	8000c28 <__udivmoddi4+0x10c>
 8000dde:	bf00      	nop

08000de0 <__aeabi_idiv0>:
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop

08000de4 <BH1750_Init>:

//
//	Initialization.
//
BH1750_STATUS BH1750_Init(I2C_HandleTypeDef *hi2c)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	bh1750_i2c = hi2c;
 8000dec:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <BH1750_Init+0x34>)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6013      	str	r3, [r2, #0]
	if(BH1750_OK == BH1750_Reset())
 8000df2:	f000 f813 	bl	8000e1c <BH1750_Reset>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d107      	bne.n	8000e0c <BH1750_Init+0x28>
	{
		if(BH1750_OK == BH1750_SetMtreg(BH1750_DEFAULT_MTREG)) // Set default value;
 8000dfc:	2045      	movs	r0, #69	; 0x45
 8000dfe:	f000 f859 	bl	8000eb4 <BH1750_SetMtreg>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d101      	bne.n	8000e0c <BH1750_Init+0x28>
			return BH1750_OK;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	e000      	b.n	8000e0e <BH1750_Init+0x2a>
	}
	return BH1750_ERROR;
 8000e0c:	2301      	movs	r3, #1
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	200000a4 	.word	0x200000a4

08000e1c <BH1750_Reset>:

//
//	Reset all registers to default value.
//
BH1750_STATUS BH1750_Reset(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af02      	add	r7, sp, #8
	uint8_t tmp = 0x07;
 8000e22:	2307      	movs	r3, #7
 8000e24:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp, 1, 10))
 8000e26:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <BH1750_Reset+0x30>)
 8000e28:	6818      	ldr	r0, [r3, #0]
 8000e2a:	1dfa      	adds	r2, r7, #7
 8000e2c:	230a      	movs	r3, #10
 8000e2e:	9300      	str	r3, [sp, #0]
 8000e30:	2301      	movs	r3, #1
 8000e32:	2146      	movs	r1, #70	; 0x46
 8000e34:	f002 f836 	bl	8002ea4 <HAL_I2C_Master_Transmit>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d101      	bne.n	8000e42 <BH1750_Reset+0x26>
		return BH1750_OK;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	e000      	b.n	8000e44 <BH1750_Reset+0x28>

	return BH1750_ERROR;
 8000e42:	2301      	movs	r3, #1
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	200000a4 	.word	0x200000a4

08000e50 <BH1750_SetMode>:

//
//	Set the mode of converting. Look into bh1750_mode enum.
//
BH1750_STATUS BH1750_SetMode(bh1750_mode Mode)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af02      	add	r7, sp, #8
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
	if(!((Mode >> 4) || (Mode >> 5))) return BH1750_ERROR;
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	091b      	lsrs	r3, r3, #4
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d106      	bne.n	8000e72 <BH1750_SetMode+0x22>
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	095b      	lsrs	r3, r3, #5
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d101      	bne.n	8000e72 <BH1750_SetMode+0x22>
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e018      	b.n	8000ea4 <BH1750_SetMode+0x54>
	if((Mode & 0x0F) > 3) return BH1750_ERROR;
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	f003 030c 	and.w	r3, r3, #12
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <BH1750_SetMode+0x30>
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e011      	b.n	8000ea4 <BH1750_SetMode+0x54>

	Bh1750_Mode = Mode;
 8000e80:	79fa      	ldrb	r2, [r7, #7]
 8000e82:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <BH1750_SetMode+0x5c>)
 8000e84:	701a      	strb	r2, [r3, #0]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &Mode, 1, 10))
 8000e86:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <BH1750_SetMode+0x60>)
 8000e88:	6818      	ldr	r0, [r3, #0]
 8000e8a:	1dfa      	adds	r2, r7, #7
 8000e8c:	230a      	movs	r3, #10
 8000e8e:	9300      	str	r3, [sp, #0]
 8000e90:	2301      	movs	r3, #1
 8000e92:	2146      	movs	r1, #70	; 0x46
 8000e94:	f002 f806 	bl	8002ea4 <HAL_I2C_Master_Transmit>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d101      	bne.n	8000ea2 <BH1750_SetMode+0x52>
		return BH1750_OK;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e000      	b.n	8000ea4 <BH1750_SetMode+0x54>

	return BH1750_ERROR;
 8000ea2:	2301      	movs	r3, #1
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	200000a0 	.word	0x200000a0
 8000eb0:	200000a4 	.word	0x200000a4

08000eb4 <BH1750_SetMtreg>:

//
//	Set the Measurement Time register. It allows to increase or decrease the sensitivity.
//
BH1750_STATUS BH1750_SetMtreg(uint8_t Mtreg)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af02      	add	r7, sp, #8
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef retCode;
	if (Mtreg < 31 || Mtreg > 254) {
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	2b1e      	cmp	r3, #30
 8000ec2:	d902      	bls.n	8000eca <BH1750_SetMtreg+0x16>
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	2bff      	cmp	r3, #255	; 0xff
 8000ec8:	d101      	bne.n	8000ece <BH1750_SetMtreg+0x1a>
		return BH1750_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e037      	b.n	8000f3e <BH1750_SetMtreg+0x8a>
	}

	Bh1750_Mtreg = Mtreg;
 8000ece:	4a1e      	ldr	r2, [pc, #120]	; (8000f48 <BH1750_SetMtreg+0x94>)
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	7013      	strb	r3, [r2, #0]

	uint8_t tmp[2];

	tmp[0] = (0x40 | (Mtreg >> 5));
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	095b      	lsrs	r3, r3, #5
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	733b      	strb	r3, [r7, #12]
	tmp[1] = (0x60 | (Mtreg & 0x1F));
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	f003 031f 	and.w	r3, r3, #31
 8000eea:	b25b      	sxtb	r3, r3
 8000eec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000ef0:	b25b      	sxtb	r3, r3
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	737b      	strb	r3, [r7, #13]

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[0], 1, 10);
 8000ef6:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <BH1750_SetMtreg+0x98>)
 8000ef8:	6818      	ldr	r0, [r3, #0]
 8000efa:	f107 020c 	add.w	r2, r7, #12
 8000efe:	230a      	movs	r3, #10
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	2301      	movs	r3, #1
 8000f04:	2146      	movs	r1, #70	; 0x46
 8000f06:	f001 ffcd 	bl	8002ea4 <HAL_I2C_Master_Transmit>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK != retCode) {
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <BH1750_SetMtreg+0x64>
		return BH1750_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	e012      	b.n	8000f3e <BH1750_SetMtreg+0x8a>
	}

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[1], 1, 10);
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <BH1750_SetMtreg+0x98>)
 8000f1a:	6818      	ldr	r0, [r3, #0]
 8000f1c:	f107 030c 	add.w	r3, r7, #12
 8000f20:	1c5a      	adds	r2, r3, #1
 8000f22:	230a      	movs	r3, #10
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	2301      	movs	r3, #1
 8000f28:	2146      	movs	r1, #70	; 0x46
 8000f2a:	f001 ffbb 	bl	8002ea4 <HAL_I2C_Master_Transmit>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK == retCode) {
 8000f32:	7bfb      	ldrb	r3, [r7, #15]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d101      	bne.n	8000f3c <BH1750_SetMtreg+0x88>
		return BH1750_OK;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	e000      	b.n	8000f3e <BH1750_SetMtreg+0x8a>
	}

	return BH1750_ERROR;
 8000f3c:	2301      	movs	r3, #1
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	200000a8 	.word	0x200000a8
 8000f4c:	200000a4 	.word	0x200000a4

08000f50 <BH1750_ReadLight>:

//
//	Read the converted value and calculate the result.
//
BH1750_STATUS BH1750_ReadLight(uint32_t *Result)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af02      	add	r7, sp, #8
 8000f56:	6078      	str	r0, [r7, #4]
	uint32_t result;
	uint8_t tmp[2];

	if(HAL_OK == HAL_I2C_Master_Receive(bh1750_i2c, BH1750_ADDRESS, tmp, 2, 10))
 8000f58:	4b21      	ldr	r3, [pc, #132]	; (8000fe0 <BH1750_ReadLight+0x90>)
 8000f5a:	6818      	ldr	r0, [r3, #0]
 8000f5c:	f107 0208 	add.w	r2, r7, #8
 8000f60:	230a      	movs	r3, #10
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	2302      	movs	r3, #2
 8000f66:	2146      	movs	r1, #70	; 0x46
 8000f68:	f002 f890 	bl	800308c <HAL_I2C_Master_Receive>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d131      	bne.n	8000fd6 <BH1750_ReadLight+0x86>
	{
		result = (tmp[0] << 8) | (tmp[1]);
 8000f72:	7a3b      	ldrb	r3, [r7, #8]
 8000f74:	021b      	lsls	r3, r3, #8
 8000f76:	7a7a      	ldrb	r2, [r7, #9]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	60fb      	str	r3, [r7, #12]

		if(Bh1750_Mtreg != BH1750_DEFAULT_MTREG)
 8000f7c:	4b19      	ldr	r3, [pc, #100]	; (8000fe4 <BH1750_ReadLight+0x94>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b45      	cmp	r3, #69	; 0x45
 8000f82:	d00a      	beq.n	8000f9a <BH1750_ReadLight+0x4a>
		{
			result *= (uint32_t)((uint8_t)BH1750_DEFAULT_MTREG/(uint32_t)Bh1750_Mtreg);
 8000f84:	4b17      	ldr	r3, [pc, #92]	; (8000fe4 <BH1750_ReadLight+0x94>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2245      	movs	r2, #69	; 0x45
 8000f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	461a      	mov	r2, r3
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	fb02 f303 	mul.w	r3, r2, r3
 8000f98:	60fb      	str	r3, [r7, #12]
		}

		if(Bh1750_Mode == ONETIME_HIGH_RES_MODE_2 || Bh1750_Mode == CONTINUOUS_HIGH_RES_MODE_2)
 8000f9a:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <BH1750_ReadLight+0x98>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b21      	cmp	r3, #33	; 0x21
 8000fa0:	d003      	beq.n	8000faa <BH1750_ReadLight+0x5a>
 8000fa2:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <BH1750_ReadLight+0x98>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b11      	cmp	r3, #17
 8000fa8:	d110      	bne.n	8000fcc <BH1750_ReadLight+0x7c>
		{
			result /= 2.0;
 8000faa:	68f8      	ldr	r0, [r7, #12]
 8000fac:	f7ff faa2 	bl	80004f4 <__aeabi_ui2d>
 8000fb0:	f04f 0200 	mov.w	r2, #0
 8000fb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fb8:	f7ff fc40 	bl	800083c <__aeabi_ddiv>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	4610      	mov	r0, r2
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	f7ff fd22 	bl	8000a0c <__aeabi_d2uiz>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	60fb      	str	r3, [r7, #12]
		}

		*Result = result / (uint32_t)BH1750_CONVERSION_FACTOR;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	68fa      	ldr	r2, [r7, #12]
 8000fd0:	601a      	str	r2, [r3, #0]
		return BH1750_OK;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	e000      	b.n	8000fd8 <BH1750_ReadLight+0x88>
	}
	return BH1750_ERROR;
 8000fd6:	2301      	movs	r3, #1
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	200000a4 	.word	0x200000a4
 8000fe4:	200000a8 	.word	0x200000a8
 8000fe8:	200000a0 	.word	0x200000a0

08000fec <DWT_Delay_us>:
/**
 * @brief This function provides a delay (in microseconds)
 * @param microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 uint32_t clk_cycle_start = DWT->CYCCNT;
 8000ff4:	4b0d      	ldr	r3, [pc, #52]	; (800102c <DWT_Delay_us+0x40>)
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	60fb      	str	r3, [r7, #12]
 /* Go to number of cycles for system */
 microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000ffa:	f003 fc43 	bl	8004884 <HAL_RCC_GetHCLKFreq>
 8000ffe:	4603      	mov	r3, r0
 8001000:	4a0b      	ldr	r2, [pc, #44]	; (8001030 <DWT_Delay_us+0x44>)
 8001002:	fba2 2303 	umull	r2, r3, r2, r3
 8001006:	0c9b      	lsrs	r3, r3, #18
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	fb02 f303 	mul.w	r3, r2, r3
 800100e:	607b      	str	r3, [r7, #4]
 /* Delay till end */
 while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8001010:	bf00      	nop
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <DWT_Delay_us+0x40>)
 8001014:	685a      	ldr	r2, [r3, #4]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	1ad2      	subs	r2, r2, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	429a      	cmp	r2, r3
 800101e:	d3f8      	bcc.n	8001012 <DWT_Delay_us+0x26>
}
 8001020:	bf00      	nop
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	e0001000 	.word	0xe0001000
 8001030:	431bde83 	.word	0x431bde83

08001034 <Set_Pin_Output>:
 *  Created on: Nov 9, 2021
 *      Author: oxford
 */
#include "DHT11.h"

void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b088      	sub	sp, #32
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	460b      	mov	r3, r1
 800103e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001040:	f107 030c 	add.w	r3, r7, #12
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001050:	887b      	ldrh	r3, [r7, #2]
 8001052:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001054:	2301      	movs	r3, #1
 8001056:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001058:	2300      	movs	r3, #0
 800105a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	4619      	mov	r1, r3
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f001 fcb4 	bl	80029d0 <HAL_GPIO_Init>
}
 8001068:	bf00      	nop
 800106a:	3720      	adds	r7, #32
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	460b      	mov	r3, r1
 800107a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800108c:	887b      	ldrh	r3, [r7, #2]
 800108e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001090:	2300      	movs	r3, #0
 8001092:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001094:	2301      	movs	r3, #1
 8001096:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001098:	f107 030c 	add.w	r3, r7, #12
 800109c:	4619      	mov	r1, r3
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f001 fc96 	bl	80029d0 <HAL_GPIO_Init>
}
 80010a4:	bf00      	nop
 80010a6:	3720      	adds	r7, #32
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <DHT11_Start>:

void DHT11_Start(void) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
	Set_Pin_Output(DHT11_PORT, DHT11_PIN);  // set the pin as output
 80010b0:	2101      	movs	r1, #1
 80010b2:	480d      	ldr	r0, [pc, #52]	; (80010e8 <DHT11_Start+0x3c>)
 80010b4:	f7ff ffbe 	bl	8001034 <Set_Pin_Output>
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 80010b8:	2200      	movs	r2, #0
 80010ba:	2101      	movs	r1, #1
 80010bc:	480a      	ldr	r0, [pc, #40]	; (80010e8 <DHT11_Start+0x3c>)
 80010be:	f001 fe49 	bl	8002d54 <HAL_GPIO_WritePin>
	DWT_Delay_us(18000);   // wait for 18ms
 80010c2:	f244 6050 	movw	r0, #18000	; 0x4650
 80010c6:	f7ff ff91 	bl	8000fec <DWT_Delay_us>
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 80010ca:	2201      	movs	r2, #1
 80010cc:	2101      	movs	r1, #1
 80010ce:	4806      	ldr	r0, [pc, #24]	; (80010e8 <DHT11_Start+0x3c>)
 80010d0:	f001 fe40 	bl	8002d54 <HAL_GPIO_WritePin>
	DWT_Delay_us(20);   // wait for 20us
 80010d4:	2014      	movs	r0, #20
 80010d6:	f7ff ff89 	bl	8000fec <DWT_Delay_us>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 80010da:	2101      	movs	r1, #1
 80010dc:	4802      	ldr	r0, [pc, #8]	; (80010e8 <DHT11_Start+0x3c>)
 80010de:	f7ff ffc7 	bl	8001070 <Set_Pin_Input>
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	48000c00 	.word	0x48000c00

080010ec <DHT11_Check_Response>:

uint8_t DHT11_Check_Response(void) {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	71fb      	strb	r3, [r7, #7]

	DWT_Delay_us(40);	// wait for 40 us
 80010f6:	2028      	movs	r0, #40	; 0x28
 80010f8:	f7ff ff78 	bl	8000fec <DWT_Delay_us>

	if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))) {
 80010fc:	2101      	movs	r1, #1
 80010fe:	4811      	ldr	r0, [pc, #68]	; (8001144 <DHT11_Check_Response+0x58>)
 8001100:	f001 fe10 	bl	8002d24 <HAL_GPIO_ReadPin>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d10e      	bne.n	8001128 <DHT11_Check_Response+0x3c>
		DWT_Delay_us(80);
 800110a:	2050      	movs	r0, #80	; 0x50
 800110c:	f7ff ff6e 	bl	8000fec <DWT_Delay_us>

		if ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 8001110:	2101      	movs	r1, #1
 8001112:	480c      	ldr	r0, [pc, #48]	; (8001144 <DHT11_Check_Response+0x58>)
 8001114:	f001 fe06 	bl	8002d24 <HAL_GPIO_ReadPin>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d002      	beq.n	8001124 <DHT11_Check_Response+0x38>
			Response = 1;
 800111e:	2301      	movs	r3, #1
 8001120:	71fb      	strb	r3, [r7, #7]
 8001122:	e001      	b.n	8001128 <DHT11_Check_Response+0x3c>
		else
			Response = -1; // 255
 8001124:	23ff      	movs	r3, #255	; 0xff
 8001126:	71fb      	strb	r3, [r7, #7]
	}

	while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 8001128:	bf00      	nop
 800112a:	2101      	movs	r1, #1
 800112c:	4805      	ldr	r0, [pc, #20]	; (8001144 <DHT11_Check_Response+0x58>)
 800112e:	f001 fdf9 	bl	8002d24 <HAL_GPIO_ReadPin>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d1f8      	bne.n	800112a <DHT11_Check_Response+0x3e>
		;   // wait for the pin to go low

	return Response;
 8001138:	79fb      	ldrb	r3, [r7, #7]
}
 800113a:	4618      	mov	r0, r3
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	48000c00 	.word	0x48000c00

08001148 <DHT11_Read>:

uint8_t DHT11_Read(void) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
	uint8_t i, j;
	for (j = 0; j < 8; j++) {
 800114e:	2300      	movs	r3, #0
 8001150:	71bb      	strb	r3, [r7, #6]
 8001152:	e037      	b.n	80011c4 <DHT11_Read+0x7c>
		while (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 8001154:	bf00      	nop
 8001156:	2101      	movs	r1, #1
 8001158:	481e      	ldr	r0, [pc, #120]	; (80011d4 <DHT11_Read+0x8c>)
 800115a:	f001 fde3 	bl	8002d24 <HAL_GPIO_ReadPin>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d0f8      	beq.n	8001156 <DHT11_Read+0xe>
			;   // wait for the pin to go high
		DWT_Delay_us(40);  // wait for 40 us
 8001164:	2028      	movs	r0, #40	; 0x28
 8001166:	f7ff ff41 	bl	8000fec <DWT_Delay_us>
		if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))   // if the pin is low
 800116a:	2101      	movs	r1, #1
 800116c:	4819      	ldr	r0, [pc, #100]	; (80011d4 <DHT11_Read+0x8c>)
 800116e:	f001 fdd9 	bl	8002d24 <HAL_GPIO_ReadPin>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d10e      	bne.n	8001196 <DHT11_Read+0x4e>
		{
			i &= ~(1 << (7 - j));   // write 0
 8001178:	79bb      	ldrb	r3, [r7, #6]
 800117a:	f1c3 0307 	rsb	r3, r3, #7
 800117e:	2201      	movs	r2, #1
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	b25b      	sxtb	r3, r3
 8001186:	43db      	mvns	r3, r3
 8001188:	b25a      	sxtb	r2, r3
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	4013      	ands	r3, r2
 8001190:	b25b      	sxtb	r3, r3
 8001192:	71fb      	strb	r3, [r7, #7]
 8001194:	e00b      	b.n	80011ae <DHT11_Read+0x66>
		} else
			i |= (1 << (7 - j));  // if the pin is high, write 1
 8001196:	79bb      	ldrb	r3, [r7, #6]
 8001198:	f1c3 0307 	rsb	r3, r3, #7
 800119c:	2201      	movs	r2, #1
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	b25a      	sxtb	r2, r3
 80011a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	b25b      	sxtb	r3, r3
 80011ac:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 80011ae:	bf00      	nop
 80011b0:	2101      	movs	r1, #1
 80011b2:	4808      	ldr	r0, [pc, #32]	; (80011d4 <DHT11_Read+0x8c>)
 80011b4:	f001 fdb6 	bl	8002d24 <HAL_GPIO_ReadPin>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1f8      	bne.n	80011b0 <DHT11_Read+0x68>
	for (j = 0; j < 8; j++) {
 80011be:	79bb      	ldrb	r3, [r7, #6]
 80011c0:	3301      	adds	r3, #1
 80011c2:	71bb      	strb	r3, [r7, #6]
 80011c4:	79bb      	ldrb	r3, [r7, #6]
 80011c6:	2b07      	cmp	r3, #7
 80011c8:	d9c4      	bls.n	8001154 <DHT11_Read+0xc>
			;  // wait for the pin to go low
	}
	return i;
 80011ca:	79fb      	ldrb	r3, [r7, #7]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	48000c00 	.word	0x48000c00

080011d8 <DHT11_TempAndHumidity>:

void DHT11_TempAndHumidity(uint32_t *Temperature, uint32_t *Humidity) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]

	DHT11_Start();
 80011e2:	f7ff ff63 	bl	80010ac <DHT11_Start>
	isItHere = DHT11_Check_Response();
 80011e6:	f7ff ff81 	bl	80010ec <DHT11_Check_Response>
 80011ea:	4603      	mov	r3, r0
 80011ec:	461a      	mov	r2, r3
 80011ee:	4b17      	ldr	r3, [pc, #92]	; (800124c <DHT11_TempAndHumidity+0x74>)
 80011f0:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT11_Read();
 80011f2:	f7ff ffa9 	bl	8001148 <DHT11_Read>
 80011f6:	4603      	mov	r3, r0
 80011f8:	461a      	mov	r2, r3
 80011fa:	4b15      	ldr	r3, [pc, #84]	; (8001250 <DHT11_TempAndHumidity+0x78>)
 80011fc:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT11_Read();
 80011fe:	f7ff ffa3 	bl	8001148 <DHT11_Read>
 8001202:	4603      	mov	r3, r0
 8001204:	461a      	mov	r2, r3
 8001206:	4b13      	ldr	r3, [pc, #76]	; (8001254 <DHT11_TempAndHumidity+0x7c>)
 8001208:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT11_Read();
 800120a:	f7ff ff9d 	bl	8001148 <DHT11_Read>
 800120e:	4603      	mov	r3, r0
 8001210:	461a      	mov	r2, r3
 8001212:	4b11      	ldr	r3, [pc, #68]	; (8001258 <DHT11_TempAndHumidity+0x80>)
 8001214:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT11_Read();
 8001216:	f7ff ff97 	bl	8001148 <DHT11_Read>
 800121a:	4603      	mov	r3, r0
 800121c:	461a      	mov	r2, r3
 800121e:	4b0f      	ldr	r3, [pc, #60]	; (800125c <DHT11_TempAndHumidity+0x84>)
 8001220:	701a      	strb	r2, [r3, #0]
	SUM = DHT11_Read();
 8001222:	f7ff ff91 	bl	8001148 <DHT11_Read>
 8001226:	4603      	mov	r3, r0
 8001228:	b29a      	uxth	r2, r3
 800122a:	4b0d      	ldr	r3, [pc, #52]	; (8001260 <DHT11_TempAndHumidity+0x88>)
 800122c:	801a      	strh	r2, [r3, #0]

	*Temperature = Temp_byte1;
 800122e:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <DHT11_TempAndHumidity+0x80>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	461a      	mov	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	601a      	str	r2, [r3, #0]
	*Humidity = Rh_byte1;
 8001238:	4b05      	ldr	r3, [pc, #20]	; (8001250 <DHT11_TempAndHumidity+0x78>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	461a      	mov	r2, r3
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	601a      	str	r2, [r3, #0]
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	200000aa 	.word	0x200000aa
 8001250:	200000ab 	.word	0x200000ab
 8001254:	200000b1 	.word	0x200000b1
 8001258:	200000b0 	.word	0x200000b0
 800125c:	200000b4 	.word	0x200000b4
 8001260:	200000b2 	.word	0x200000b2

08001264 <CS_Select>:
#define NRF24_CSN_PORT   GPIOB
#define NRF24_CSN_PIN    GPIO_PIN_6
*/

void CS_Select (void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8001268:	2200      	movs	r2, #0
 800126a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800126e:	4802      	ldr	r0, [pc, #8]	; (8001278 <CS_Select+0x14>)
 8001270:	f001 fd70 	bl	8002d54 <HAL_GPIO_WritePin>
}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}
 8001278:	48001000 	.word	0x48001000

0800127c <CS_UnSelect>:

void CS_UnSelect (void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8001280:	2201      	movs	r2, #1
 8001282:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001286:	4802      	ldr	r0, [pc, #8]	; (8001290 <CS_UnSelect+0x14>)
 8001288:	f001 fd64 	bl	8002d54 <HAL_GPIO_WritePin>
}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}
 8001290:	48001000 	.word	0x48001000

08001294 <CE_Enable>:


void CE_Enable (void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 8001298:	2201      	movs	r2, #1
 800129a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800129e:	4802      	ldr	r0, [pc, #8]	; (80012a8 <CE_Enable+0x14>)
 80012a0:	f001 fd58 	bl	8002d54 <HAL_GPIO_WritePin>
}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	48001000 	.word	0x48001000

080012ac <CE_Disable>:

void CE_Disable (void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 80012b0:	2200      	movs	r2, #0
 80012b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012b6:	4802      	ldr	r0, [pc, #8]	; (80012c0 <CE_Disable+0x14>)
 80012b8:	f001 fd4c 	bl	8002d54 <HAL_GPIO_WritePin>
}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	48001000 	.word	0x48001000

080012c4 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	460a      	mov	r2, r1
 80012ce:	71fb      	strb	r3, [r7, #7]
 80012d0:	4613      	mov	r3, r2
 80012d2:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	f043 0320 	orr.w	r3, r3, #32
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 80012de:	79bb      	ldrb	r3, [r7, #6]
 80012e0:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80012e2:	f7ff ffbf 	bl	8001264 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 80012e6:	f107 010c 	add.w	r1, r7, #12
 80012ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ee:	2202      	movs	r2, #2
 80012f0:	4804      	ldr	r0, [pc, #16]	; (8001304 <nrf24_WriteReg+0x40>)
 80012f2:	f004 f8be 	bl	8005472 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80012f6:	f7ff ffc1 	bl	800127c <CS_UnSelect>
}
 80012fa:	bf00      	nop
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	200001c4 	.word	0x200001c4

08001308 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
 8001314:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8001316:	7bfb      	ldrb	r3, [r7, #15]
 8001318:	f043 0320 	orr.w	r3, r3, #32
 800131c:	b2db      	uxtb	r3, r3
 800131e:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8001320:	f7ff ffa0 	bl	8001264 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 8001324:	f107 0114 	add.w	r1, r7, #20
 8001328:	2364      	movs	r3, #100	; 0x64
 800132a:	2201      	movs	r2, #1
 800132c:	4808      	ldr	r0, [pc, #32]	; (8001350 <nrf24_WriteRegMulti+0x48>)
 800132e:	f004 f8a0 	bl	8005472 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	b29a      	uxth	r2, r3
 8001336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800133a:	68b9      	ldr	r1, [r7, #8]
 800133c:	4804      	ldr	r0, [pc, #16]	; (8001350 <nrf24_WriteRegMulti+0x48>)
 800133e:	f004 f898 	bl	8005472 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8001342:	f7ff ff9b 	bl	800127c <CS_UnSelect>
}
 8001346:	bf00      	nop
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200001c4 	.word	0x200001c4

08001354 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 800135e:	2300      	movs	r3, #0
 8001360:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8001362:	f7ff ff7f 	bl	8001264 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8001366:	1df9      	adds	r1, r7, #7
 8001368:	2364      	movs	r3, #100	; 0x64
 800136a:	2201      	movs	r2, #1
 800136c:	4808      	ldr	r0, [pc, #32]	; (8001390 <nrf24_ReadReg+0x3c>)
 800136e:	f004 f880 	bl	8005472 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 8001372:	f107 010f 	add.w	r1, r7, #15
 8001376:	2364      	movs	r3, #100	; 0x64
 8001378:	2201      	movs	r2, #1
 800137a:	4805      	ldr	r0, [pc, #20]	; (8001390 <nrf24_ReadReg+0x3c>)
 800137c:	f004 f9e7 	bl	800574e <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8001380:	f7ff ff7c 	bl	800127c <CS_UnSelect>

	return data;
 8001384:	7bfb      	ldrb	r3, [r7, #15]
}
 8001386:	4618      	mov	r0, r3
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200001c4 	.word	0x200001c4

08001394 <nrf24_reset>:
	// Pull the CS HIGH to release the device
	CS_UnSelect();
}

void nrf24_reset(uint8_t REG)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	2b07      	cmp	r3, #7
 80013a2:	d104      	bne.n	80013ae <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 80013a4:	2100      	movs	r1, #0
 80013a6:	2007      	movs	r0, #7
 80013a8:	f7ff ff8c 	bl	80012c4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 80013ac:	e090      	b.n	80014d0 <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	2b17      	cmp	r3, #23
 80013b2:	d104      	bne.n	80013be <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 80013b4:	2111      	movs	r1, #17
 80013b6:	2017      	movs	r0, #23
 80013b8:	f7ff ff84 	bl	80012c4 <nrf24_WriteReg>
}
 80013bc:	e088      	b.n	80014d0 <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 80013be:	2108      	movs	r1, #8
 80013c0:	2000      	movs	r0, #0
 80013c2:	f7ff ff7f 	bl	80012c4 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 80013c6:	213f      	movs	r1, #63	; 0x3f
 80013c8:	2001      	movs	r0, #1
 80013ca:	f7ff ff7b 	bl	80012c4 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 80013ce:	2103      	movs	r1, #3
 80013d0:	2002      	movs	r0, #2
 80013d2:	f7ff ff77 	bl	80012c4 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 80013d6:	2103      	movs	r1, #3
 80013d8:	2003      	movs	r0, #3
 80013da:	f7ff ff73 	bl	80012c4 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 80013de:	2103      	movs	r1, #3
 80013e0:	2004      	movs	r0, #4
 80013e2:	f7ff ff6f 	bl	80012c4 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 80013e6:	2102      	movs	r1, #2
 80013e8:	2005      	movs	r0, #5
 80013ea:	f7ff ff6b 	bl	80012c4 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 80013ee:	210e      	movs	r1, #14
 80013f0:	2006      	movs	r0, #6
 80013f2:	f7ff ff67 	bl	80012c4 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 80013f6:	2100      	movs	r1, #0
 80013f8:	2007      	movs	r0, #7
 80013fa:	f7ff ff63 	bl	80012c4 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 80013fe:	2100      	movs	r1, #0
 8001400:	2008      	movs	r0, #8
 8001402:	f7ff ff5f 	bl	80012c4 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 8001406:	2100      	movs	r1, #0
 8001408:	2009      	movs	r0, #9
 800140a:	f7ff ff5b 	bl	80012c4 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 800140e:	4a32      	ldr	r2, [pc, #200]	; (80014d8 <nrf24_reset+0x144>)
 8001410:	f107 0318 	add.w	r3, r7, #24
 8001414:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001418:	6018      	str	r0, [r3, #0]
 800141a:	3304      	adds	r3, #4
 800141c:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 800141e:	f107 0318 	add.w	r3, r7, #24
 8001422:	2205      	movs	r2, #5
 8001424:	4619      	mov	r1, r3
 8001426:	200a      	movs	r0, #10
 8001428:	f7ff ff6e 	bl	8001308 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 800142c:	4a2b      	ldr	r2, [pc, #172]	; (80014dc <nrf24_reset+0x148>)
 800142e:	f107 0310 	add.w	r3, r7, #16
 8001432:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001436:	6018      	str	r0, [r3, #0]
 8001438:	3304      	adds	r3, #4
 800143a:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 800143c:	f107 0310 	add.w	r3, r7, #16
 8001440:	2205      	movs	r2, #5
 8001442:	4619      	mov	r1, r3
 8001444:	200b      	movs	r0, #11
 8001446:	f7ff ff5f 	bl	8001308 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 800144a:	21c3      	movs	r1, #195	; 0xc3
 800144c:	200c      	movs	r0, #12
 800144e:	f7ff ff39 	bl	80012c4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 8001452:	21c4      	movs	r1, #196	; 0xc4
 8001454:	200d      	movs	r0, #13
 8001456:	f7ff ff35 	bl	80012c4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 800145a:	21c5      	movs	r1, #197	; 0xc5
 800145c:	200e      	movs	r0, #14
 800145e:	f7ff ff31 	bl	80012c4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 8001462:	21c6      	movs	r1, #198	; 0xc6
 8001464:	200f      	movs	r0, #15
 8001466:	f7ff ff2d 	bl	80012c4 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 800146a:	4a1b      	ldr	r2, [pc, #108]	; (80014d8 <nrf24_reset+0x144>)
 800146c:	f107 0308 	add.w	r3, r7, #8
 8001470:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001474:	6018      	str	r0, [r3, #0]
 8001476:	3304      	adds	r3, #4
 8001478:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 800147a:	f107 0308 	add.w	r3, r7, #8
 800147e:	2205      	movs	r2, #5
 8001480:	4619      	mov	r1, r3
 8001482:	2010      	movs	r0, #16
 8001484:	f7ff ff40 	bl	8001308 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 8001488:	2100      	movs	r1, #0
 800148a:	2011      	movs	r0, #17
 800148c:	f7ff ff1a 	bl	80012c4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 8001490:	2100      	movs	r1, #0
 8001492:	2012      	movs	r0, #18
 8001494:	f7ff ff16 	bl	80012c4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 8001498:	2100      	movs	r1, #0
 800149a:	2013      	movs	r0, #19
 800149c:	f7ff ff12 	bl	80012c4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 80014a0:	2100      	movs	r1, #0
 80014a2:	2014      	movs	r0, #20
 80014a4:	f7ff ff0e 	bl	80012c4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 80014a8:	2100      	movs	r1, #0
 80014aa:	2015      	movs	r0, #21
 80014ac:	f7ff ff0a 	bl	80012c4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 80014b0:	2100      	movs	r1, #0
 80014b2:	2016      	movs	r0, #22
 80014b4:	f7ff ff06 	bl	80012c4 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 80014b8:	2111      	movs	r1, #17
 80014ba:	2017      	movs	r0, #23
 80014bc:	f7ff ff02 	bl	80012c4 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 80014c0:	2100      	movs	r1, #0
 80014c2:	201c      	movs	r0, #28
 80014c4:	f7ff fefe 	bl	80012c4 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 80014c8:	2100      	movs	r1, #0
 80014ca:	201d      	movs	r0, #29
 80014cc:	f7ff fefa 	bl	80012c4 <nrf24_WriteReg>
}
 80014d0:	bf00      	nop
 80014d2:	3720      	adds	r7, #32
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	080073c4 	.word	0x080073c4
 80014dc:	080073cc 	.word	0x080073cc

080014e0 <NRF24_Init>:




void NRF24_Init (void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 80014e4:	f7ff fee2 	bl	80012ac <CE_Disable>


	// reset everything
	nrf24_reset (0);
 80014e8:	2000      	movs	r0, #0
 80014ea:	f7ff ff53 	bl	8001394 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 80014ee:	2100      	movs	r1, #0
 80014f0:	2000      	movs	r0, #0
 80014f2:	f7ff fee7 	bl	80012c4 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 80014f6:	2100      	movs	r1, #0
 80014f8:	2001      	movs	r0, #1
 80014fa:	f7ff fee3 	bl	80012c4 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 80014fe:	2100      	movs	r1, #0
 8001500:	2002      	movs	r0, #2
 8001502:	f7ff fedf 	bl	80012c4 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 8001506:	2103      	movs	r1, #3
 8001508:	2003      	movs	r0, #3
 800150a:	f7ff fedb 	bl	80012c4 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 800150e:	2100      	movs	r1, #0
 8001510:	2004      	movs	r0, #4
 8001512:	f7ff fed7 	bl	80012c4 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 8001516:	2100      	movs	r1, #0
 8001518:	2005      	movs	r0, #5
 800151a:	f7ff fed3 	bl	80012c4 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 800151e:	210e      	movs	r1, #14
 8001520:	2006      	movs	r0, #6
 8001522:	f7ff fecf 	bl	80012c4 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8001526:	f7ff feb5 	bl	8001294 <CE_Enable>

}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}

0800152e <NRF24_TxMode>:


// set up the Tx mode

void NRF24_TxMode (uint8_t *Address, uint8_t channel)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b084      	sub	sp, #16
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
 8001536:	460b      	mov	r3, r1
 8001538:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 800153a:	f7ff feb7 	bl	80012ac <CE_Disable>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 800153e:	78fb      	ldrb	r3, [r7, #3]
 8001540:	4619      	mov	r1, r3
 8001542:	2005      	movs	r0, #5
 8001544:	f7ff febe 	bl	80012c4 <nrf24_WriteReg>

	nrf24_WriteRegMulti(TX_ADDR, Address, 5);  // Write the TX address
 8001548:	2205      	movs	r2, #5
 800154a:	6879      	ldr	r1, [r7, #4]
 800154c:	2010      	movs	r0, #16
 800154e:	f7ff fedb 	bl	8001308 <nrf24_WriteRegMulti>


	// power up the device
	uint8_t config = nrf24_ReadReg(CONFIG);
 8001552:	2000      	movs	r0, #0
 8001554:	f7ff fefe 	bl	8001354 <nrf24_ReadReg>
 8001558:	4603      	mov	r3, r0
 800155a:	73fb      	strb	r3, [r7, #15]
//	config = config | (1<<1);   // write 1 in the PWR_UP bit
	config = config & (0xF2);    // write 0 in the PRIM_RX, and 1 in the PWR_UP, and all other bits are masked
 800155c:	7bfb      	ldrb	r3, [r7, #15]
 800155e:	f023 030d 	bic.w	r3, r3, #13
 8001562:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (CONFIG, config);
 8001564:	7bfb      	ldrb	r3, [r7, #15]
 8001566:	4619      	mov	r1, r3
 8001568:	2000      	movs	r0, #0
 800156a:	f7ff feab 	bl	80012c4 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 800156e:	f7ff fe91 	bl	8001294 <CE_Enable>
}
 8001572:	bf00      	nop
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b088      	sub	sp, #32
 8001580:	af04      	add	r7, sp, #16
 8001582:	4603      	mov	r3, r0
 8001584:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
 800158a:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <BMP280_Read8+0x38>)
 800158c:	6818      	ldr	r0, [r3, #0]
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	b29a      	uxth	r2, r3
 8001592:	230a      	movs	r3, #10
 8001594:	9302      	str	r3, [sp, #8]
 8001596:	2301      	movs	r3, #1
 8001598:	9301      	str	r3, [sp, #4]
 800159a:	f107 030f 	add.w	r3, r7, #15
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	2301      	movs	r3, #1
 80015a2:	21ec      	movs	r1, #236	; 0xec
 80015a4:	f001 ff7c 	bl	80034a0 <HAL_I2C_Mem_Read>
  return tmp;
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return tmp[1];
#endif
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200000d0 	.word	0x200000d0

080015b8 <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b088      	sub	sp, #32
 80015bc:	af04      	add	r7, sp, #16
 80015be:	4603      	mov	r3, r0
 80015c0:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[2];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
 80015c2:	4b0d      	ldr	r3, [pc, #52]	; (80015f8 <BMP280_Read16+0x40>)
 80015c4:	6818      	ldr	r0, [r3, #0]
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	b29a      	uxth	r2, r3
 80015ca:	230a      	movs	r3, #10
 80015cc:	9302      	str	r3, [sp, #8]
 80015ce:	2302      	movs	r3, #2
 80015d0:	9301      	str	r3, [sp, #4]
 80015d2:	f107 030c 	add.w	r3, r7, #12
 80015d6:	9300      	str	r3, [sp, #0]
 80015d8:	2301      	movs	r3, #1
 80015da:	21ec      	movs	r1, #236	; 0xec
 80015dc:	f001 ff60 	bl	80034a0 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 8) | tmp[1]);
 80015e0:	7b3b      	ldrb	r3, [r7, #12]
 80015e2:	021b      	lsls	r3, r3, #8
 80015e4:	b21a      	sxth	r2, r3
 80015e6:	7b7b      	ldrb	r3, [r7, #13]
 80015e8:	b21b      	sxth	r3, r3
 80015ea:	4313      	orrs	r3, r2
 80015ec:	b21b      	sxth	r3, r3
 80015ee:	b29b      	uxth	r3, r3
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 8) | tmp[2]);
#endif
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	200000d0 	.word	0x200000d0

080015fc <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff ffd5 	bl	80015b8 <BMP280_Read16>
 800160e:	4603      	mov	r3, r0
 8001610:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 8001612:	89fb      	ldrh	r3, [r7, #14]
 8001614:	0a1b      	lsrs	r3, r3, #8
 8001616:	b29b      	uxth	r3, r3
 8001618:	b21a      	sxth	r2, r3
 800161a:	89fb      	ldrh	r3, [r7, #14]
 800161c:	021b      	lsls	r3, r3, #8
 800161e:	b21b      	sxth	r3, r3
 8001620:	4313      	orrs	r3, r2
 8001622:	b21b      	sxth	r3, r3
 8001624:	b29b      	uxth	r3, r3
}
 8001626:	4618      	mov	r0, r3
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
	...

08001630 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af04      	add	r7, sp, #16
 8001636:	4603      	mov	r3, r0
 8001638:	460a      	mov	r2, r1
 800163a:	71fb      	strb	r3, [r7, #7]
 800163c:	4613      	mov	r3, r2
 800163e:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
 8001640:	4b08      	ldr	r3, [pc, #32]	; (8001664 <BMP280_Write8+0x34>)
 8001642:	6818      	ldr	r0, [r3, #0]
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	b29a      	uxth	r2, r3
 8001648:	230a      	movs	r3, #10
 800164a:	9302      	str	r3, [sp, #8]
 800164c:	2301      	movs	r3, #1
 800164e:	9301      	str	r3, [sp, #4]
 8001650:	1dbb      	adds	r3, r7, #6
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	2301      	movs	r3, #1
 8001656:	21ec      	movs	r1, #236	; 0xec
 8001658:	f001 fe0e 	bl	8003278 <HAL_I2C_Mem_Write>
	tmp[1] = data;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
}
 800165c:	bf00      	nop
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	200000d0 	.word	0x200000d0

08001668 <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b088      	sub	sp, #32
 800166c:	af04      	add	r7, sp, #16
 800166e:	4603      	mov	r3, r0
 8001670:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[3];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
 8001672:	4b0d      	ldr	r3, [pc, #52]	; (80016a8 <BMP280_Read24+0x40>)
 8001674:	6818      	ldr	r0, [r3, #0]
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	b29a      	uxth	r2, r3
 800167a:	230a      	movs	r3, #10
 800167c:	9302      	str	r3, [sp, #8]
 800167e:	2303      	movs	r3, #3
 8001680:	9301      	str	r3, [sp, #4]
 8001682:	f107 030c 	add.w	r3, r7, #12
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	2301      	movs	r3, #1
 800168a:	21ec      	movs	r1, #236	; 0xec
 800168c:	f001 ff08 	bl	80034a0 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
 8001690:	7b3b      	ldrb	r3, [r7, #12]
 8001692:	041a      	lsls	r2, r3, #16
 8001694:	7b7b      	ldrb	r3, [r7, #13]
 8001696:	021b      	lsls	r3, r3, #8
 8001698:	4313      	orrs	r3, r2
 800169a:	7bba      	ldrb	r2, [r7, #14]
 800169c:	4313      	orrs	r3, r2
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
#endif
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200000d0 	.word	0x200000d0

080016ac <BMP280_Init>:
{
	BMP280_Write8(BMP280_CONFIG, (((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC);
}
#if(BMP_I2C == 1)
void BMP280_Init(I2C_HandleTypeDef *i2c_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	4608      	mov	r0, r1
 80016b6:	4611      	mov	r1, r2
 80016b8:	461a      	mov	r2, r3
 80016ba:	4603      	mov	r3, r0
 80016bc:	70fb      	strb	r3, [r7, #3]
 80016be:	460b      	mov	r3, r1
 80016c0:	70bb      	strb	r3, [r7, #2]
 80016c2:	4613      	mov	r3, r2
 80016c4:	707b      	strb	r3, [r7, #1]
	i2c_h = i2c_handler;
 80016c6:	4a48      	ldr	r2, [pc, #288]	; (80017e8 <BMP280_Init+0x13c>)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6013      	str	r3, [r2, #0]
	spi_h = spi_handler;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_Delay(5);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
	if (mode > BMP280_NORMALMODE)
 80016cc:	787b      	ldrb	r3, [r7, #1]
 80016ce:	2b03      	cmp	r3, #3
 80016d0:	d901      	bls.n	80016d6 <BMP280_Init+0x2a>
	    mode = BMP280_NORMALMODE;
 80016d2:	2303      	movs	r3, #3
 80016d4:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 80016d6:	4a45      	ldr	r2, [pc, #276]	; (80017ec <BMP280_Init+0x140>)
 80016d8:	787b      	ldrb	r3, [r7, #1]
 80016da:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 80016dc:	787b      	ldrb	r3, [r7, #1]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d101      	bne.n	80016e6 <BMP280_Init+0x3a>
		mode = BMP280_SLEEPMODE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 80016e6:	78fb      	ldrb	r3, [r7, #3]
 80016e8:	2b05      	cmp	r3, #5
 80016ea:	d901      	bls.n	80016f0 <BMP280_Init+0x44>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 80016ec:	2305      	movs	r3, #5
 80016ee:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 80016f0:	4a3f      	ldr	r2, [pc, #252]	; (80017f0 <BMP280_Init+0x144>)
 80016f2:	78fb      	ldrb	r3, [r7, #3]
 80016f4:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 80016f6:	78bb      	ldrb	r3, [r7, #2]
 80016f8:	2b05      	cmp	r3, #5
 80016fa:	d901      	bls.n	8001700 <BMP280_Init+0x54>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 80016fc:	2305      	movs	r3, #5
 80016fe:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 8001700:	4a3c      	ldr	r2, [pc, #240]	; (80017f4 <BMP280_Init+0x148>)
 8001702:	78bb      	ldrb	r3, [r7, #2]
 8001704:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 8001706:	bf00      	nop
 8001708:	20d0      	movs	r0, #208	; 0xd0
 800170a:	f7ff ff37 	bl	800157c <BMP280_Read8>
 800170e:	4603      	mov	r3, r0
 8001710:	2b58      	cmp	r3, #88	; 0x58
 8001712:	d1f9      	bne.n	8001708 <BMP280_Init+0x5c>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 8001714:	2088      	movs	r0, #136	; 0x88
 8001716:	f7ff ff71 	bl	80015fc <BMP280_Read16LE>
 800171a:	4603      	mov	r3, r0
 800171c:	461a      	mov	r2, r3
 800171e:	4b36      	ldr	r3, [pc, #216]	; (80017f8 <BMP280_Init+0x14c>)
 8001720:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 8001722:	208a      	movs	r0, #138	; 0x8a
 8001724:	f7ff ff6a 	bl	80015fc <BMP280_Read16LE>
 8001728:	4603      	mov	r3, r0
 800172a:	b21a      	sxth	r2, r3
 800172c:	4b33      	ldr	r3, [pc, #204]	; (80017fc <BMP280_Init+0x150>)
 800172e:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 8001730:	208c      	movs	r0, #140	; 0x8c
 8001732:	f7ff ff63 	bl	80015fc <BMP280_Read16LE>
 8001736:	4603      	mov	r3, r0
 8001738:	b21a      	sxth	r2, r3
 800173a:	4b31      	ldr	r3, [pc, #196]	; (8001800 <BMP280_Init+0x154>)
 800173c:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 800173e:	208e      	movs	r0, #142	; 0x8e
 8001740:	f7ff ff5c 	bl	80015fc <BMP280_Read16LE>
 8001744:	4603      	mov	r3, r0
 8001746:	461a      	mov	r2, r3
 8001748:	4b2e      	ldr	r3, [pc, #184]	; (8001804 <BMP280_Init+0x158>)
 800174a:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 800174c:	2090      	movs	r0, #144	; 0x90
 800174e:	f7ff ff55 	bl	80015fc <BMP280_Read16LE>
 8001752:	4603      	mov	r3, r0
 8001754:	b21a      	sxth	r2, r3
 8001756:	4b2c      	ldr	r3, [pc, #176]	; (8001808 <BMP280_Init+0x15c>)
 8001758:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 800175a:	2092      	movs	r0, #146	; 0x92
 800175c:	f7ff ff4e 	bl	80015fc <BMP280_Read16LE>
 8001760:	4603      	mov	r3, r0
 8001762:	b21a      	sxth	r2, r3
 8001764:	4b29      	ldr	r3, [pc, #164]	; (800180c <BMP280_Init+0x160>)
 8001766:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 8001768:	2094      	movs	r0, #148	; 0x94
 800176a:	f7ff ff47 	bl	80015fc <BMP280_Read16LE>
 800176e:	4603      	mov	r3, r0
 8001770:	b21a      	sxth	r2, r3
 8001772:	4b27      	ldr	r3, [pc, #156]	; (8001810 <BMP280_Init+0x164>)
 8001774:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 8001776:	2096      	movs	r0, #150	; 0x96
 8001778:	f7ff ff40 	bl	80015fc <BMP280_Read16LE>
 800177c:	4603      	mov	r3, r0
 800177e:	b21a      	sxth	r2, r3
 8001780:	4b24      	ldr	r3, [pc, #144]	; (8001814 <BMP280_Init+0x168>)
 8001782:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 8001784:	2098      	movs	r0, #152	; 0x98
 8001786:	f7ff ff39 	bl	80015fc <BMP280_Read16LE>
 800178a:	4603      	mov	r3, r0
 800178c:	b21a      	sxth	r2, r3
 800178e:	4b22      	ldr	r3, [pc, #136]	; (8001818 <BMP280_Init+0x16c>)
 8001790:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 8001792:	209a      	movs	r0, #154	; 0x9a
 8001794:	f7ff ff32 	bl	80015fc <BMP280_Read16LE>
 8001798:	4603      	mov	r3, r0
 800179a:	b21a      	sxth	r2, r3
 800179c:	4b1f      	ldr	r3, [pc, #124]	; (800181c <BMP280_Init+0x170>)
 800179e:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 80017a0:	209c      	movs	r0, #156	; 0x9c
 80017a2:	f7ff ff2b 	bl	80015fc <BMP280_Read16LE>
 80017a6:	4603      	mov	r3, r0
 80017a8:	b21a      	sxth	r2, r3
 80017aa:	4b1d      	ldr	r3, [pc, #116]	; (8001820 <BMP280_Init+0x174>)
 80017ac:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 80017ae:	209e      	movs	r0, #158	; 0x9e
 80017b0:	f7ff ff24 	bl	80015fc <BMP280_Read16LE>
 80017b4:	4603      	mov	r3, r0
 80017b6:	b21a      	sxth	r2, r3
 80017b8:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <BMP280_Init+0x178>)
 80017ba:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 80017bc:	78fb      	ldrb	r3, [r7, #3]
 80017be:	015b      	lsls	r3, r3, #5
 80017c0:	b25a      	sxtb	r2, r3
 80017c2:	78bb      	ldrb	r3, [r7, #2]
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	b25b      	sxtb	r3, r3
 80017c8:	4313      	orrs	r3, r2
 80017ca:	b25a      	sxtb	r2, r3
 80017cc:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	b25b      	sxtb	r3, r3
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	4619      	mov	r1, r3
 80017d8:	20f4      	movs	r0, #244	; 0xf4
 80017da:	f7ff ff29 	bl	8001630 <BMP280_Write8>
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	200000d0 	.word	0x200000d0
 80017ec:	200000d4 	.word	0x200000d4
 80017f0:	200000cc 	.word	0x200000cc
 80017f4:	200000be 	.word	0x200000be
 80017f8:	200000ca 	.word	0x200000ca
 80017fc:	200000c0 	.word	0x200000c0
 8001800:	200000b8 	.word	0x200000b8
 8001804:	200000c4 	.word	0x200000c4
 8001808:	200000ba 	.word	0x200000ba
 800180c:	200000d6 	.word	0x200000d6
 8001810:	200000da 	.word	0x200000da
 8001814:	200000c2 	.word	0x200000c2
 8001818:	200000c8 	.word	0x200000c8
 800181c:	200000bc 	.word	0x200000bc
 8001820:	200000c6 	.word	0x200000c6
 8001824:	200000d8 	.word	0x200000d8

08001828 <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 800182e:	4b3d      	ldr	r3, [pc, #244]	; (8001924 <BMP280_ReadTemperature+0xfc>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d16d      	bne.n	8001912 <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 8001836:	20f4      	movs	r0, #244	; 0xf4
 8001838:	f7ff fea0 	bl	800157c <BMP280_Read8>
 800183c:	4603      	mov	r3, r0
 800183e:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 8001840:	7dfb      	ldrb	r3, [r7, #23]
 8001842:	f023 0303 	bic.w	r3, r3, #3
 8001846:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 8001848:	7dfb      	ldrb	r3, [r7, #23]
 800184a:	f043 0301 	orr.w	r3, r3, #1
 800184e:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 8001850:	7dfb      	ldrb	r3, [r7, #23]
 8001852:	4619      	mov	r1, r3
 8001854:	20f4      	movs	r0, #244	; 0xf4
 8001856:	f7ff feeb 	bl	8001630 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 800185a:	20f4      	movs	r0, #244	; 0xf4
 800185c:	f7ff fe8e 	bl	800157c <BMP280_Read8>
 8001860:	4603      	mov	r3, r0
 8001862:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 8001864:	7dbb      	ldrb	r3, [r7, #22]
 8001866:	f003 0303 	and.w	r3, r3, #3
 800186a:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 800186c:	7dbb      	ldrb	r3, [r7, #22]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d14f      	bne.n	8001912 <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 8001872:	20f4      	movs	r0, #244	; 0xf4
 8001874:	f7ff fe82 	bl	800157c <BMP280_Read8>
 8001878:	4603      	mov	r3, r0
 800187a:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 800187c:	7dbb      	ldrb	r3, [r7, #22]
 800187e:	f003 0303 	and.w	r3, r3, #3
 8001882:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 8001884:	7dbb      	ldrb	r3, [r7, #22]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d000      	beq.n	800188c <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 800188a:	e7f2      	b.n	8001872 <BMP280_ReadTemperature+0x4a>
				  break;
 800188c:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 800188e:	20fa      	movs	r0, #250	; 0xfa
 8001890:	f7ff feea 	bl	8001668 <BMP280_Read24>
 8001894:	4603      	mov	r3, r0
 8001896:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	111b      	asrs	r3, r3, #4
 800189c:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	10da      	asrs	r2, r3, #3
 80018a2:	4b21      	ldr	r3, [pc, #132]	; (8001928 <BMP280_ReadTemperature+0x100>)
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 80018aa:	4a20      	ldr	r2, [pc, #128]	; (800192c <BMP280_ReadTemperature+0x104>)
 80018ac:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80018b0:	fb02 f303 	mul.w	r3, r2, r3
 80018b4:	12db      	asrs	r3, r3, #11
 80018b6:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	111b      	asrs	r3, r3, #4
 80018bc:	4a1a      	ldr	r2, [pc, #104]	; (8001928 <BMP280_ReadTemperature+0x100>)
 80018be:	8812      	ldrh	r2, [r2, #0]
 80018c0:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	1112      	asrs	r2, r2, #4
 80018c6:	4918      	ldr	r1, [pc, #96]	; (8001928 <BMP280_ReadTemperature+0x100>)
 80018c8:	8809      	ldrh	r1, [r1, #0]
 80018ca:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80018cc:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80018d0:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 80018d2:	4a17      	ldr	r2, [pc, #92]	; (8001930 <BMP280_ReadTemperature+0x108>)
 80018d4:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80018d8:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80018dc:	139b      	asrs	r3, r3, #14
 80018de:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	4413      	add	r3, r2
 80018e6:	4a13      	ldr	r2, [pc, #76]	; (8001934 <BMP280_ReadTemperature+0x10c>)
 80018e8:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 80018ea:	4b12      	ldr	r3, [pc, #72]	; (8001934 <BMP280_ReadTemperature+0x10c>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	4613      	mov	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4413      	add	r3, r2
 80018f4:	3380      	adds	r3, #128	; 0x80
 80018f6:	121b      	asrs	r3, r3, #8
 80018f8:	ee07 3a90 	vmov	s15, r3
 80018fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001900:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 8001904:	edd7 7a01 	vldr	s15, [r7, #4]
 8001908:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001938 <BMP280_ReadTemperature+0x110>
 800190c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001910:	e001      	b.n	8001916 <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 8001912:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800193c <BMP280_ReadTemperature+0x114>
 8001916:	eef0 7a47 	vmov.f32	s15, s14
}
 800191a:	eeb0 0a67 	vmov.f32	s0, s15
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	200000d4 	.word	0x200000d4
 8001928:	200000ca 	.word	0x200000ca
 800192c:	200000c0 	.word	0x200000c0
 8001930:	200000b8 	.word	0x200000b8
 8001934:	200000dc 	.word	0x200000dc
 8001938:	42c80000 	.word	0x42c80000
 800193c:	c2c60000 	.word	0xc2c60000

08001940 <BMP280_ReadPressure>:
	  return p;
}
#endif
#ifdef BMP280
int32_t BMP280_ReadPressure(void)
{
 8001940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001944:	b09a      	sub	sp, #104	; 0x68
 8001946:	af00      	add	r7, sp, #0
	  int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  BMP280_ReadTemperature();
 8001948:	f7ff ff6e 	bl	8001828 <BMP280_ReadTemperature>

	  int32_t adc_P = BMP280_Read24(BMP280_PRESSUREDATA);
 800194c:	20f7      	movs	r0, #247	; 0xf7
 800194e:	f7ff fe8b 	bl	8001668 <BMP280_Read24>
 8001952:	4603      	mov	r3, r0
 8001954:	667b      	str	r3, [r7, #100]	; 0x64
	  adc_P >>= 4;
 8001956:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001958:	111b      	asrs	r3, r3, #4
 800195a:	667b      	str	r3, [r7, #100]	; 0x64

	  var1 = ((int64_t)t_fine) - 128000;
 800195c:	4b6b      	ldr	r3, [pc, #428]	; (8001b0c <BMP280_ReadPressure+0x1cc>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	461a      	mov	r2, r3
 8001962:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001966:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 800196a:	f143 35ff 	adc.w	r5, r3, #4294967295
 800196e:	e9c7 4516 	strd	r4, r5, [r7, #88]	; 0x58
	  var2 = var1 * var1 * (int64_t)p6;
 8001972:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001974:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001976:	fb03 f102 	mul.w	r1, r3, r2
 800197a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800197c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800197e:	fb03 f302 	mul.w	r3, r3, r2
 8001982:	18ca      	adds	r2, r1, r3
 8001984:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001986:	fba3 4503 	umull	r4, r5, r3, r3
 800198a:	1953      	adds	r3, r2, r5
 800198c:	461d      	mov	r5, r3
 800198e:	4b60      	ldr	r3, [pc, #384]	; (8001b10 <BMP280_ReadPressure+0x1d0>)
 8001990:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001994:	b21a      	sxth	r2, r3
 8001996:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800199a:	fb02 f005 	mul.w	r0, r2, r5
 800199e:	fb04 f103 	mul.w	r1, r4, r3
 80019a2:	4401      	add	r1, r0
 80019a4:	fba4 2302 	umull	r2, r3, r4, r2
 80019a8:	4419      	add	r1, r3
 80019aa:	460b      	mov	r3, r1
 80019ac:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 80019b0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	  var2 = var2 + ((var1*(int64_t)p5)<<17);
 80019b4:	4b57      	ldr	r3, [pc, #348]	; (8001b14 <BMP280_ReadPressure+0x1d4>)
 80019b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ba:	b21a      	sxth	r2, r3
 80019bc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80019c0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80019c2:	fb03 f001 	mul.w	r0, r3, r1
 80019c6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80019c8:	fb02 f101 	mul.w	r1, r2, r1
 80019cc:	4408      	add	r0, r1
 80019ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80019d0:	fba1 2302 	umull	r2, r3, r1, r2
 80019d4:	18c1      	adds	r1, r0, r3
 80019d6:	460b      	mov	r3, r1
 80019d8:	f04f 0000 	mov.w	r0, #0
 80019dc:	f04f 0100 	mov.w	r1, #0
 80019e0:	0459      	lsls	r1, r3, #17
 80019e2:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 80019e6:	0450      	lsls	r0, r2, #17
 80019e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80019ec:	eb12 0800 	adds.w	r8, r2, r0
 80019f0:	eb43 0901 	adc.w	r9, r3, r1
 80019f4:	e9c7 8914 	strd	r8, r9, [r7, #80]	; 0x50
	  var2 = var2 + (((int64_t)p4)<<35);
 80019f8:	4b47      	ldr	r3, [pc, #284]	; (8001b18 <BMP280_ReadPressure+0x1d8>)
 80019fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019fe:	b21a      	sxth	r2, r3
 8001a00:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001a04:	f04f 0000 	mov.w	r0, #0
 8001a08:	f04f 0100 	mov.w	r1, #0
 8001a0c:	00d1      	lsls	r1, r2, #3
 8001a0e:	2000      	movs	r0, #0
 8001a10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001a14:	1814      	adds	r4, r2, r0
 8001a16:	61bc      	str	r4, [r7, #24]
 8001a18:	414b      	adcs	r3, r1
 8001a1a:	61fb      	str	r3, [r7, #28]
 8001a1c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001a20:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8001a24:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001a26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a28:	fb03 f102 	mul.w	r1, r3, r2
 8001a2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001a2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a30:	fb03 f302 	mul.w	r3, r3, r2
 8001a34:	18ca      	adds	r2, r1, r3
 8001a36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a38:	fba3 4503 	umull	r4, r5, r3, r3
 8001a3c:	1953      	adds	r3, r2, r5
 8001a3e:	461d      	mov	r5, r3
 8001a40:	4b36      	ldr	r3, [pc, #216]	; (8001b1c <BMP280_ReadPressure+0x1dc>)
 8001a42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a46:	b21a      	sxth	r2, r3
 8001a48:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001a4c:	fb02 f005 	mul.w	r0, r2, r5
 8001a50:	fb04 f103 	mul.w	r1, r4, r3
 8001a54:	4401      	add	r1, r0
 8001a56:	fba4 2302 	umull	r2, r3, r4, r2
 8001a5a:	4419      	add	r1, r3
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	f04f 0800 	mov.w	r8, #0
 8001a62:	f04f 0900 	mov.w	r9, #0
 8001a66:	ea4f 2812 	mov.w	r8, r2, lsr #8
 8001a6a:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 8001a6e:	ea4f 2923 	mov.w	r9, r3, asr #8
	    ((var1 * (int64_t)p2)<<12);
 8001a72:	4b2b      	ldr	r3, [pc, #172]	; (8001b20 <BMP280_ReadPressure+0x1e0>)
 8001a74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a78:	b21a      	sxth	r2, r3
 8001a7a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001a7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001a80:	fb03 f001 	mul.w	r0, r3, r1
 8001a84:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001a86:	fb02 f101 	mul.w	r1, r2, r1
 8001a8a:	1844      	adds	r4, r0, r1
 8001a8c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001a8e:	fba1 0102 	umull	r0, r1, r1, r2
 8001a92:	1863      	adds	r3, r4, r1
 8001a94:	4619      	mov	r1, r3
 8001a96:	f04f 0200 	mov.w	r2, #0
 8001a9a:	f04f 0300 	mov.w	r3, #0
 8001a9e:	030b      	lsls	r3, r1, #12
 8001aa0:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 8001aa4:	0302      	lsls	r2, r0, #12
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8001aa6:	eb18 0102 	adds.w	r1, r8, r2
 8001aaa:	6139      	str	r1, [r7, #16]
 8001aac:	eb49 0303 	adc.w	r3, r9, r3
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001ab6:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 8001aba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001abe:	1c11      	adds	r1, r2, #0
 8001ac0:	6439      	str	r1, [r7, #64]	; 0x40
 8001ac2:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 8001ac6:	647b      	str	r3, [r7, #68]	; 0x44
 8001ac8:	4b16      	ldr	r3, [pc, #88]	; (8001b24 <BMP280_ReadPressure+0x1e4>)
 8001aca:	881b      	ldrh	r3, [r3, #0]
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	f04f 0300 	mov.w	r3, #0
 8001ad2:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8001ad6:	4629      	mov	r1, r5
 8001ad8:	fb02 f001 	mul.w	r0, r2, r1
 8001adc:	4621      	mov	r1, r4
 8001ade:	fb01 f103 	mul.w	r1, r1, r3
 8001ae2:	4401      	add	r1, r0
 8001ae4:	4620      	mov	r0, r4
 8001ae6:	fba0 2302 	umull	r2, r3, r0, r2
 8001aea:	4419      	add	r1, r3
 8001aec:	460b      	mov	r3, r1
 8001aee:	f04f 0000 	mov.w	r0, #0
 8001af2:	f04f 0100 	mov.w	r1, #0
 8001af6:	1058      	asrs	r0, r3, #1
 8001af8:	17d9      	asrs	r1, r3, #31
 8001afa:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58

	  if (var1 == 0) {
 8001afe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001b02:	4313      	orrs	r3, r2
 8001b04:	d110      	bne.n	8001b28 <BMP280_ReadPressure+0x1e8>
	    return 0;  // avoid exception caused by division by zero
 8001b06:	2300      	movs	r3, #0
 8001b08:	e0f4      	b.n	8001cf4 <BMP280_ReadPressure+0x3b4>
 8001b0a:	bf00      	nop
 8001b0c:	200000dc 	.word	0x200000dc
 8001b10:	200000c8 	.word	0x200000c8
 8001b14:	200000c2 	.word	0x200000c2
 8001b18:	200000da 	.word	0x200000da
 8001b1c:	200000d6 	.word	0x200000d6
 8001b20:	200000ba 	.word	0x200000ba
 8001b24:	200000c4 	.word	0x200000c4
	  }
	  p = 1048576 - adc_P;
 8001b28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b2a:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001b2e:	461a      	mov	r2, r3
 8001b30:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001b34:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	  p = (((p<<31) - var2)*3125) / var1;
 8001b38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b3a:	105b      	asrs	r3, r3, #1
 8001b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b40:	07db      	lsls	r3, r3, #31
 8001b42:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001b48:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8001b4c:	4621      	mov	r1, r4
 8001b4e:	ebb1 0a02 	subs.w	sl, r1, r2
 8001b52:	4629      	mov	r1, r5
 8001b54:	eb61 0b03 	sbc.w	fp, r1, r3
 8001b58:	4652      	mov	r2, sl
 8001b5a:	465b      	mov	r3, fp
 8001b5c:	1891      	adds	r1, r2, r2
 8001b5e:	60b9      	str	r1, [r7, #8]
 8001b60:	415b      	adcs	r3, r3
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b68:	eb12 020a 	adds.w	r2, r2, sl
 8001b6c:	eb43 030b 	adc.w	r3, r3, fp
 8001b70:	f04f 0000 	mov.w	r0, #0
 8001b74:	f04f 0100 	mov.w	r1, #0
 8001b78:	0199      	lsls	r1, r3, #6
 8001b7a:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8001b7e:	0190      	lsls	r0, r2, #6
 8001b80:	1812      	adds	r2, r2, r0
 8001b82:	eb41 0303 	adc.w	r3, r1, r3
 8001b86:	f04f 0000 	mov.w	r0, #0
 8001b8a:	f04f 0100 	mov.w	r1, #0
 8001b8e:	0099      	lsls	r1, r3, #2
 8001b90:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001b94:	0090      	lsls	r0, r2, #2
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	eb12 020a 	adds.w	r2, r2, sl
 8001b9e:	eb43 030b 	adc.w	r3, r3, fp
 8001ba2:	f04f 0000 	mov.w	r0, #0
 8001ba6:	f04f 0100 	mov.w	r1, #0
 8001baa:	0099      	lsls	r1, r3, #2
 8001bac:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001bb0:	0090      	lsls	r0, r2, #2
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	eb12 010a 	adds.w	r1, r2, sl
 8001bba:	6339      	str	r1, [r7, #48]	; 0x30
 8001bbc:	eb43 030b 	adc.w	r3, r3, fp
 8001bc0:	637b      	str	r3, [r7, #52]	; 0x34
 8001bc2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001bc6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001bca:	f7fe ff3f 	bl	8000a4c <__aeabi_ldivmod>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	  var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 8001bd6:	4b4a      	ldr	r3, [pc, #296]	; (8001d00 <BMP280_ReadPressure+0x3c0>)
 8001bd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bdc:	b218      	sxth	r0, r3
 8001bde:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001be2:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001be6:	f04f 0200 	mov.w	r2, #0
 8001bea:	f04f 0300 	mov.w	r3, #0
 8001bee:	0b62      	lsrs	r2, r4, #13
 8001bf0:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8001bf4:	136b      	asrs	r3, r5, #13
 8001bf6:	fb02 f501 	mul.w	r5, r2, r1
 8001bfa:	fb00 f403 	mul.w	r4, r0, r3
 8001bfe:	442c      	add	r4, r5
 8001c00:	fba0 0102 	umull	r0, r1, r0, r2
 8001c04:	1863      	adds	r3, r4, r1
 8001c06:	4619      	mov	r1, r3
 8001c08:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001c0c:	f04f 0200 	mov.w	r2, #0
 8001c10:	f04f 0300 	mov.w	r3, #0
 8001c14:	0b62      	lsrs	r2, r4, #13
 8001c16:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8001c1a:	136b      	asrs	r3, r5, #13
 8001c1c:	fb02 f501 	mul.w	r5, r2, r1
 8001c20:	fb00 f403 	mul.w	r4, r0, r3
 8001c24:	442c      	add	r4, r5
 8001c26:	fba0 0102 	umull	r0, r1, r0, r2
 8001c2a:	1863      	adds	r3, r4, r1
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	f04f 0300 	mov.w	r3, #0
 8001c36:	0e42      	lsrs	r2, r0, #25
 8001c38:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001c3c:	164b      	asrs	r3, r1, #25
 8001c3e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	  var2 = (((int64_t)p8) * p) >> 19;
 8001c42:	4b30      	ldr	r3, [pc, #192]	; (8001d04 <BMP280_ReadPressure+0x3c4>)
 8001c44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c48:	b21a      	sxth	r2, r3
 8001c4a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001c4e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001c50:	fb03 f001 	mul.w	r0, r3, r1
 8001c54:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001c56:	fb02 f101 	mul.w	r1, r2, r1
 8001c5a:	1844      	adds	r4, r0, r1
 8001c5c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001c5e:	fba1 0102 	umull	r0, r1, r1, r2
 8001c62:	1863      	adds	r3, r4, r1
 8001c64:	4619      	mov	r1, r3
 8001c66:	f04f 0200 	mov.w	r2, #0
 8001c6a:	f04f 0300 	mov.w	r3, #0
 8001c6e:	0cc2      	lsrs	r2, r0, #19
 8001c70:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001c74:	14cb      	asrs	r3, r1, #19
 8001c76:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	  p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 8001c7a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001c7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001c82:	1884      	adds	r4, r0, r2
 8001c84:	62bc      	str	r4, [r7, #40]	; 0x28
 8001c86:	eb41 0303 	adc.w	r3, r1, r3
 8001c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c8c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001c90:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001c94:	4621      	mov	r1, r4
 8001c96:	1889      	adds	r1, r1, r2
 8001c98:	6239      	str	r1, [r7, #32]
 8001c9a:	4629      	mov	r1, r5
 8001c9c:	eb43 0101 	adc.w	r1, r3, r1
 8001ca0:	6279      	str	r1, [r7, #36]	; 0x24
 8001ca2:	f04f 0000 	mov.w	r0, #0
 8001ca6:	f04f 0100 	mov.w	r1, #0
 8001caa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001cae:	4623      	mov	r3, r4
 8001cb0:	0a18      	lsrs	r0, r3, #8
 8001cb2:	462b      	mov	r3, r5
 8001cb4:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001cb8:	462b      	mov	r3, r5
 8001cba:	1219      	asrs	r1, r3, #8
 8001cbc:	4b12      	ldr	r3, [pc, #72]	; (8001d08 <BMP280_ReadPressure+0x3c8>)
 8001cbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cc2:	b21c      	sxth	r4, r3
 8001cc4:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8001cc8:	f04f 0200 	mov.w	r2, #0
 8001ccc:	f04f 0300 	mov.w	r3, #0
 8001cd0:	012b      	lsls	r3, r5, #4
 8001cd2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001cd6:	0122      	lsls	r2, r4, #4
 8001cd8:	1884      	adds	r4, r0, r2
 8001cda:	603c      	str	r4, [r7, #0]
 8001cdc:	eb41 0303 	adc.w	r3, r1, r3
 8001ce0:	607b      	str	r3, [r7, #4]
 8001ce2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001ce6:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	  return (int32_t)p/256;
 8001cea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	da00      	bge.n	8001cf2 <BMP280_ReadPressure+0x3b2>
 8001cf0:	33ff      	adds	r3, #255	; 0xff
 8001cf2:	121b      	asrs	r3, r3, #8
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3768      	adds	r7, #104	; 0x68
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cfe:	bf00      	nop
 8001d00:	200000d8 	.word	0x200000d8
 8001d04:	200000c6 	.word	0x200000c6
 8001d08:	200000bc 	.word	0x200000bc

08001d0c <DWT_Delay_Init>:
#include "dwt_stm32_delay.h"

uint32_t DWT_Delay_Init(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001d10:	4b14      	ldr	r3, [pc, #80]	; (8001d64 <DWT_Delay_Init+0x58>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	4a13      	ldr	r2, [pc, #76]	; (8001d64 <DWT_Delay_Init+0x58>)
 8001d16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d1a:	60d3      	str	r3, [r2, #12]

	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001d1c:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <DWT_Delay_Init+0x58>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	4a10      	ldr	r2, [pc, #64]	; (8001d64 <DWT_Delay_Init+0x58>)
 8001d22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d26:	60d3      	str	r3, [r2, #12]

	DWT->CTRL &= !DWT_CTRL_CYCCNTENA_Msk;
 8001d28:	4b0f      	ldr	r3, [pc, #60]	; (8001d68 <DWT_Delay_Init+0x5c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4b0e      	ldr	r3, [pc, #56]	; (8001d68 <DWT_Delay_Init+0x5c>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
	DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk;
 8001d32:	4b0d      	ldr	r3, [pc, #52]	; (8001d68 <DWT_Delay_Init+0x5c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a0c      	ldr	r2, [pc, #48]	; (8001d68 <DWT_Delay_Init+0x5c>)
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	6013      	str	r3, [r2, #0]
	DWT-> CYCCNT = 0;
 8001d3e:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <DWT_Delay_Init+0x5c>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	605a      	str	r2, [r3, #4]

	__asm__ ("NOP");
 8001d44:	bf00      	nop
	__asm__ ("NOP");
 8001d46:	bf00      	nop
	__asm__ ("NOP");
 8001d48:	bf00      	nop

	if(DWT->CYCCNT)
 8001d4a:	4b07      	ldr	r3, [pc, #28]	; (8001d68 <DWT_Delay_Init+0x5c>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <DWT_Delay_Init+0x4a>
	{
		return 0;
 8001d52:	2300      	movs	r3, #0
 8001d54:	e000      	b.n	8001d58 <DWT_Delay_Init+0x4c>
	}
	else {
		return 1;
 8001d56:	2301      	movs	r3, #1
	}
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	e000edf0 	.word	0xe000edf0
 8001d68:	e0001000 	.word	0xe0001000

08001d6c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08c      	sub	sp, #48	; 0x30
 8001d70:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d72:	f107 031c 	add.w	r3, r7, #28
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	605a      	str	r2, [r3, #4]
 8001d7c:	609a      	str	r2, [r3, #8]
 8001d7e:	60da      	str	r2, [r3, #12]
 8001d80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d82:	4b64      	ldr	r3, [pc, #400]	; (8001f14 <MX_GPIO_Init+0x1a8>)
 8001d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d86:	4a63      	ldr	r2, [pc, #396]	; (8001f14 <MX_GPIO_Init+0x1a8>)
 8001d88:	f043 0310 	orr.w	r3, r3, #16
 8001d8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d8e:	4b61      	ldr	r3, [pc, #388]	; (8001f14 <MX_GPIO_Init+0x1a8>)
 8001d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d92:	f003 0310 	and.w	r3, r3, #16
 8001d96:	61bb      	str	r3, [r7, #24]
 8001d98:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d9a:	4b5e      	ldr	r3, [pc, #376]	; (8001f14 <MX_GPIO_Init+0x1a8>)
 8001d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9e:	4a5d      	ldr	r2, [pc, #372]	; (8001f14 <MX_GPIO_Init+0x1a8>)
 8001da0:	f043 0304 	orr.w	r3, r3, #4
 8001da4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001da6:	4b5b      	ldr	r3, [pc, #364]	; (8001f14 <MX_GPIO_Init+0x1a8>)
 8001da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001daa:	f003 0304 	and.w	r3, r3, #4
 8001dae:	617b      	str	r3, [r7, #20]
 8001db0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001db2:	4b58      	ldr	r3, [pc, #352]	; (8001f14 <MX_GPIO_Init+0x1a8>)
 8001db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db6:	4a57      	ldr	r2, [pc, #348]	; (8001f14 <MX_GPIO_Init+0x1a8>)
 8001db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dbe:	4b55      	ldr	r3, [pc, #340]	; (8001f14 <MX_GPIO_Init+0x1a8>)
 8001dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dca:	4b52      	ldr	r3, [pc, #328]	; (8001f14 <MX_GPIO_Init+0x1a8>)
 8001dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dce:	4a51      	ldr	r2, [pc, #324]	; (8001f14 <MX_GPIO_Init+0x1a8>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dd6:	4b4f      	ldr	r3, [pc, #316]	; (8001f14 <MX_GPIO_Init+0x1a8>)
 8001dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de2:	4b4c      	ldr	r3, [pc, #304]	; (8001f14 <MX_GPIO_Init+0x1a8>)
 8001de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de6:	4a4b      	ldr	r2, [pc, #300]	; (8001f14 <MX_GPIO_Init+0x1a8>)
 8001de8:	f043 0302 	orr.w	r3, r3, #2
 8001dec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dee:	4b49      	ldr	r3, [pc, #292]	; (8001f14 <MX_GPIO_Init+0x1a8>)
 8001df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dfa:	4b46      	ldr	r3, [pc, #280]	; (8001f14 <MX_GPIO_Init+0x1a8>)
 8001dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfe:	4a45      	ldr	r2, [pc, #276]	; (8001f14 <MX_GPIO_Init+0x1a8>)
 8001e00:	f043 0308 	orr.w	r3, r3, #8
 8001e04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e06:	4b43      	ldr	r3, [pc, #268]	; (8001f14 <MX_GPIO_Init+0x1a8>)
 8001e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0a:	f003 0308 	and.w	r3, r3, #8
 8001e0e:	607b      	str	r3, [r7, #4]
 8001e10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, NRF_CE_Pin|NRF_CSN_Pin, GPIO_PIN_RESET);
 8001e12:	2200      	movs	r2, #0
 8001e14:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8001e18:	483f      	ldr	r0, [pc, #252]	; (8001f18 <MX_GPIO_Init+0x1ac>)
 8001e1a:	f000 ff9b 	bl	8002d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001e1e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001e22:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e24:	2303      	movs	r3, #3
 8001e26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e2c:	f107 031c 	add.w	r3, r7, #28
 8001e30:	4619      	mov	r1, r3
 8001e32:	4839      	ldr	r0, [pc, #228]	; (8001f18 <MX_GPIO_Init+0x1ac>)
 8001e34:	f000 fdcc 	bl	80029d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8001e38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e3c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e46:	f107 031c 	add.w	r3, r7, #28
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4833      	ldr	r0, [pc, #204]	; (8001f1c <MX_GPIO_Init+0x1b0>)
 8001e4e:	f000 fdbf 	bl	80029d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e52:	2303      	movs	r3, #3
 8001e54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e56:	2303      	movs	r3, #3
 8001e58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001e5e:	f107 031c 	add.w	r3, r7, #28
 8001e62:	4619      	mov	r1, r3
 8001e64:	482e      	ldr	r0, [pc, #184]	; (8001f20 <MX_GPIO_Init+0x1b4>)
 8001e66:	f000 fdb3 	bl	80029d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 PA5 PA6
                           PA7 PA8 PA9 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8001e6a:	f649 73f4 	movw	r3, #40948	; 0x9ff4
 8001e6e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e70:	2303      	movs	r3, #3
 8001e72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e78:	f107 031c 	add.w	r3, r7, #28
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e82:	f000 fda5 	bl	80029d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FC37_Pin_Pin;
 8001e86:	2308      	movs	r3, #8
 8001e88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(FC37_Pin_GPIO_Port, &GPIO_InitStruct);
 8001e92:	f107 031c 	add.w	r3, r7, #28
 8001e96:	4619      	mov	r1, r3
 8001e98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e9c:	f000 fd98 	bl	80029d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001ea0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8001ea4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eae:	f107 031c 	add.w	r3, r7, #28
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	481b      	ldr	r0, [pc, #108]	; (8001f24 <MX_GPIO_Init+0x1b8>)
 8001eb6:	f000 fd8b 	bl	80029d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = NRF_CE_Pin|NRF_CSN_Pin;
 8001eba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001ebe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ecc:	f107 031c 	add.w	r3, r7, #28
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4811      	ldr	r0, [pc, #68]	; (8001f18 <MX_GPIO_Init+0x1ac>)
 8001ed4:	f000 fd7c 	bl	80029d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD1 PD2 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001ed8:	f64f 739e 	movw	r3, #65438	; 0xff9e
 8001edc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ee6:	f107 031c 	add.w	r3, r7, #28
 8001eea:	4619      	mov	r1, r3
 8001eec:	480e      	ldr	r0, [pc, #56]	; (8001f28 <MX_GPIO_Init+0x1bc>)
 8001eee:	f000 fd6f 	bl	80029d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DHT11_Pin_Pin;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efa:	2300      	movs	r3, #0
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DHT11_Pin_GPIO_Port, &GPIO_InitStruct);
 8001efe:	f107 031c 	add.w	r3, r7, #28
 8001f02:	4619      	mov	r1, r3
 8001f04:	4808      	ldr	r0, [pc, #32]	; (8001f28 <MX_GPIO_Init+0x1bc>)
 8001f06:	f000 fd63 	bl	80029d0 <HAL_GPIO_Init>

}
 8001f0a:	bf00      	nop
 8001f0c:	3730      	adds	r7, #48	; 0x30
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40021000 	.word	0x40021000
 8001f18:	48001000 	.word	0x48001000
 8001f1c:	48000800 	.word	0x48000800
 8001f20:	48001c00 	.word	0x48001c00
 8001f24:	48000400 	.word	0x48000400
 8001f28:	48000c00 	.word	0x48000c00

08001f2c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f30:	4b1b      	ldr	r3, [pc, #108]	; (8001fa0 <MX_I2C1_Init+0x74>)
 8001f32:	4a1c      	ldr	r2, [pc, #112]	; (8001fa4 <MX_I2C1_Init+0x78>)
 8001f34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8001f36:	4b1a      	ldr	r3, [pc, #104]	; (8001fa0 <MX_I2C1_Init+0x74>)
 8001f38:	f240 220b 	movw	r2, #523	; 0x20b
 8001f3c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001f3e:	4b18      	ldr	r3, [pc, #96]	; (8001fa0 <MX_I2C1_Init+0x74>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f44:	4b16      	ldr	r3, [pc, #88]	; (8001fa0 <MX_I2C1_Init+0x74>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f4a:	4b15      	ldr	r3, [pc, #84]	; (8001fa0 <MX_I2C1_Init+0x74>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001f50:	4b13      	ldr	r3, [pc, #76]	; (8001fa0 <MX_I2C1_Init+0x74>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f56:	4b12      	ldr	r3, [pc, #72]	; (8001fa0 <MX_I2C1_Init+0x74>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f5c:	4b10      	ldr	r3, [pc, #64]	; (8001fa0 <MX_I2C1_Init+0x74>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f62:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <MX_I2C1_Init+0x74>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f68:	480d      	ldr	r0, [pc, #52]	; (8001fa0 <MX_I2C1_Init+0x74>)
 8001f6a:	f000 ff0b 	bl	8002d84 <HAL_I2C_Init>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f74:	f000 f968 	bl	8002248 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f78:	2100      	movs	r1, #0
 8001f7a:	4809      	ldr	r0, [pc, #36]	; (8001fa0 <MX_I2C1_Init+0x74>)
 8001f7c:	f001 fe32 	bl	8003be4 <HAL_I2CEx_ConfigAnalogFilter>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001f86:	f000 f95f 	bl	8002248 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	4804      	ldr	r0, [pc, #16]	; (8001fa0 <MX_I2C1_Init+0x74>)
 8001f8e:	f001 fe74 	bl	8003c7a <HAL_I2CEx_ConfigDigitalFilter>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001f98:	f000 f956 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f9c:	bf00      	nop
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	200000e0 	.word	0x200000e0
 8001fa4:	40005400 	.word	0x40005400

08001fa8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b0ac      	sub	sp, #176	; 0xb0
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
 8001fbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fc0:	f107 0314 	add.w	r3, r7, #20
 8001fc4:	2288      	movs	r2, #136	; 0x88
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f004 fdb9 	bl	8006b40 <memset>
  if(i2cHandle->Instance==I2C1)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a21      	ldr	r2, [pc, #132]	; (8002058 <HAL_I2C_MspInit+0xb0>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d13a      	bne.n	800204e <HAL_I2C_MspInit+0xa6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001fd8:	2340      	movs	r3, #64	; 0x40
 8001fda:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fe0:	f107 0314 	add.w	r3, r7, #20
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f002 fce5 	bl	80049b4 <HAL_RCCEx_PeriphCLKConfig>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001ff0:	f000 f92a 	bl	8002248 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff4:	4b19      	ldr	r3, [pc, #100]	; (800205c <HAL_I2C_MspInit+0xb4>)
 8001ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff8:	4a18      	ldr	r2, [pc, #96]	; (800205c <HAL_I2C_MspInit+0xb4>)
 8001ffa:	f043 0302 	orr.w	r3, r3, #2
 8001ffe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002000:	4b16      	ldr	r3, [pc, #88]	; (800205c <HAL_I2C_MspInit+0xb4>)
 8002002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	613b      	str	r3, [r7, #16]
 800200a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800200c:	23c0      	movs	r3, #192	; 0xc0
 800200e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002012:	2312      	movs	r3, #18
 8002014:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002018:	2300      	movs	r3, #0
 800201a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800201e:	2303      	movs	r3, #3
 8002020:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002024:	2304      	movs	r3, #4
 8002026:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800202a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800202e:	4619      	mov	r1, r3
 8002030:	480b      	ldr	r0, [pc, #44]	; (8002060 <HAL_I2C_MspInit+0xb8>)
 8002032:	f000 fccd 	bl	80029d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002036:	4b09      	ldr	r3, [pc, #36]	; (800205c <HAL_I2C_MspInit+0xb4>)
 8002038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203a:	4a08      	ldr	r2, [pc, #32]	; (800205c <HAL_I2C_MspInit+0xb4>)
 800203c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002040:	6593      	str	r3, [r2, #88]	; 0x58
 8002042:	4b06      	ldr	r3, [pc, #24]	; (800205c <HAL_I2C_MspInit+0xb4>)
 8002044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002046:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800204e:	bf00      	nop
 8002050:	37b0      	adds	r7, #176	; 0xb0
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40005400 	.word	0x40005400
 800205c:	40021000 	.word	0x40021000
 8002060:	48000400 	.word	0x48000400

08002064 <DWT_Delay_us>:
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 uint32_t clk_cycle_start = DWT->CYCCNT;
 800206c:	4b0d      	ldr	r3, [pc, #52]	; (80020a4 <DWT_Delay_us+0x40>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	60fb      	str	r3, [r7, #12]
 microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8002072:	f002 fc07 	bl	8004884 <HAL_RCC_GetHCLKFreq>
 8002076:	4603      	mov	r3, r0
 8002078:	4a0b      	ldr	r2, [pc, #44]	; (80020a8 <DWT_Delay_us+0x44>)
 800207a:	fba2 2303 	umull	r2, r3, r2, r3
 800207e:	0c9b      	lsrs	r3, r3, #18
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	fb02 f303 	mul.w	r3, r2, r3
 8002086:	607b      	str	r3, [r7, #4]
 while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8002088:	bf00      	nop
 800208a:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <DWT_Delay_us+0x40>)
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	1ad2      	subs	r2, r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	429a      	cmp	r2, r3
 8002096:	d3f8      	bcc.n	800208a <DWT_Delay_us+0x26>
}
 8002098:	bf00      	nop
 800209a:	bf00      	nop
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	e0001000 	.word	0xe0001000
 80020a8:	431bde83 	.word	0x431bde83

080020ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020ac:	b5b0      	push	{r4, r5, r7, lr}
 80020ae:	b08c      	sub	sp, #48	; 0x30
 80020b0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020b2:	f000 fb32 	bl	800271a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020b6:	f000 f875 	bl	80021a4 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020ba:	f7ff fe57 	bl	8001d6c <MX_GPIO_Init>
  MX_I2C1_Init();
 80020be:	f7ff ff35 	bl	8001f2c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80020c2:	f000 fa2f 	bl	8002524 <MX_USART2_UART_Init>
  MX_UART4_Init();
 80020c6:	f000 f9fd 	bl	80024c4 <MX_UART4_Init>
  MX_SPI1_Init();
 80020ca:	f000 f8c3 	bl	8002254 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  BH1750_Init(&hi2c1);
 80020ce:	482e      	ldr	r0, [pc, #184]	; (8002188 <main+0xdc>)
 80020d0:	f7fe fe88 	bl	8000de4 <BH1750_Init>
  BH1750_SetMode(CONTINUOUS_HIGH_RES_MODE);
 80020d4:	2010      	movs	r0, #16
 80020d6:	f7fe febb 	bl	8000e50 <BH1750_SetMode>

  BMP280_Init(&hi2c1, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE);
 80020da:	2301      	movs	r3, #1
 80020dc:	2203      	movs	r2, #3
 80020de:	2101      	movs	r1, #1
 80020e0:	4829      	ldr	r0, [pc, #164]	; (8002188 <main+0xdc>)
 80020e2:	f7ff fae3 	bl	80016ac <BMP280_Init>

  DWT_Delay_Init();
 80020e6:	f7ff fe11 	bl	8001d0c <DWT_Delay_Init>

  NRF24_Init();
 80020ea:	f7ff f9f9 	bl	80014e0 <NRF24_Init>
  NRF24_TxMode(TxAddress, 10);
 80020ee:	210a      	movs	r1, #10
 80020f0:	4826      	ldr	r0, [pc, #152]	; (800218c <main+0xe0>)
 80020f2:	f7ff fa1c 	bl	800152e <NRF24_TxMode>
  uint32_t FC37_status;
  int size;

  while (1)
  {
		DHT11_TempAndHumidity(&DHT11_temperature, &DHT11_humidity);
 80020f6:	463a      	mov	r2, r7
 80020f8:	1d3b      	adds	r3, r7, #4
 80020fa:	4611      	mov	r1, r2
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff f86b 	bl	80011d8 <DHT11_TempAndHumidity>
		BMP280_temperature = BMP280_ReadTemperature();
		size = sprintf((char*) tx_buffer, "BMP280: %d st. C\r\n",
				(int) BMP280_temperature);
		HAL_UART_Transmit(&huart2, tx_buffer, size, 1000);*/

		BMP280_presure = BMP280_ReadPressure();
 8002102:	f7ff fc1d 	bl	8001940 <BMP280_ReadPressure>
 8002106:	4603      	mov	r3, r0
 8002108:	61bb      	str	r3, [r7, #24]
		BMP280_presure_hPa = BMP280_presure/100;
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	4a20      	ldr	r2, [pc, #128]	; (8002190 <main+0xe4>)
 800210e:	fba2 2303 	umull	r2, r3, r2, r3
 8002112:	095b      	lsrs	r3, r3, #5
 8002114:	617b      	str	r3, [r7, #20]
		BMP280_presure_afterComa = BMP280_presure - (BMP280_presure_hPa*100);
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	2264      	movs	r2, #100	; 0x64
 800211a:	fb02 f303 	mul.w	r3, r2, r3
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	613b      	str	r3, [r7, #16]

		/*size = sprintf((char*) tx_buffer, "BMP280: %d.%d hPa\r\n",
				(int) BMP280_presure_hPa, (int) BMP280_presure_afterComa);
		HAL_UART_Transmit(&huart2, tx_buffer, size, 1000);*/

		BH1750_ReadLight(&BH1750_lx_value);
 8002124:	f107 0308 	add.w	r3, r7, #8
 8002128:	4618      	mov	r0, r3
 800212a:	f7fe ff11 	bl	8000f50 <BH1750_ReadLight>

		/*size = sprintf((char*) tx_buffer, "BH1750: %d lx\r\n",
				(int) BH1750_lx_value);
		HAL_UART_Transmit(&huart2, tx_buffer, size, 1000);*/

		if (HAL_GPIO_ReadPin(FC37_Pin_GPIO_Port, FC37_Pin_Pin)) {
 800212e:	2108      	movs	r1, #8
 8002130:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002134:	f000 fdf6 	bl	8002d24 <HAL_GPIO_ReadPin>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d002      	beq.n	8002144 <main+0x98>
			FC37_status = 1;
 800213e:	2301      	movs	r3, #1
 8002140:	61fb      	str	r3, [r7, #28]
 8002142:	e001      	b.n	8002148 <main+0x9c>
		// size = sprintf((char*) tx_buffer, "FC37:   It is raining!\r\n");
		} else {
			FC37_status = 0;
 8002144:	2300      	movs	r3, #0
 8002146:	61fb      	str	r3, [r7, #28]
		// size = sprintf((char*) tx_buffer, "FC37:   It is not raining!\r\n");
		}
		/*HAL_UART_Transmit(&huart2, tx_buffer, size, 1000);*/

		size = sprintf((char*) tx_buffer, "{\"temp\":%d, \"hum\":%d, \"press\":%d.%d,"
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	461c      	mov	r4, r3
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	461d      	mov	r5, r3
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	68b9      	ldr	r1, [r7, #8]
 8002156:	4608      	mov	r0, r1
 8002158:	69f9      	ldr	r1, [r7, #28]
 800215a:	9103      	str	r1, [sp, #12]
 800215c:	9002      	str	r0, [sp, #8]
 800215e:	9201      	str	r2, [sp, #4]
 8002160:	9300      	str	r3, [sp, #0]
 8002162:	462b      	mov	r3, r5
 8002164:	4622      	mov	r2, r4
 8002166:	490b      	ldr	r1, [pc, #44]	; (8002194 <main+0xe8>)
 8002168:	480b      	ldr	r0, [pc, #44]	; (8002198 <main+0xec>)
 800216a:	f004 fcf1 	bl	8006b50 <siprintf>
 800216e:	60f8      	str	r0, [r7, #12]
				"\"light\":%d, \"batt\":4.58, \"rain\":%d}",
						(int) DHT11_temperature, 	(int) DHT11_humidity,
						(int) BMP280_presure_hPa, 	(int) BMP280_presure_afterComa,
						(int) BH1750_lx_value, 		(int) FC37_status);
		HAL_UART_Transmit(&huart2, tx_buffer, size, 1000);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	b29a      	uxth	r2, r3
 8002174:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002178:	4907      	ldr	r1, [pc, #28]	; (8002198 <main+0xec>)
 800217a:	4808      	ldr	r0, [pc, #32]	; (800219c <main+0xf0>)
 800217c:	f004 f830 	bl	80061e0 <HAL_UART_Transmit>
		else
			{
			HAL_UART_Transmit(&huart2, "kur", 6, 1000);
			}
*/
		DWT_Delay_us(5000000);
 8002180:	4807      	ldr	r0, [pc, #28]	; (80021a0 <main+0xf4>)
 8002182:	f7ff ff6f 	bl	8002064 <DWT_Delay_us>
		DHT11_TempAndHumidity(&DHT11_temperature, &DHT11_humidity);
 8002186:	e7b6      	b.n	80020f6 <main+0x4a>
 8002188:	200000e0 	.word	0x200000e0
 800218c:	20000000 	.word	0x20000000
 8002190:	51eb851f 	.word	0x51eb851f
 8002194:	080073d4 	.word	0x080073d4
 8002198:	2000012c 	.word	0x2000012c
 800219c:	200002ac 	.word	0x200002ac
 80021a0:	004c4b40 	.word	0x004c4b40

080021a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b096      	sub	sp, #88	; 0x58
 80021a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021aa:	f107 0314 	add.w	r3, r7, #20
 80021ae:	2244      	movs	r2, #68	; 0x44
 80021b0:	2100      	movs	r1, #0
 80021b2:	4618      	mov	r0, r3
 80021b4:	f004 fcc4 	bl	8006b40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021b8:	463b      	mov	r3, r7
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	605a      	str	r2, [r3, #4]
 80021c0:	609a      	str	r2, [r3, #8]
 80021c2:	60da      	str	r2, [r3, #12]
 80021c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80021c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80021ca:	f001 fdb1 	bl	8003d30 <HAL_PWREx_ControlVoltageScaling>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80021d4:	f000 f838 	bl	8002248 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80021d8:	2310      	movs	r3, #16
 80021da:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80021dc:	2301      	movs	r3, #1
 80021de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80021e4:	2360      	movs	r3, #96	; 0x60
 80021e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021e8:	2302      	movs	r3, #2
 80021ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80021ec:	2301      	movs	r3, #1
 80021ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80021f0:	2301      	movs	r3, #1
 80021f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80021f4:	2310      	movs	r3, #16
 80021f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80021f8:	2307      	movs	r3, #7
 80021fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80021fc:	2302      	movs	r3, #2
 80021fe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 8002200:	2308      	movs	r3, #8
 8002202:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002204:	f107 0314 	add.w	r3, r7, #20
 8002208:	4618      	mov	r0, r3
 800220a:	f001 fde7 	bl	8003ddc <HAL_RCC_OscConfig>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002214:	f000 f818 	bl	8002248 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002218:	230f      	movs	r3, #15
 800221a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800221c:	2303      	movs	r3, #3
 800221e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002220:	2300      	movs	r3, #0
 8002222:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002224:	2300      	movs	r3, #0
 8002226:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002228:	2300      	movs	r3, #0
 800222a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800222c:	463b      	mov	r3, r7
 800222e:	2100      	movs	r1, #0
 8002230:	4618      	mov	r0, r3
 8002232:	f002 f9b9 	bl	80045a8 <HAL_RCC_ClockConfig>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800223c:	f000 f804 	bl	8002248 <Error_Handler>
  }
}
 8002240:	bf00      	nop
 8002242:	3758      	adds	r7, #88	; 0x58
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800224c:	b672      	cpsid	i
}
 800224e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002250:	e7fe      	b.n	8002250 <Error_Handler+0x8>
	...

08002254 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002258:	4b1b      	ldr	r3, [pc, #108]	; (80022c8 <MX_SPI1_Init+0x74>)
 800225a:	4a1c      	ldr	r2, [pc, #112]	; (80022cc <MX_SPI1_Init+0x78>)
 800225c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800225e:	4b1a      	ldr	r3, [pc, #104]	; (80022c8 <MX_SPI1_Init+0x74>)
 8002260:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002264:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002266:	4b18      	ldr	r3, [pc, #96]	; (80022c8 <MX_SPI1_Init+0x74>)
 8002268:	2200      	movs	r2, #0
 800226a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800226c:	4b16      	ldr	r3, [pc, #88]	; (80022c8 <MX_SPI1_Init+0x74>)
 800226e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002272:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002274:	4b14      	ldr	r3, [pc, #80]	; (80022c8 <MX_SPI1_Init+0x74>)
 8002276:	2200      	movs	r2, #0
 8002278:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800227a:	4b13      	ldr	r3, [pc, #76]	; (80022c8 <MX_SPI1_Init+0x74>)
 800227c:	2200      	movs	r2, #0
 800227e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002280:	4b11      	ldr	r3, [pc, #68]	; (80022c8 <MX_SPI1_Init+0x74>)
 8002282:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002286:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002288:	4b0f      	ldr	r3, [pc, #60]	; (80022c8 <MX_SPI1_Init+0x74>)
 800228a:	2210      	movs	r2, #16
 800228c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800228e:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <MX_SPI1_Init+0x74>)
 8002290:	2200      	movs	r2, #0
 8002292:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002294:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <MX_SPI1_Init+0x74>)
 8002296:	2200      	movs	r2, #0
 8002298:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800229a:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <MX_SPI1_Init+0x74>)
 800229c:	2200      	movs	r2, #0
 800229e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80022a0:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <MX_SPI1_Init+0x74>)
 80022a2:	2207      	movs	r2, #7
 80022a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80022a6:	4b08      	ldr	r3, [pc, #32]	; (80022c8 <MX_SPI1_Init+0x74>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80022ac:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <MX_SPI1_Init+0x74>)
 80022ae:	2208      	movs	r2, #8
 80022b0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80022b2:	4805      	ldr	r0, [pc, #20]	; (80022c8 <MX_SPI1_Init+0x74>)
 80022b4:	f003 f83a 	bl	800532c <HAL_SPI_Init>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80022be:	f7ff ffc3 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80022c2:	bf00      	nop
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	200001c4 	.word	0x200001c4
 80022cc:	40013000 	.word	0x40013000

080022d0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b08a      	sub	sp, #40	; 0x28
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d8:	f107 0314 	add.w	r3, r7, #20
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	609a      	str	r2, [r3, #8]
 80022e4:	60da      	str	r2, [r3, #12]
 80022e6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a17      	ldr	r2, [pc, #92]	; (800234c <HAL_SPI_MspInit+0x7c>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d128      	bne.n	8002344 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022f2:	4b17      	ldr	r3, [pc, #92]	; (8002350 <HAL_SPI_MspInit+0x80>)
 80022f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022f6:	4a16      	ldr	r2, [pc, #88]	; (8002350 <HAL_SPI_MspInit+0x80>)
 80022f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022fc:	6613      	str	r3, [r2, #96]	; 0x60
 80022fe:	4b14      	ldr	r3, [pc, #80]	; (8002350 <HAL_SPI_MspInit+0x80>)
 8002300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002302:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002306:	613b      	str	r3, [r7, #16]
 8002308:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800230a:	4b11      	ldr	r3, [pc, #68]	; (8002350 <HAL_SPI_MspInit+0x80>)
 800230c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230e:	4a10      	ldr	r2, [pc, #64]	; (8002350 <HAL_SPI_MspInit+0x80>)
 8002310:	f043 0310 	orr.w	r3, r3, #16
 8002314:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002316:	4b0e      	ldr	r3, [pc, #56]	; (8002350 <HAL_SPI_MspInit+0x80>)
 8002318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800231a:	f003 0310 	and.w	r3, r3, #16
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PE13     ------> SPI1_SCK
    PE14     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002322:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002326:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002328:	2302      	movs	r3, #2
 800232a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232c:	2300      	movs	r3, #0
 800232e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002330:	2303      	movs	r3, #3
 8002332:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002334:	2305      	movs	r3, #5
 8002336:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002338:	f107 0314 	add.w	r3, r7, #20
 800233c:	4619      	mov	r1, r3
 800233e:	4805      	ldr	r0, [pc, #20]	; (8002354 <HAL_SPI_MspInit+0x84>)
 8002340:	f000 fb46 	bl	80029d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002344:	bf00      	nop
 8002346:	3728      	adds	r7, #40	; 0x28
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40013000 	.word	0x40013000
 8002350:	40021000 	.word	0x40021000
 8002354:	48001000 	.word	0x48001000

08002358 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800235e:	4b0f      	ldr	r3, [pc, #60]	; (800239c <HAL_MspInit+0x44>)
 8002360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002362:	4a0e      	ldr	r2, [pc, #56]	; (800239c <HAL_MspInit+0x44>)
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	6613      	str	r3, [r2, #96]	; 0x60
 800236a:	4b0c      	ldr	r3, [pc, #48]	; (800239c <HAL_MspInit+0x44>)
 800236c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	607b      	str	r3, [r7, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002376:	4b09      	ldr	r3, [pc, #36]	; (800239c <HAL_MspInit+0x44>)
 8002378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237a:	4a08      	ldr	r2, [pc, #32]	; (800239c <HAL_MspInit+0x44>)
 800237c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002380:	6593      	str	r3, [r2, #88]	; 0x58
 8002382:	4b06      	ldr	r3, [pc, #24]	; (800239c <HAL_MspInit+0x44>)
 8002384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238a:	603b      	str	r3, [r7, #0]
 800238c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	40021000 	.word	0x40021000

080023a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023a4:	e7fe      	b.n	80023a4 <NMI_Handler+0x4>

080023a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023a6:	b480      	push	{r7}
 80023a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023aa:	e7fe      	b.n	80023aa <HardFault_Handler+0x4>

080023ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023b0:	e7fe      	b.n	80023b0 <MemManage_Handler+0x4>

080023b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023b2:	b480      	push	{r7}
 80023b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023b6:	e7fe      	b.n	80023b6 <BusFault_Handler+0x4>

080023b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023bc:	e7fe      	b.n	80023bc <UsageFault_Handler+0x4>

080023be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023be:	b480      	push	{r7}
 80023c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023c2:	bf00      	nop
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023d0:	bf00      	nop
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr

080023da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023da:	b480      	push	{r7}
 80023dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023de:	bf00      	nop
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023ec:	f000 f9ea 	bl	80027c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023f0:	bf00      	nop
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023fc:	4a14      	ldr	r2, [pc, #80]	; (8002450 <_sbrk+0x5c>)
 80023fe:	4b15      	ldr	r3, [pc, #84]	; (8002454 <_sbrk+0x60>)
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002408:	4b13      	ldr	r3, [pc, #76]	; (8002458 <_sbrk+0x64>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d102      	bne.n	8002416 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002410:	4b11      	ldr	r3, [pc, #68]	; (8002458 <_sbrk+0x64>)
 8002412:	4a12      	ldr	r2, [pc, #72]	; (800245c <_sbrk+0x68>)
 8002414:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002416:	4b10      	ldr	r3, [pc, #64]	; (8002458 <_sbrk+0x64>)
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4413      	add	r3, r2
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	429a      	cmp	r2, r3
 8002422:	d207      	bcs.n	8002434 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002424:	f004 fb62 	bl	8006aec <__errno>
 8002428:	4603      	mov	r3, r0
 800242a:	220c      	movs	r2, #12
 800242c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800242e:	f04f 33ff 	mov.w	r3, #4294967295
 8002432:	e009      	b.n	8002448 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002434:	4b08      	ldr	r3, [pc, #32]	; (8002458 <_sbrk+0x64>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800243a:	4b07      	ldr	r3, [pc, #28]	; (8002458 <_sbrk+0x64>)
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4413      	add	r3, r2
 8002442:	4a05      	ldr	r2, [pc, #20]	; (8002458 <_sbrk+0x64>)
 8002444:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002446:	68fb      	ldr	r3, [r7, #12]
}
 8002448:	4618      	mov	r0, r3
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	20018000 	.word	0x20018000
 8002454:	00000400 	.word	0x00000400
 8002458:	20000094 	.word	0x20000094
 800245c:	20000348 	.word	0x20000348

08002460 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002464:	4b15      	ldr	r3, [pc, #84]	; (80024bc <SystemInit+0x5c>)
 8002466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246a:	4a14      	ldr	r2, [pc, #80]	; (80024bc <SystemInit+0x5c>)
 800246c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002470:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002474:	4b12      	ldr	r3, [pc, #72]	; (80024c0 <SystemInit+0x60>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a11      	ldr	r2, [pc, #68]	; (80024c0 <SystemInit+0x60>)
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002480:	4b0f      	ldr	r3, [pc, #60]	; (80024c0 <SystemInit+0x60>)
 8002482:	2200      	movs	r2, #0
 8002484:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002486:	4b0e      	ldr	r3, [pc, #56]	; (80024c0 <SystemInit+0x60>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a0d      	ldr	r2, [pc, #52]	; (80024c0 <SystemInit+0x60>)
 800248c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002490:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002494:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002496:	4b0a      	ldr	r3, [pc, #40]	; (80024c0 <SystemInit+0x60>)
 8002498:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800249c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800249e:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <SystemInit+0x60>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a07      	ldr	r2, [pc, #28]	; (80024c0 <SystemInit+0x60>)
 80024a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024a8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80024aa:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <SystemInit+0x60>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	619a      	str	r2, [r3, #24]
}
 80024b0:	bf00      	nop
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	e000ed00 	.word	0xe000ed00
 80024c0:	40021000 	.word	0x40021000

080024c4 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80024c8:	4b14      	ldr	r3, [pc, #80]	; (800251c <MX_UART4_Init+0x58>)
 80024ca:	4a15      	ldr	r2, [pc, #84]	; (8002520 <MX_UART4_Init+0x5c>)
 80024cc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80024ce:	4b13      	ldr	r3, [pc, #76]	; (800251c <MX_UART4_Init+0x58>)
 80024d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80024d4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80024d6:	4b11      	ldr	r3, [pc, #68]	; (800251c <MX_UART4_Init+0x58>)
 80024d8:	2200      	movs	r2, #0
 80024da:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80024dc:	4b0f      	ldr	r3, [pc, #60]	; (800251c <MX_UART4_Init+0x58>)
 80024de:	2200      	movs	r2, #0
 80024e0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80024e2:	4b0e      	ldr	r3, [pc, #56]	; (800251c <MX_UART4_Init+0x58>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80024e8:	4b0c      	ldr	r3, [pc, #48]	; (800251c <MX_UART4_Init+0x58>)
 80024ea:	220c      	movs	r2, #12
 80024ec:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ee:	4b0b      	ldr	r3, [pc, #44]	; (800251c <MX_UART4_Init+0x58>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80024f4:	4b09      	ldr	r3, [pc, #36]	; (800251c <MX_UART4_Init+0x58>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024fa:	4b08      	ldr	r3, [pc, #32]	; (800251c <MX_UART4_Init+0x58>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002500:	4b06      	ldr	r3, [pc, #24]	; (800251c <MX_UART4_Init+0x58>)
 8002502:	2200      	movs	r2, #0
 8002504:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002506:	4805      	ldr	r0, [pc, #20]	; (800251c <MX_UART4_Init+0x58>)
 8002508:	f003 fe1c 	bl	8006144 <HAL_UART_Init>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8002512:	f7ff fe99 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	20000228 	.word	0x20000228
 8002520:	40004c00 	.word	0x40004c00

08002524 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002528:	4b14      	ldr	r3, [pc, #80]	; (800257c <MX_USART2_UART_Init+0x58>)
 800252a:	4a15      	ldr	r2, [pc, #84]	; (8002580 <MX_USART2_UART_Init+0x5c>)
 800252c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800252e:	4b13      	ldr	r3, [pc, #76]	; (800257c <MX_USART2_UART_Init+0x58>)
 8002530:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002534:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002536:	4b11      	ldr	r3, [pc, #68]	; (800257c <MX_USART2_UART_Init+0x58>)
 8002538:	2200      	movs	r2, #0
 800253a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800253c:	4b0f      	ldr	r3, [pc, #60]	; (800257c <MX_USART2_UART_Init+0x58>)
 800253e:	2200      	movs	r2, #0
 8002540:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002542:	4b0e      	ldr	r3, [pc, #56]	; (800257c <MX_USART2_UART_Init+0x58>)
 8002544:	2200      	movs	r2, #0
 8002546:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002548:	4b0c      	ldr	r3, [pc, #48]	; (800257c <MX_USART2_UART_Init+0x58>)
 800254a:	220c      	movs	r2, #12
 800254c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800254e:	4b0b      	ldr	r3, [pc, #44]	; (800257c <MX_USART2_UART_Init+0x58>)
 8002550:	2200      	movs	r2, #0
 8002552:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002554:	4b09      	ldr	r3, [pc, #36]	; (800257c <MX_USART2_UART_Init+0x58>)
 8002556:	2200      	movs	r2, #0
 8002558:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800255a:	4b08      	ldr	r3, [pc, #32]	; (800257c <MX_USART2_UART_Init+0x58>)
 800255c:	2200      	movs	r2, #0
 800255e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002560:	4b06      	ldr	r3, [pc, #24]	; (800257c <MX_USART2_UART_Init+0x58>)
 8002562:	2200      	movs	r2, #0
 8002564:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002566:	4805      	ldr	r0, [pc, #20]	; (800257c <MX_USART2_UART_Init+0x58>)
 8002568:	f003 fdec 	bl	8006144 <HAL_UART_Init>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002572:	f7ff fe69 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	200002ac 	.word	0x200002ac
 8002580:	40004400 	.word	0x40004400

08002584 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b0ae      	sub	sp, #184	; 0xb8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800258c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	605a      	str	r2, [r3, #4]
 8002596:	609a      	str	r2, [r3, #8]
 8002598:	60da      	str	r2, [r3, #12]
 800259a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800259c:	f107 031c 	add.w	r3, r7, #28
 80025a0:	2288      	movs	r2, #136	; 0x88
 80025a2:	2100      	movs	r1, #0
 80025a4:	4618      	mov	r0, r3
 80025a6:	f004 facb 	bl	8006b40 <memset>
  if(uartHandle->Instance==UART4)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a42      	ldr	r2, [pc, #264]	; (80026b8 <HAL_UART_MspInit+0x134>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d13c      	bne.n	800262e <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80025b4:	2308      	movs	r3, #8
 80025b6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80025b8:	2300      	movs	r3, #0
 80025ba:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025bc:	f107 031c 	add.w	r3, r7, #28
 80025c0:	4618      	mov	r0, r3
 80025c2:	f002 f9f7 	bl	80049b4 <HAL_RCCEx_PeriphCLKConfig>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80025cc:	f7ff fe3c 	bl	8002248 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80025d0:	4b3a      	ldr	r3, [pc, #232]	; (80026bc <HAL_UART_MspInit+0x138>)
 80025d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d4:	4a39      	ldr	r2, [pc, #228]	; (80026bc <HAL_UART_MspInit+0x138>)
 80025d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80025da:	6593      	str	r3, [r2, #88]	; 0x58
 80025dc:	4b37      	ldr	r3, [pc, #220]	; (80026bc <HAL_UART_MspInit+0x138>)
 80025de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025e4:	61bb      	str	r3, [r7, #24]
 80025e6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e8:	4b34      	ldr	r3, [pc, #208]	; (80026bc <HAL_UART_MspInit+0x138>)
 80025ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ec:	4a33      	ldr	r2, [pc, #204]	; (80026bc <HAL_UART_MspInit+0x138>)
 80025ee:	f043 0301 	orr.w	r3, r3, #1
 80025f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025f4:	4b31      	ldr	r3, [pc, #196]	; (80026bc <HAL_UART_MspInit+0x138>)
 80025f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	617b      	str	r3, [r7, #20]
 80025fe:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002600:	2303      	movs	r3, #3
 8002602:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002606:	2302      	movs	r3, #2
 8002608:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260c:	2300      	movs	r3, #0
 800260e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002612:	2303      	movs	r3, #3
 8002614:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002618:	2308      	movs	r3, #8
 800261a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800261e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002622:	4619      	mov	r1, r3
 8002624:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002628:	f000 f9d2 	bl	80029d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800262c:	e03f      	b.n	80026ae <HAL_UART_MspInit+0x12a>
  else if(uartHandle->Instance==USART2)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a23      	ldr	r2, [pc, #140]	; (80026c0 <HAL_UART_MspInit+0x13c>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d13a      	bne.n	80026ae <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002638:	2302      	movs	r3, #2
 800263a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800263c:	2300      	movs	r3, #0
 800263e:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002640:	f107 031c 	add.w	r3, r7, #28
 8002644:	4618      	mov	r0, r3
 8002646:	f002 f9b5 	bl	80049b4 <HAL_RCCEx_PeriphCLKConfig>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8002650:	f7ff fdfa 	bl	8002248 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002654:	4b19      	ldr	r3, [pc, #100]	; (80026bc <HAL_UART_MspInit+0x138>)
 8002656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002658:	4a18      	ldr	r2, [pc, #96]	; (80026bc <HAL_UART_MspInit+0x138>)
 800265a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800265e:	6593      	str	r3, [r2, #88]	; 0x58
 8002660:	4b16      	ldr	r3, [pc, #88]	; (80026bc <HAL_UART_MspInit+0x138>)
 8002662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002668:	613b      	str	r3, [r7, #16]
 800266a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800266c:	4b13      	ldr	r3, [pc, #76]	; (80026bc <HAL_UART_MspInit+0x138>)
 800266e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002670:	4a12      	ldr	r2, [pc, #72]	; (80026bc <HAL_UART_MspInit+0x138>)
 8002672:	f043 0308 	orr.w	r3, r3, #8
 8002676:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002678:	4b10      	ldr	r3, [pc, #64]	; (80026bc <HAL_UART_MspInit+0x138>)
 800267a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800267c:	f003 0308 	and.w	r3, r3, #8
 8002680:	60fb      	str	r3, [r7, #12]
 8002682:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002684:	2360      	movs	r3, #96	; 0x60
 8002686:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268a:	2302      	movs	r3, #2
 800268c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002690:	2300      	movs	r3, #0
 8002692:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002696:	2303      	movs	r3, #3
 8002698:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800269c:	2307      	movs	r3, #7
 800269e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026a2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80026a6:	4619      	mov	r1, r3
 80026a8:	4806      	ldr	r0, [pc, #24]	; (80026c4 <HAL_UART_MspInit+0x140>)
 80026aa:	f000 f991 	bl	80029d0 <HAL_GPIO_Init>
}
 80026ae:	bf00      	nop
 80026b0:	37b8      	adds	r7, #184	; 0xb8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	40004c00 	.word	0x40004c00
 80026bc:	40021000 	.word	0x40021000
 80026c0:	40004400 	.word	0x40004400
 80026c4:	48000c00 	.word	0x48000c00

080026c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80026c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002700 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80026cc:	f7ff fec8 	bl	8002460 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80026d0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80026d2:	e003      	b.n	80026dc <LoopCopyDataInit>

080026d4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80026d4:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80026d6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80026d8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80026da:	3104      	adds	r1, #4

080026dc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80026dc:	480a      	ldr	r0, [pc, #40]	; (8002708 <LoopForever+0xa>)
	ldr	r3, =_edata
 80026de:	4b0b      	ldr	r3, [pc, #44]	; (800270c <LoopForever+0xe>)
	adds	r2, r0, r1
 80026e0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80026e2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80026e4:	d3f6      	bcc.n	80026d4 <CopyDataInit>
	ldr	r2, =_sbss
 80026e6:	4a0a      	ldr	r2, [pc, #40]	; (8002710 <LoopForever+0x12>)
	b	LoopFillZerobss
 80026e8:	e002      	b.n	80026f0 <LoopFillZerobss>

080026ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80026ea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80026ec:	f842 3b04 	str.w	r3, [r2], #4

080026f0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80026f0:	4b08      	ldr	r3, [pc, #32]	; (8002714 <LoopForever+0x16>)
	cmp	r2, r3
 80026f2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80026f4:	d3f9      	bcc.n	80026ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026f6:	f004 f9ff 	bl	8006af8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026fa:	f7ff fcd7 	bl	80020ac <main>

080026fe <LoopForever>:

LoopForever:
    b LoopForever
 80026fe:	e7fe      	b.n	80026fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002700:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002704:	080074a8 	.word	0x080074a8
	ldr	r0, =_sdata
 8002708:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800270c:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 8002710:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 8002714:	20000344 	.word	0x20000344

08002718 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002718:	e7fe      	b.n	8002718 <ADC1_2_IRQHandler>

0800271a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b082      	sub	sp, #8
 800271e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002720:	2300      	movs	r3, #0
 8002722:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002724:	2003      	movs	r0, #3
 8002726:	f000 f91f 	bl	8002968 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800272a:	200f      	movs	r0, #15
 800272c:	f000 f80e 	bl	800274c <HAL_InitTick>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d002      	beq.n	800273c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	71fb      	strb	r3, [r7, #7]
 800273a:	e001      	b.n	8002740 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800273c:	f7ff fe0c 	bl	8002358 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002740:	79fb      	ldrb	r3, [r7, #7]
}
 8002742:	4618      	mov	r0, r3
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002754:	2300      	movs	r3, #0
 8002756:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002758:	4b17      	ldr	r3, [pc, #92]	; (80027b8 <HAL_InitTick+0x6c>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d023      	beq.n	80027a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002760:	4b16      	ldr	r3, [pc, #88]	; (80027bc <HAL_InitTick+0x70>)
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	4b14      	ldr	r3, [pc, #80]	; (80027b8 <HAL_InitTick+0x6c>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	4619      	mov	r1, r3
 800276a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800276e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002772:	fbb2 f3f3 	udiv	r3, r2, r3
 8002776:	4618      	mov	r0, r3
 8002778:	f000 f91d 	bl	80029b6 <HAL_SYSTICK_Config>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10f      	bne.n	80027a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2b0f      	cmp	r3, #15
 8002786:	d809      	bhi.n	800279c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002788:	2200      	movs	r2, #0
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	f04f 30ff 	mov.w	r0, #4294967295
 8002790:	f000 f8f5 	bl	800297e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002794:	4a0a      	ldr	r2, [pc, #40]	; (80027c0 <HAL_InitTick+0x74>)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6013      	str	r3, [r2, #0]
 800279a:	e007      	b.n	80027ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	73fb      	strb	r3, [r7, #15]
 80027a0:	e004      	b.n	80027ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	73fb      	strb	r3, [r7, #15]
 80027a6:	e001      	b.n	80027ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80027ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	20000010 	.word	0x20000010
 80027bc:	20000008 	.word	0x20000008
 80027c0:	2000000c 	.word	0x2000000c

080027c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027c8:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <HAL_IncTick+0x20>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	461a      	mov	r2, r3
 80027ce:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <HAL_IncTick+0x24>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4413      	add	r3, r2
 80027d4:	4a04      	ldr	r2, [pc, #16]	; (80027e8 <HAL_IncTick+0x24>)
 80027d6:	6013      	str	r3, [r2, #0]
}
 80027d8:	bf00      	nop
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	20000010 	.word	0x20000010
 80027e8:	20000330 	.word	0x20000330

080027ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  return uwTick;
 80027f0:	4b03      	ldr	r3, [pc, #12]	; (8002800 <HAL_GetTick+0x14>)
 80027f2:	681b      	ldr	r3, [r3, #0]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	20000330 	.word	0x20000330

08002804 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002814:	4b0c      	ldr	r3, [pc, #48]	; (8002848 <__NVIC_SetPriorityGrouping+0x44>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002820:	4013      	ands	r3, r2
 8002822:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800282c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002836:	4a04      	ldr	r2, [pc, #16]	; (8002848 <__NVIC_SetPriorityGrouping+0x44>)
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	60d3      	str	r3, [r2, #12]
}
 800283c:	bf00      	nop
 800283e:	3714      	adds	r7, #20
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	e000ed00 	.word	0xe000ed00

0800284c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002850:	4b04      	ldr	r3, [pc, #16]	; (8002864 <__NVIC_GetPriorityGrouping+0x18>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	0a1b      	lsrs	r3, r3, #8
 8002856:	f003 0307 	and.w	r3, r3, #7
}
 800285a:	4618      	mov	r0, r3
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	e000ed00 	.word	0xe000ed00

08002868 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	4603      	mov	r3, r0
 8002870:	6039      	str	r1, [r7, #0]
 8002872:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002878:	2b00      	cmp	r3, #0
 800287a:	db0a      	blt.n	8002892 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	b2da      	uxtb	r2, r3
 8002880:	490c      	ldr	r1, [pc, #48]	; (80028b4 <__NVIC_SetPriority+0x4c>)
 8002882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002886:	0112      	lsls	r2, r2, #4
 8002888:	b2d2      	uxtb	r2, r2
 800288a:	440b      	add	r3, r1
 800288c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002890:	e00a      	b.n	80028a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	b2da      	uxtb	r2, r3
 8002896:	4908      	ldr	r1, [pc, #32]	; (80028b8 <__NVIC_SetPriority+0x50>)
 8002898:	79fb      	ldrb	r3, [r7, #7]
 800289a:	f003 030f 	and.w	r3, r3, #15
 800289e:	3b04      	subs	r3, #4
 80028a0:	0112      	lsls	r2, r2, #4
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	440b      	add	r3, r1
 80028a6:	761a      	strb	r2, [r3, #24]
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	e000e100 	.word	0xe000e100
 80028b8:	e000ed00 	.word	0xe000ed00

080028bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028bc:	b480      	push	{r7}
 80028be:	b089      	sub	sp, #36	; 0x24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	f1c3 0307 	rsb	r3, r3, #7
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	bf28      	it	cs
 80028da:	2304      	movcs	r3, #4
 80028dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	3304      	adds	r3, #4
 80028e2:	2b06      	cmp	r3, #6
 80028e4:	d902      	bls.n	80028ec <NVIC_EncodePriority+0x30>
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	3b03      	subs	r3, #3
 80028ea:	e000      	b.n	80028ee <NVIC_EncodePriority+0x32>
 80028ec:	2300      	movs	r3, #0
 80028ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f0:	f04f 32ff 	mov.w	r2, #4294967295
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	43da      	mvns	r2, r3
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	401a      	ands	r2, r3
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002904:	f04f 31ff 	mov.w	r1, #4294967295
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	fa01 f303 	lsl.w	r3, r1, r3
 800290e:	43d9      	mvns	r1, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002914:	4313      	orrs	r3, r2
         );
}
 8002916:	4618      	mov	r0, r3
 8002918:	3724      	adds	r7, #36	; 0x24
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
	...

08002924 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3b01      	subs	r3, #1
 8002930:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002934:	d301      	bcc.n	800293a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002936:	2301      	movs	r3, #1
 8002938:	e00f      	b.n	800295a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800293a:	4a0a      	ldr	r2, [pc, #40]	; (8002964 <SysTick_Config+0x40>)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	3b01      	subs	r3, #1
 8002940:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002942:	210f      	movs	r1, #15
 8002944:	f04f 30ff 	mov.w	r0, #4294967295
 8002948:	f7ff ff8e 	bl	8002868 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800294c:	4b05      	ldr	r3, [pc, #20]	; (8002964 <SysTick_Config+0x40>)
 800294e:	2200      	movs	r2, #0
 8002950:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002952:	4b04      	ldr	r3, [pc, #16]	; (8002964 <SysTick_Config+0x40>)
 8002954:	2207      	movs	r2, #7
 8002956:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	e000e010 	.word	0xe000e010

08002968 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f7ff ff47 	bl	8002804 <__NVIC_SetPriorityGrouping>
}
 8002976:	bf00      	nop
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b086      	sub	sp, #24
 8002982:	af00      	add	r7, sp, #0
 8002984:	4603      	mov	r3, r0
 8002986:	60b9      	str	r1, [r7, #8]
 8002988:	607a      	str	r2, [r7, #4]
 800298a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800298c:	2300      	movs	r3, #0
 800298e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002990:	f7ff ff5c 	bl	800284c <__NVIC_GetPriorityGrouping>
 8002994:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	68b9      	ldr	r1, [r7, #8]
 800299a:	6978      	ldr	r0, [r7, #20]
 800299c:	f7ff ff8e 	bl	80028bc <NVIC_EncodePriority>
 80029a0:	4602      	mov	r2, r0
 80029a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029a6:	4611      	mov	r1, r2
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff ff5d 	bl	8002868 <__NVIC_SetPriority>
}
 80029ae:	bf00      	nop
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b082      	sub	sp, #8
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f7ff ffb0 	bl	8002924 <SysTick_Config>
 80029c4:	4603      	mov	r3, r0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
	...

080029d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b087      	sub	sp, #28
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029da:	2300      	movs	r3, #0
 80029dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029de:	e17f      	b.n	8002ce0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	2101      	movs	r1, #1
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	fa01 f303 	lsl.w	r3, r1, r3
 80029ec:	4013      	ands	r3, r2
 80029ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f000 8171 	beq.w	8002cda <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d00b      	beq.n	8002a18 <HAL_GPIO_Init+0x48>
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d007      	beq.n	8002a18 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a0c:	2b11      	cmp	r3, #17
 8002a0e:	d003      	beq.n	8002a18 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	2b12      	cmp	r3, #18
 8002a16:	d130      	bne.n	8002a7a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	2203      	movs	r2, #3
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	68da      	ldr	r2, [r3, #12]
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a4e:	2201      	movs	r2, #1
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	43db      	mvns	r3, r3
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	091b      	lsrs	r3, r3, #4
 8002a64:	f003 0201 	and.w	r2, r3, #1
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	2b03      	cmp	r3, #3
 8002a84:	d118      	bne.n	8002ab8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	43db      	mvns	r3, r3
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	08db      	lsrs	r3, r3, #3
 8002aa2:	f003 0201 	and.w	r2, r3, #1
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	2203      	movs	r2, #3
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	4013      	ands	r3, r2
 8002ace:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d003      	beq.n	8002af8 <HAL_GPIO_Init+0x128>
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	2b12      	cmp	r3, #18
 8002af6:	d123      	bne.n	8002b40 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	08da      	lsrs	r2, r3, #3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3208      	adds	r2, #8
 8002b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b04:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	f003 0307 	and.w	r3, r3, #7
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	220f      	movs	r2, #15
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	43db      	mvns	r3, r3
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	691a      	ldr	r2, [r3, #16]
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	f003 0307 	and.w	r3, r3, #7
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	08da      	lsrs	r2, r3, #3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	3208      	adds	r2, #8
 8002b3a:	6939      	ldr	r1, [r7, #16]
 8002b3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	2203      	movs	r2, #3
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	43db      	mvns	r3, r3
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	4013      	ands	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f003 0203 	and.w	r2, r3, #3
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f000 80ac 	beq.w	8002cda <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b82:	4b5f      	ldr	r3, [pc, #380]	; (8002d00 <HAL_GPIO_Init+0x330>)
 8002b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b86:	4a5e      	ldr	r2, [pc, #376]	; (8002d00 <HAL_GPIO_Init+0x330>)
 8002b88:	f043 0301 	orr.w	r3, r3, #1
 8002b8c:	6613      	str	r3, [r2, #96]	; 0x60
 8002b8e:	4b5c      	ldr	r3, [pc, #368]	; (8002d00 <HAL_GPIO_Init+0x330>)
 8002b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	60bb      	str	r3, [r7, #8]
 8002b98:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b9a:	4a5a      	ldr	r2, [pc, #360]	; (8002d04 <HAL_GPIO_Init+0x334>)
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	089b      	lsrs	r3, r3, #2
 8002ba0:	3302      	adds	r3, #2
 8002ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	f003 0303 	and.w	r3, r3, #3
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	220f      	movs	r2, #15
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002bc4:	d025      	beq.n	8002c12 <HAL_GPIO_Init+0x242>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a4f      	ldr	r2, [pc, #316]	; (8002d08 <HAL_GPIO_Init+0x338>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d01f      	beq.n	8002c0e <HAL_GPIO_Init+0x23e>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a4e      	ldr	r2, [pc, #312]	; (8002d0c <HAL_GPIO_Init+0x33c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d019      	beq.n	8002c0a <HAL_GPIO_Init+0x23a>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a4d      	ldr	r2, [pc, #308]	; (8002d10 <HAL_GPIO_Init+0x340>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d013      	beq.n	8002c06 <HAL_GPIO_Init+0x236>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a4c      	ldr	r2, [pc, #304]	; (8002d14 <HAL_GPIO_Init+0x344>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d00d      	beq.n	8002c02 <HAL_GPIO_Init+0x232>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a4b      	ldr	r2, [pc, #300]	; (8002d18 <HAL_GPIO_Init+0x348>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d007      	beq.n	8002bfe <HAL_GPIO_Init+0x22e>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a4a      	ldr	r2, [pc, #296]	; (8002d1c <HAL_GPIO_Init+0x34c>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d101      	bne.n	8002bfa <HAL_GPIO_Init+0x22a>
 8002bf6:	2306      	movs	r3, #6
 8002bf8:	e00c      	b.n	8002c14 <HAL_GPIO_Init+0x244>
 8002bfa:	2307      	movs	r3, #7
 8002bfc:	e00a      	b.n	8002c14 <HAL_GPIO_Init+0x244>
 8002bfe:	2305      	movs	r3, #5
 8002c00:	e008      	b.n	8002c14 <HAL_GPIO_Init+0x244>
 8002c02:	2304      	movs	r3, #4
 8002c04:	e006      	b.n	8002c14 <HAL_GPIO_Init+0x244>
 8002c06:	2303      	movs	r3, #3
 8002c08:	e004      	b.n	8002c14 <HAL_GPIO_Init+0x244>
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	e002      	b.n	8002c14 <HAL_GPIO_Init+0x244>
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e000      	b.n	8002c14 <HAL_GPIO_Init+0x244>
 8002c12:	2300      	movs	r3, #0
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	f002 0203 	and.w	r2, r2, #3
 8002c1a:	0092      	lsls	r2, r2, #2
 8002c1c:	4093      	lsls	r3, r2
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c24:	4937      	ldr	r1, [pc, #220]	; (8002d04 <HAL_GPIO_Init+0x334>)
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	089b      	lsrs	r3, r3, #2
 8002c2a:	3302      	adds	r3, #2
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002c32:	4b3b      	ldr	r3, [pc, #236]	; (8002d20 <HAL_GPIO_Init+0x350>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	43db      	mvns	r3, r3
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c56:	4a32      	ldr	r2, [pc, #200]	; (8002d20 <HAL_GPIO_Init+0x350>)
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002c5c:	4b30      	ldr	r3, [pc, #192]	; (8002d20 <HAL_GPIO_Init+0x350>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	43db      	mvns	r3, r3
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d003      	beq.n	8002c80 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c80:	4a27      	ldr	r2, [pc, #156]	; (8002d20 <HAL_GPIO_Init+0x350>)
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c86:	4b26      	ldr	r3, [pc, #152]	; (8002d20 <HAL_GPIO_Init+0x350>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	43db      	mvns	r3, r3
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	4013      	ands	r3, r2
 8002c94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d003      	beq.n	8002caa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002caa:	4a1d      	ldr	r2, [pc, #116]	; (8002d20 <HAL_GPIO_Init+0x350>)
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002cb0:	4b1b      	ldr	r3, [pc, #108]	; (8002d20 <HAL_GPIO_Init+0x350>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d003      	beq.n	8002cd4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002cd4:	4a12      	ldr	r2, [pc, #72]	; (8002d20 <HAL_GPIO_Init+0x350>)
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f47f ae78 	bne.w	80029e0 <HAL_GPIO_Init+0x10>
  }
}
 8002cf0:	bf00      	nop
 8002cf2:	bf00      	nop
 8002cf4:	371c      	adds	r7, #28
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	40021000 	.word	0x40021000
 8002d04:	40010000 	.word	0x40010000
 8002d08:	48000400 	.word	0x48000400
 8002d0c:	48000800 	.word	0x48000800
 8002d10:	48000c00 	.word	0x48000c00
 8002d14:	48001000 	.word	0x48001000
 8002d18:	48001400 	.word	0x48001400
 8002d1c:	48001800 	.word	0x48001800
 8002d20:	40010400 	.word	0x40010400

08002d24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	691a      	ldr	r2, [r3, #16]
 8002d34:	887b      	ldrh	r3, [r7, #2]
 8002d36:	4013      	ands	r3, r2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d002      	beq.n	8002d42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	73fb      	strb	r3, [r7, #15]
 8002d40:	e001      	b.n	8002d46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d42:	2300      	movs	r3, #0
 8002d44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3714      	adds	r7, #20
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	807b      	strh	r3, [r7, #2]
 8002d60:	4613      	mov	r3, r2
 8002d62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d64:	787b      	ldrb	r3, [r7, #1]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d6a:	887a      	ldrh	r2, [r7, #2]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d70:	e002      	b.n	8002d78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d72:	887a      	ldrh	r2, [r7, #2]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e081      	b.n	8002e9a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d106      	bne.n	8002db0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7ff f8fc 	bl	8001fa8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2224      	movs	r2, #36	; 0x24
 8002db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0201 	bic.w	r2, r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685a      	ldr	r2, [r3, #4]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002dd4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002de4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d107      	bne.n	8002dfe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	689a      	ldr	r2, [r3, #8]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dfa:	609a      	str	r2, [r3, #8]
 8002dfc:	e006      	b.n	8002e0c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689a      	ldr	r2, [r3, #8]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002e0a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d104      	bne.n	8002e1e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e1c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6812      	ldr	r2, [r2, #0]
 8002e28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e30:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68da      	ldr	r2, [r3, #12]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e40:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	691a      	ldr	r2, [r3, #16]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	ea42 0103 	orr.w	r1, r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	021a      	lsls	r2, r3, #8
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	69d9      	ldr	r1, [r3, #28]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a1a      	ldr	r2, [r3, #32]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f042 0201 	orr.w	r2, r2, #1
 8002e7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2220      	movs	r2, #32
 8002e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
	...

08002ea4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b088      	sub	sp, #32
 8002ea8:	af02      	add	r7, sp, #8
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	607a      	str	r2, [r7, #4]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	817b      	strh	r3, [r7, #10]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b20      	cmp	r3, #32
 8002ec2:	f040 80da 	bne.w	800307a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d101      	bne.n	8002ed4 <HAL_I2C_Master_Transmit+0x30>
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	e0d3      	b.n	800307c <HAL_I2C_Master_Transmit+0x1d8>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002edc:	f7ff fc86 	bl	80027ec <HAL_GetTick>
 8002ee0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	2319      	movs	r3, #25
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 fcbc 	bl	800386c <I2C_WaitOnFlagUntilTimeout>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e0be      	b.n	800307c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2221      	movs	r2, #33	; 0x21
 8002f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2210      	movs	r2, #16
 8002f0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	893a      	ldrh	r2, [r7, #8]
 8002f1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	2bff      	cmp	r3, #255	; 0xff
 8002f2e:	d90e      	bls.n	8002f4e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	22ff      	movs	r2, #255	; 0xff
 8002f34:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f3a:	b2da      	uxtb	r2, r3
 8002f3c:	8979      	ldrh	r1, [r7, #10]
 8002f3e:	4b51      	ldr	r3, [pc, #324]	; (8003084 <HAL_I2C_Master_Transmit+0x1e0>)
 8002f40:	9300      	str	r3, [sp, #0]
 8002f42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f000 fe1e 	bl	8003b88 <I2C_TransferConfig>
 8002f4c:	e06c      	b.n	8003028 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	8979      	ldrh	r1, [r7, #10]
 8002f60:	4b48      	ldr	r3, [pc, #288]	; (8003084 <HAL_I2C_Master_Transmit+0x1e0>)
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f000 fe0d 	bl	8003b88 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002f6e:	e05b      	b.n	8003028 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	6a39      	ldr	r1, [r7, #32]
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f000 fcb9 	bl	80038ec <I2C_WaitOnTXISFlagUntilTimeout>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e07b      	b.n	800307c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f88:	781a      	ldrb	r2, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f94:	1c5a      	adds	r2, r3, #1
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fac:	3b01      	subs	r3, #1
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d034      	beq.n	8003028 <HAL_I2C_Master_Transmit+0x184>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d130      	bne.n	8003028 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	6a3b      	ldr	r3, [r7, #32]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	2180      	movs	r1, #128	; 0x80
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 fc4b 	bl	800386c <I2C_WaitOnFlagUntilTimeout>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e04d      	b.n	800307c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	2bff      	cmp	r3, #255	; 0xff
 8002fe8:	d90e      	bls.n	8003008 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	22ff      	movs	r2, #255	; 0xff
 8002fee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	8979      	ldrh	r1, [r7, #10]
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f000 fdc1 	bl	8003b88 <I2C_TransferConfig>
 8003006:	e00f      	b.n	8003028 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300c:	b29a      	uxth	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003016:	b2da      	uxtb	r2, r3
 8003018:	8979      	ldrh	r1, [r7, #10]
 800301a:	2300      	movs	r3, #0
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f000 fdb0 	bl	8003b88 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302c:	b29b      	uxth	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d19e      	bne.n	8002f70 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	6a39      	ldr	r1, [r7, #32]
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 fc98 	bl	800396c <I2C_WaitOnSTOPFlagUntilTimeout>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e01a      	b.n	800307c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2220      	movs	r2, #32
 800304c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6859      	ldr	r1, [r3, #4]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	4b0b      	ldr	r3, [pc, #44]	; (8003088 <HAL_I2C_Master_Transmit+0x1e4>)
 800305a:	400b      	ands	r3, r1
 800305c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2220      	movs	r2, #32
 8003062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003076:	2300      	movs	r3, #0
 8003078:	e000      	b.n	800307c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800307a:	2302      	movs	r3, #2
  }
}
 800307c:	4618      	mov	r0, r3
 800307e:	3718      	adds	r7, #24
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	80002000 	.word	0x80002000
 8003088:	fe00e800 	.word	0xfe00e800

0800308c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b088      	sub	sp, #32
 8003090:	af02      	add	r7, sp, #8
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	607a      	str	r2, [r7, #4]
 8003096:	461a      	mov	r2, r3
 8003098:	460b      	mov	r3, r1
 800309a:	817b      	strh	r3, [r7, #10]
 800309c:	4613      	mov	r3, r2
 800309e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b20      	cmp	r3, #32
 80030aa:	f040 80db 	bne.w	8003264 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d101      	bne.n	80030bc <HAL_I2C_Master_Receive+0x30>
 80030b8:	2302      	movs	r3, #2
 80030ba:	e0d4      	b.n	8003266 <HAL_I2C_Master_Receive+0x1da>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80030c4:	f7ff fb92 	bl	80027ec <HAL_GetTick>
 80030c8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	2319      	movs	r3, #25
 80030d0:	2201      	movs	r2, #1
 80030d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f000 fbc8 	bl	800386c <I2C_WaitOnFlagUntilTimeout>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e0bf      	b.n	8003266 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2222      	movs	r2, #34	; 0x22
 80030ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2210      	movs	r2, #16
 80030f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	893a      	ldrh	r2, [r7, #8]
 8003106:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003112:	b29b      	uxth	r3, r3
 8003114:	2bff      	cmp	r3, #255	; 0xff
 8003116:	d90e      	bls.n	8003136 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	22ff      	movs	r2, #255	; 0xff
 800311c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003122:	b2da      	uxtb	r2, r3
 8003124:	8979      	ldrh	r1, [r7, #10]
 8003126:	4b52      	ldr	r3, [pc, #328]	; (8003270 <HAL_I2C_Master_Receive+0x1e4>)
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	f000 fd2a 	bl	8003b88 <I2C_TransferConfig>
 8003134:	e06d      	b.n	8003212 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800313a:	b29a      	uxth	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003144:	b2da      	uxtb	r2, r3
 8003146:	8979      	ldrh	r1, [r7, #10]
 8003148:	4b49      	ldr	r3, [pc, #292]	; (8003270 <HAL_I2C_Master_Receive+0x1e4>)
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003150:	68f8      	ldr	r0, [r7, #12]
 8003152:	f000 fd19 	bl	8003b88 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003156:	e05c      	b.n	8003212 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	6a39      	ldr	r1, [r7, #32]
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f000 fc41 	bl	80039e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e07c      	b.n	8003266 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003176:	b2d2      	uxtb	r2, r2
 8003178:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317e:	1c5a      	adds	r2, r3, #1
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003188:	3b01      	subs	r3, #1
 800318a:	b29a      	uxth	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003194:	b29b      	uxth	r3, r3
 8003196:	3b01      	subs	r3, #1
 8003198:	b29a      	uxth	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d034      	beq.n	8003212 <HAL_I2C_Master_Receive+0x186>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d130      	bne.n	8003212 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	6a3b      	ldr	r3, [r7, #32]
 80031b6:	2200      	movs	r2, #0
 80031b8:	2180      	movs	r1, #128	; 0x80
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 fb56 	bl	800386c <I2C_WaitOnFlagUntilTimeout>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e04d      	b.n	8003266 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	2bff      	cmp	r3, #255	; 0xff
 80031d2:	d90e      	bls.n	80031f2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	22ff      	movs	r2, #255	; 0xff
 80031d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031de:	b2da      	uxtb	r2, r3
 80031e0:	8979      	ldrh	r1, [r7, #10]
 80031e2:	2300      	movs	r3, #0
 80031e4:	9300      	str	r3, [sp, #0]
 80031e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031ea:	68f8      	ldr	r0, [r7, #12]
 80031ec:	f000 fccc 	bl	8003b88 <I2C_TransferConfig>
 80031f0:	e00f      	b.n	8003212 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003200:	b2da      	uxtb	r2, r3
 8003202:	8979      	ldrh	r1, [r7, #10]
 8003204:	2300      	movs	r3, #0
 8003206:	9300      	str	r3, [sp, #0]
 8003208:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f000 fcbb 	bl	8003b88 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	d19d      	bne.n	8003158 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800321c:	697a      	ldr	r2, [r7, #20]
 800321e:	6a39      	ldr	r1, [r7, #32]
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	f000 fba3 	bl	800396c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e01a      	b.n	8003266 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2220      	movs	r2, #32
 8003236:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6859      	ldr	r1, [r3, #4]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	4b0c      	ldr	r3, [pc, #48]	; (8003274 <HAL_I2C_Master_Receive+0x1e8>)
 8003244:	400b      	ands	r3, r1
 8003246:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2220      	movs	r2, #32
 800324c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003260:	2300      	movs	r3, #0
 8003262:	e000      	b.n	8003266 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003264:	2302      	movs	r3, #2
  }
}
 8003266:	4618      	mov	r0, r3
 8003268:	3718      	adds	r7, #24
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	80002400 	.word	0x80002400
 8003274:	fe00e800 	.word	0xfe00e800

08003278 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b088      	sub	sp, #32
 800327c:	af02      	add	r7, sp, #8
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	4608      	mov	r0, r1
 8003282:	4611      	mov	r1, r2
 8003284:	461a      	mov	r2, r3
 8003286:	4603      	mov	r3, r0
 8003288:	817b      	strh	r3, [r7, #10]
 800328a:	460b      	mov	r3, r1
 800328c:	813b      	strh	r3, [r7, #8]
 800328e:	4613      	mov	r3, r2
 8003290:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b20      	cmp	r3, #32
 800329c:	f040 80f9 	bne.w	8003492 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80032a0:	6a3b      	ldr	r3, [r7, #32]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d002      	beq.n	80032ac <HAL_I2C_Mem_Write+0x34>
 80032a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d105      	bne.n	80032b8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e0ed      	b.n	8003494 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d101      	bne.n	80032c6 <HAL_I2C_Mem_Write+0x4e>
 80032c2:	2302      	movs	r3, #2
 80032c4:	e0e6      	b.n	8003494 <HAL_I2C_Mem_Write+0x21c>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80032ce:	f7ff fa8d 	bl	80027ec <HAL_GetTick>
 80032d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	9300      	str	r3, [sp, #0]
 80032d8:	2319      	movs	r3, #25
 80032da:	2201      	movs	r2, #1
 80032dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f000 fac3 	bl	800386c <I2C_WaitOnFlagUntilTimeout>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e0d1      	b.n	8003494 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2221      	movs	r2, #33	; 0x21
 80032f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2240      	movs	r2, #64	; 0x40
 80032fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6a3a      	ldr	r2, [r7, #32]
 800330a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003310:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003318:	88f8      	ldrh	r0, [r7, #6]
 800331a:	893a      	ldrh	r2, [r7, #8]
 800331c:	8979      	ldrh	r1, [r7, #10]
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	9301      	str	r3, [sp, #4]
 8003322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	4603      	mov	r3, r0
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f000 f9d3 	bl	80036d4 <I2C_RequestMemoryWrite>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d005      	beq.n	8003340 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e0a9      	b.n	8003494 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003344:	b29b      	uxth	r3, r3
 8003346:	2bff      	cmp	r3, #255	; 0xff
 8003348:	d90e      	bls.n	8003368 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	22ff      	movs	r2, #255	; 0xff
 800334e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003354:	b2da      	uxtb	r2, r3
 8003356:	8979      	ldrh	r1, [r7, #10]
 8003358:	2300      	movs	r3, #0
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f000 fc11 	bl	8003b88 <I2C_TransferConfig>
 8003366:	e00f      	b.n	8003388 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800336c:	b29a      	uxth	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003376:	b2da      	uxtb	r2, r3
 8003378:	8979      	ldrh	r1, [r7, #10]
 800337a:	2300      	movs	r3, #0
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 fc00 	bl	8003b88 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f000 faad 	bl	80038ec <I2C_WaitOnTXISFlagUntilTimeout>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e07b      	b.n	8003494 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a0:	781a      	ldrb	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ac:	1c5a      	adds	r2, r3, #1
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	3b01      	subs	r3, #1
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c4:	3b01      	subs	r3, #1
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d034      	beq.n	8003440 <HAL_I2C_Mem_Write+0x1c8>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d130      	bne.n	8003440 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e4:	2200      	movs	r2, #0
 80033e6:	2180      	movs	r1, #128	; 0x80
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f000 fa3f 	bl	800386c <I2C_WaitOnFlagUntilTimeout>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d001      	beq.n	80033f8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e04d      	b.n	8003494 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	2bff      	cmp	r3, #255	; 0xff
 8003400:	d90e      	bls.n	8003420 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	22ff      	movs	r2, #255	; 0xff
 8003406:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800340c:	b2da      	uxtb	r2, r3
 800340e:	8979      	ldrh	r1, [r7, #10]
 8003410:	2300      	movs	r3, #0
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f000 fbb5 	bl	8003b88 <I2C_TransferConfig>
 800341e:	e00f      	b.n	8003440 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003424:	b29a      	uxth	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800342e:	b2da      	uxtb	r2, r3
 8003430:	8979      	ldrh	r1, [r7, #10]
 8003432:	2300      	movs	r3, #0
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f000 fba4 	bl	8003b88 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003444:	b29b      	uxth	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d19e      	bne.n	8003388 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 fa8c 	bl	800396c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e01a      	b.n	8003494 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2220      	movs	r2, #32
 8003464:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6859      	ldr	r1, [r3, #4]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	4b0a      	ldr	r3, [pc, #40]	; (800349c <HAL_I2C_Mem_Write+0x224>)
 8003472:	400b      	ands	r3, r1
 8003474:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2220      	movs	r2, #32
 800347a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800348e:	2300      	movs	r3, #0
 8003490:	e000      	b.n	8003494 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003492:	2302      	movs	r3, #2
  }
}
 8003494:	4618      	mov	r0, r3
 8003496:	3718      	adds	r7, #24
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	fe00e800 	.word	0xfe00e800

080034a0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b088      	sub	sp, #32
 80034a4:	af02      	add	r7, sp, #8
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	4608      	mov	r0, r1
 80034aa:	4611      	mov	r1, r2
 80034ac:	461a      	mov	r2, r3
 80034ae:	4603      	mov	r3, r0
 80034b0:	817b      	strh	r3, [r7, #10]
 80034b2:	460b      	mov	r3, r1
 80034b4:	813b      	strh	r3, [r7, #8]
 80034b6:	4613      	mov	r3, r2
 80034b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b20      	cmp	r3, #32
 80034c4:	f040 80fd 	bne.w	80036c2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80034c8:	6a3b      	ldr	r3, [r7, #32]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d002      	beq.n	80034d4 <HAL_I2C_Mem_Read+0x34>
 80034ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d105      	bne.n	80034e0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034da:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e0f1      	b.n	80036c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d101      	bne.n	80034ee <HAL_I2C_Mem_Read+0x4e>
 80034ea:	2302      	movs	r3, #2
 80034ec:	e0ea      	b.n	80036c4 <HAL_I2C_Mem_Read+0x224>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80034f6:	f7ff f979 	bl	80027ec <HAL_GetTick>
 80034fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	2319      	movs	r3, #25
 8003502:	2201      	movs	r2, #1
 8003504:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f000 f9af 	bl	800386c <I2C_WaitOnFlagUntilTimeout>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e0d5      	b.n	80036c4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2222      	movs	r2, #34	; 0x22
 800351c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2240      	movs	r2, #64	; 0x40
 8003524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6a3a      	ldr	r2, [r7, #32]
 8003532:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003538:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003540:	88f8      	ldrh	r0, [r7, #6]
 8003542:	893a      	ldrh	r2, [r7, #8]
 8003544:	8979      	ldrh	r1, [r7, #10]
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	9301      	str	r3, [sp, #4]
 800354a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	4603      	mov	r3, r0
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f000 f913 	bl	800377c <I2C_RequestMemoryRead>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d005      	beq.n	8003568 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e0ad      	b.n	80036c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800356c:	b29b      	uxth	r3, r3
 800356e:	2bff      	cmp	r3, #255	; 0xff
 8003570:	d90e      	bls.n	8003590 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	22ff      	movs	r2, #255	; 0xff
 8003576:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800357c:	b2da      	uxtb	r2, r3
 800357e:	8979      	ldrh	r1, [r7, #10]
 8003580:	4b52      	ldr	r3, [pc, #328]	; (80036cc <HAL_I2C_Mem_Read+0x22c>)
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 fafd 	bl	8003b88 <I2C_TransferConfig>
 800358e:	e00f      	b.n	80035b0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003594:	b29a      	uxth	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800359e:	b2da      	uxtb	r2, r3
 80035a0:	8979      	ldrh	r1, [r7, #10]
 80035a2:	4b4a      	ldr	r3, [pc, #296]	; (80036cc <HAL_I2C_Mem_Read+0x22c>)
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f000 faec 	bl	8003b88 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b6:	2200      	movs	r2, #0
 80035b8:	2104      	movs	r1, #4
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f000 f956 	bl	800386c <I2C_WaitOnFlagUntilTimeout>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e07c      	b.n	80036c4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	b2d2      	uxtb	r2, r2
 80035d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035dc:	1c5a      	adds	r2, r3, #1
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e6:	3b01      	subs	r3, #1
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	3b01      	subs	r3, #1
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003600:	b29b      	uxth	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d034      	beq.n	8003670 <HAL_I2C_Mem_Read+0x1d0>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800360a:	2b00      	cmp	r3, #0
 800360c:	d130      	bne.n	8003670 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003614:	2200      	movs	r2, #0
 8003616:	2180      	movs	r1, #128	; 0x80
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f000 f927 	bl	800386c <I2C_WaitOnFlagUntilTimeout>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e04d      	b.n	80036c4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362c:	b29b      	uxth	r3, r3
 800362e:	2bff      	cmp	r3, #255	; 0xff
 8003630:	d90e      	bls.n	8003650 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	22ff      	movs	r2, #255	; 0xff
 8003636:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800363c:	b2da      	uxtb	r2, r3
 800363e:	8979      	ldrh	r1, [r7, #10]
 8003640:	2300      	movs	r3, #0
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f000 fa9d 	bl	8003b88 <I2C_TransferConfig>
 800364e:	e00f      	b.n	8003670 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003654:	b29a      	uxth	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800365e:	b2da      	uxtb	r2, r3
 8003660:	8979      	ldrh	r1, [r7, #10]
 8003662:	2300      	movs	r3, #0
 8003664:	9300      	str	r3, [sp, #0]
 8003666:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f000 fa8c 	bl	8003b88 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003674:	b29b      	uxth	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d19a      	bne.n	80035b0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f000 f974 	bl	800396c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e01a      	b.n	80036c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2220      	movs	r2, #32
 8003694:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6859      	ldr	r1, [r3, #4]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	4b0b      	ldr	r3, [pc, #44]	; (80036d0 <HAL_I2C_Mem_Read+0x230>)
 80036a2:	400b      	ands	r3, r1
 80036a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2220      	movs	r2, #32
 80036aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036be:	2300      	movs	r3, #0
 80036c0:	e000      	b.n	80036c4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80036c2:	2302      	movs	r3, #2
  }
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3718      	adds	r7, #24
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	80002400 	.word	0x80002400
 80036d0:	fe00e800 	.word	0xfe00e800

080036d4 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af02      	add	r7, sp, #8
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	4608      	mov	r0, r1
 80036de:	4611      	mov	r1, r2
 80036e0:	461a      	mov	r2, r3
 80036e2:	4603      	mov	r3, r0
 80036e4:	817b      	strh	r3, [r7, #10]
 80036e6:	460b      	mov	r3, r1
 80036e8:	813b      	strh	r3, [r7, #8]
 80036ea:	4613      	mov	r3, r2
 80036ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80036ee:	88fb      	ldrh	r3, [r7, #6]
 80036f0:	b2da      	uxtb	r2, r3
 80036f2:	8979      	ldrh	r1, [r7, #10]
 80036f4:	4b20      	ldr	r3, [pc, #128]	; (8003778 <I2C_RequestMemoryWrite+0xa4>)
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f000 fa43 	bl	8003b88 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003702:	69fa      	ldr	r2, [r7, #28]
 8003704:	69b9      	ldr	r1, [r7, #24]
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f000 f8f0 	bl	80038ec <I2C_WaitOnTXISFlagUntilTimeout>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e02c      	b.n	8003770 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003716:	88fb      	ldrh	r3, [r7, #6]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d105      	bne.n	8003728 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800371c:	893b      	ldrh	r3, [r7, #8]
 800371e:	b2da      	uxtb	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	629a      	str	r2, [r3, #40]	; 0x28
 8003726:	e015      	b.n	8003754 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003728:	893b      	ldrh	r3, [r7, #8]
 800372a:	0a1b      	lsrs	r3, r3, #8
 800372c:	b29b      	uxth	r3, r3
 800372e:	b2da      	uxtb	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003736:	69fa      	ldr	r2, [r7, #28]
 8003738:	69b9      	ldr	r1, [r7, #24]
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 f8d6 	bl	80038ec <I2C_WaitOnTXISFlagUntilTimeout>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e012      	b.n	8003770 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800374a:	893b      	ldrh	r3, [r7, #8]
 800374c:	b2da      	uxtb	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	2200      	movs	r2, #0
 800375c:	2180      	movs	r1, #128	; 0x80
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f000 f884 	bl	800386c <I2C_WaitOnFlagUntilTimeout>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e000      	b.n	8003770 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	80002000 	.word	0x80002000

0800377c <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af02      	add	r7, sp, #8
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	4608      	mov	r0, r1
 8003786:	4611      	mov	r1, r2
 8003788:	461a      	mov	r2, r3
 800378a:	4603      	mov	r3, r0
 800378c:	817b      	strh	r3, [r7, #10]
 800378e:	460b      	mov	r3, r1
 8003790:	813b      	strh	r3, [r7, #8]
 8003792:	4613      	mov	r3, r2
 8003794:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003796:	88fb      	ldrh	r3, [r7, #6]
 8003798:	b2da      	uxtb	r2, r3
 800379a:	8979      	ldrh	r1, [r7, #10]
 800379c:	4b20      	ldr	r3, [pc, #128]	; (8003820 <I2C_RequestMemoryRead+0xa4>)
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	2300      	movs	r3, #0
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 f9f0 	bl	8003b88 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037a8:	69fa      	ldr	r2, [r7, #28]
 80037aa:	69b9      	ldr	r1, [r7, #24]
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f000 f89d 	bl	80038ec <I2C_WaitOnTXISFlagUntilTimeout>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e02c      	b.n	8003816 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80037bc:	88fb      	ldrh	r3, [r7, #6]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d105      	bne.n	80037ce <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80037c2:	893b      	ldrh	r3, [r7, #8]
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	629a      	str	r2, [r3, #40]	; 0x28
 80037cc:	e015      	b.n	80037fa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80037ce:	893b      	ldrh	r3, [r7, #8]
 80037d0:	0a1b      	lsrs	r3, r3, #8
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037dc:	69fa      	ldr	r2, [r7, #28]
 80037de:	69b9      	ldr	r1, [r7, #24]
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f000 f883 	bl	80038ec <I2C_WaitOnTXISFlagUntilTimeout>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e012      	b.n	8003816 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80037f0:	893b      	ldrh	r3, [r7, #8]
 80037f2:	b2da      	uxtb	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	2200      	movs	r2, #0
 8003802:	2140      	movs	r1, #64	; 0x40
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 f831 	bl	800386c <I2C_WaitOnFlagUntilTimeout>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d001      	beq.n	8003814 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e000      	b.n	8003816 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	80002000 	.word	0x80002000

08003824 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b02      	cmp	r3, #2
 8003838:	d103      	bne.n	8003842 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2200      	movs	r2, #0
 8003840:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b01      	cmp	r3, #1
 800384e:	d007      	beq.n	8003860 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	699a      	ldr	r2, [r3, #24]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f042 0201 	orr.w	r2, r2, #1
 800385e:	619a      	str	r2, [r3, #24]
  }
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	603b      	str	r3, [r7, #0]
 8003878:	4613      	mov	r3, r2
 800387a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800387c:	e022      	b.n	80038c4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003884:	d01e      	beq.n	80038c4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003886:	f7fe ffb1 	bl	80027ec <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	429a      	cmp	r2, r3
 8003894:	d302      	bcc.n	800389c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d113      	bne.n	80038c4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a0:	f043 0220 	orr.w	r2, r3, #32
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2220      	movs	r2, #32
 80038ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e00f      	b.n	80038e4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	699a      	ldr	r2, [r3, #24]
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	4013      	ands	r3, r2
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	bf0c      	ite	eq
 80038d4:	2301      	moveq	r3, #1
 80038d6:	2300      	movne	r3, #0
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	461a      	mov	r2, r3
 80038dc:	79fb      	ldrb	r3, [r7, #7]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d0cd      	beq.n	800387e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80038f8:	e02c      	b.n	8003954 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	68b9      	ldr	r1, [r7, #8]
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f000 f8dc 	bl	8003abc <I2C_IsAcknowledgeFailed>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e02a      	b.n	8003964 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003914:	d01e      	beq.n	8003954 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003916:	f7fe ff69 	bl	80027ec <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	68ba      	ldr	r2, [r7, #8]
 8003922:	429a      	cmp	r2, r3
 8003924:	d302      	bcc.n	800392c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d113      	bne.n	8003954 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003930:	f043 0220 	orr.w	r2, r3, #32
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2220      	movs	r2, #32
 800393c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e007      	b.n	8003964 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b02      	cmp	r3, #2
 8003960:	d1cb      	bne.n	80038fa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003978:	e028      	b.n	80039cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	68b9      	ldr	r1, [r7, #8]
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f000 f89c 	bl	8003abc <I2C_IsAcknowledgeFailed>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e026      	b.n	80039dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800398e:	f7fe ff2d 	bl	80027ec <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	429a      	cmp	r2, r3
 800399c:	d302      	bcc.n	80039a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d113      	bne.n	80039cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a8:	f043 0220 	orr.w	r2, r3, #32
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2220      	movs	r2, #32
 80039b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e007      	b.n	80039dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	f003 0320 	and.w	r3, r3, #32
 80039d6:	2b20      	cmp	r3, #32
 80039d8:	d1cf      	bne.n	800397a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039f0:	e055      	b.n	8003a9e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	68b9      	ldr	r1, [r7, #8]
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f000 f860 	bl	8003abc <I2C_IsAcknowledgeFailed>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e053      	b.n	8003aae <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	f003 0320 	and.w	r3, r3, #32
 8003a10:	2b20      	cmp	r3, #32
 8003a12:	d129      	bne.n	8003a68 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	f003 0304 	and.w	r3, r3, #4
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	d105      	bne.n	8003a2e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	e03f      	b.n	8003aae <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2220      	movs	r2, #32
 8003a34:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	6859      	ldr	r1, [r3, #4]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	4b1d      	ldr	r3, [pc, #116]	; (8003ab8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003a42:	400b      	ands	r3, r1
 8003a44:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e022      	b.n	8003aae <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a68:	f7fe fec0 	bl	80027ec <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d302      	bcc.n	8003a7e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10f      	bne.n	8003a9e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a82:	f043 0220 	orr.w	r2, r3, #32
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2220      	movs	r2, #32
 8003a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e007      	b.n	8003aae <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	f003 0304 	and.w	r3, r3, #4
 8003aa8:	2b04      	cmp	r3, #4
 8003aaa:	d1a2      	bne.n	80039f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	fe00e800 	.word	0xfe00e800

08003abc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	f003 0310 	and.w	r3, r3, #16
 8003ad2:	2b10      	cmp	r3, #16
 8003ad4:	d151      	bne.n	8003b7a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ad6:	e022      	b.n	8003b1e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ade:	d01e      	beq.n	8003b1e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ae0:	f7fe fe84 	bl	80027ec <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	68ba      	ldr	r2, [r7, #8]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d302      	bcc.n	8003af6 <I2C_IsAcknowledgeFailed+0x3a>
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d113      	bne.n	8003b1e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afa:	f043 0220 	orr.w	r2, r3, #32
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2220      	movs	r2, #32
 8003b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e02e      	b.n	8003b7c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	f003 0320 	and.w	r3, r3, #32
 8003b28:	2b20      	cmp	r3, #32
 8003b2a:	d1d5      	bne.n	8003ad8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2210      	movs	r2, #16
 8003b32:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2220      	movs	r2, #32
 8003b3a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f7ff fe71 	bl	8003824 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6859      	ldr	r1, [r3, #4]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	4b0d      	ldr	r3, [pc, #52]	; (8003b84 <I2C_IsAcknowledgeFailed+0xc8>)
 8003b4e:	400b      	ands	r3, r1
 8003b50:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b56:	f043 0204 	orr.w	r2, r3, #4
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2220      	movs	r2, #32
 8003b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e000      	b.n	8003b7c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	fe00e800 	.word	0xfe00e800

08003b88 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	607b      	str	r3, [r7, #4]
 8003b92:	460b      	mov	r3, r1
 8003b94:	817b      	strh	r3, [r7, #10]
 8003b96:	4613      	mov	r3, r2
 8003b98:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	0d5b      	lsrs	r3, r3, #21
 8003ba4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003ba8:	4b0d      	ldr	r3, [pc, #52]	; (8003be0 <I2C_TransferConfig+0x58>)
 8003baa:	430b      	orrs	r3, r1
 8003bac:	43db      	mvns	r3, r3
 8003bae:	ea02 0103 	and.w	r1, r2, r3
 8003bb2:	897b      	ldrh	r3, [r7, #10]
 8003bb4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003bb8:	7a7b      	ldrb	r3, [r7, #9]
 8003bba:	041b      	lsls	r3, r3, #16
 8003bbc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003bd2:	bf00      	nop
 8003bd4:	3714      	adds	r7, #20
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	03ff63ff 	.word	0x03ff63ff

08003be4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b20      	cmp	r3, #32
 8003bf8:	d138      	bne.n	8003c6c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d101      	bne.n	8003c08 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c04:	2302      	movs	r3, #2
 8003c06:	e032      	b.n	8003c6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2224      	movs	r2, #36	; 0x24
 8003c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 0201 	bic.w	r2, r2, #1
 8003c26:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c36:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	6819      	ldr	r1, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f042 0201 	orr.w	r2, r2, #1
 8003c56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	e000      	b.n	8003c6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c6c:	2302      	movs	r3, #2
  }
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b085      	sub	sp, #20
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
 8003c82:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2b20      	cmp	r3, #32
 8003c8e:	d139      	bne.n	8003d04 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d101      	bne.n	8003c9e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	e033      	b.n	8003d06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2224      	movs	r2, #36	; 0x24
 8003caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 0201 	bic.w	r2, r2, #1
 8003cbc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ccc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	021b      	lsls	r3, r3, #8
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f042 0201 	orr.w	r2, r2, #1
 8003cee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d00:	2300      	movs	r3, #0
 8003d02:	e000      	b.n	8003d06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d04:	2302      	movs	r3, #2
  }
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
	...

08003d14 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003d18:	4b04      	ldr	r3, [pc, #16]	; (8003d2c <HAL_PWREx_GetVoltageRange+0x18>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	40007000 	.word	0x40007000

08003d30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d3e:	d130      	bne.n	8003da2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d40:	4b23      	ldr	r3, [pc, #140]	; (8003dd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d4c:	d038      	beq.n	8003dc0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d4e:	4b20      	ldr	r3, [pc, #128]	; (8003dd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d56:	4a1e      	ldr	r2, [pc, #120]	; (8003dd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d5c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d5e:	4b1d      	ldr	r3, [pc, #116]	; (8003dd4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2232      	movs	r2, #50	; 0x32
 8003d64:	fb02 f303 	mul.w	r3, r2, r3
 8003d68:	4a1b      	ldr	r2, [pc, #108]	; (8003dd8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6e:	0c9b      	lsrs	r3, r3, #18
 8003d70:	3301      	adds	r3, #1
 8003d72:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d74:	e002      	b.n	8003d7c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d7c:	4b14      	ldr	r3, [pc, #80]	; (8003dd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d88:	d102      	bne.n	8003d90 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1f2      	bne.n	8003d76 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d90:	4b0f      	ldr	r3, [pc, #60]	; (8003dd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d9c:	d110      	bne.n	8003dc0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e00f      	b.n	8003dc2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003da2:	4b0b      	ldr	r3, [pc, #44]	; (8003dd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003daa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dae:	d007      	beq.n	8003dc0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003db0:	4b07      	ldr	r3, [pc, #28]	; (8003dd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003db8:	4a05      	ldr	r2, [pc, #20]	; (8003dd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dbe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3714      	adds	r7, #20
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	40007000 	.word	0x40007000
 8003dd4:	20000008 	.word	0x20000008
 8003dd8:	431bde83 	.word	0x431bde83

08003ddc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b088      	sub	sp, #32
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e3d4      	b.n	8004598 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dee:	4ba1      	ldr	r3, [pc, #644]	; (8004074 <HAL_RCC_OscConfig+0x298>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f003 030c 	and.w	r3, r3, #12
 8003df6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003df8:	4b9e      	ldr	r3, [pc, #632]	; (8004074 <HAL_RCC_OscConfig+0x298>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	f003 0303 	and.w	r3, r3, #3
 8003e00:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0310 	and.w	r3, r3, #16
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 80e4 	beq.w	8003fd8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d007      	beq.n	8003e26 <HAL_RCC_OscConfig+0x4a>
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	2b0c      	cmp	r3, #12
 8003e1a:	f040 808b 	bne.w	8003f34 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	f040 8087 	bne.w	8003f34 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e26:	4b93      	ldr	r3, [pc, #588]	; (8004074 <HAL_RCC_OscConfig+0x298>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d005      	beq.n	8003e3e <HAL_RCC_OscConfig+0x62>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e3ac      	b.n	8004598 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a1a      	ldr	r2, [r3, #32]
 8003e42:	4b8c      	ldr	r3, [pc, #560]	; (8004074 <HAL_RCC_OscConfig+0x298>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0308 	and.w	r3, r3, #8
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d004      	beq.n	8003e58 <HAL_RCC_OscConfig+0x7c>
 8003e4e:	4b89      	ldr	r3, [pc, #548]	; (8004074 <HAL_RCC_OscConfig+0x298>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e56:	e005      	b.n	8003e64 <HAL_RCC_OscConfig+0x88>
 8003e58:	4b86      	ldr	r3, [pc, #536]	; (8004074 <HAL_RCC_OscConfig+0x298>)
 8003e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e5e:	091b      	lsrs	r3, r3, #4
 8003e60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d223      	bcs.n	8003eb0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f000 fd41 	bl	80048f4 <RCC_SetFlashLatencyFromMSIRange>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e38d      	b.n	8004598 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e7c:	4b7d      	ldr	r3, [pc, #500]	; (8004074 <HAL_RCC_OscConfig+0x298>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a7c      	ldr	r2, [pc, #496]	; (8004074 <HAL_RCC_OscConfig+0x298>)
 8003e82:	f043 0308 	orr.w	r3, r3, #8
 8003e86:	6013      	str	r3, [r2, #0]
 8003e88:	4b7a      	ldr	r3, [pc, #488]	; (8004074 <HAL_RCC_OscConfig+0x298>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a1b      	ldr	r3, [r3, #32]
 8003e94:	4977      	ldr	r1, [pc, #476]	; (8004074 <HAL_RCC_OscConfig+0x298>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e9a:	4b76      	ldr	r3, [pc, #472]	; (8004074 <HAL_RCC_OscConfig+0x298>)
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	69db      	ldr	r3, [r3, #28]
 8003ea6:	021b      	lsls	r3, r3, #8
 8003ea8:	4972      	ldr	r1, [pc, #456]	; (8004074 <HAL_RCC_OscConfig+0x298>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	604b      	str	r3, [r1, #4]
 8003eae:	e025      	b.n	8003efc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003eb0:	4b70      	ldr	r3, [pc, #448]	; (8004074 <HAL_RCC_OscConfig+0x298>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a6f      	ldr	r2, [pc, #444]	; (8004074 <HAL_RCC_OscConfig+0x298>)
 8003eb6:	f043 0308 	orr.w	r3, r3, #8
 8003eba:	6013      	str	r3, [r2, #0]
 8003ebc:	4b6d      	ldr	r3, [pc, #436]	; (8004074 <HAL_RCC_OscConfig+0x298>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
 8003ec8:	496a      	ldr	r1, [pc, #424]	; (8004074 <HAL_RCC_OscConfig+0x298>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ece:	4b69      	ldr	r3, [pc, #420]	; (8004074 <HAL_RCC_OscConfig+0x298>)
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	021b      	lsls	r3, r3, #8
 8003edc:	4965      	ldr	r1, [pc, #404]	; (8004074 <HAL_RCC_OscConfig+0x298>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d109      	bne.n	8003efc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 fd01 	bl	80048f4 <RCC_SetFlashLatencyFromMSIRange>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d001      	beq.n	8003efc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e34d      	b.n	8004598 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003efc:	f000 fc36 	bl	800476c <HAL_RCC_GetSysClockFreq>
 8003f00:	4602      	mov	r2, r0
 8003f02:	4b5c      	ldr	r3, [pc, #368]	; (8004074 <HAL_RCC_OscConfig+0x298>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	091b      	lsrs	r3, r3, #4
 8003f08:	f003 030f 	and.w	r3, r3, #15
 8003f0c:	495a      	ldr	r1, [pc, #360]	; (8004078 <HAL_RCC_OscConfig+0x29c>)
 8003f0e:	5ccb      	ldrb	r3, [r1, r3]
 8003f10:	f003 031f 	and.w	r3, r3, #31
 8003f14:	fa22 f303 	lsr.w	r3, r2, r3
 8003f18:	4a58      	ldr	r2, [pc, #352]	; (800407c <HAL_RCC_OscConfig+0x2a0>)
 8003f1a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f1c:	4b58      	ldr	r3, [pc, #352]	; (8004080 <HAL_RCC_OscConfig+0x2a4>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7fe fc13 	bl	800274c <HAL_InitTick>
 8003f26:	4603      	mov	r3, r0
 8003f28:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003f2a:	7bfb      	ldrb	r3, [r7, #15]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d052      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003f30:	7bfb      	ldrb	r3, [r7, #15]
 8003f32:	e331      	b.n	8004598 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d032      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f3c:	4b4d      	ldr	r3, [pc, #308]	; (8004074 <HAL_RCC_OscConfig+0x298>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a4c      	ldr	r2, [pc, #304]	; (8004074 <HAL_RCC_OscConfig+0x298>)
 8003f42:	f043 0301 	orr.w	r3, r3, #1
 8003f46:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f48:	f7fe fc50 	bl	80027ec <HAL_GetTick>
 8003f4c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f4e:	e008      	b.n	8003f62 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f50:	f7fe fc4c 	bl	80027ec <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e31a      	b.n	8004598 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f62:	4b44      	ldr	r3, [pc, #272]	; (8004074 <HAL_RCC_OscConfig+0x298>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d0f0      	beq.n	8003f50 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f6e:	4b41      	ldr	r3, [pc, #260]	; (8004074 <HAL_RCC_OscConfig+0x298>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a40      	ldr	r2, [pc, #256]	; (8004074 <HAL_RCC_OscConfig+0x298>)
 8003f74:	f043 0308 	orr.w	r3, r3, #8
 8003f78:	6013      	str	r3, [r2, #0]
 8003f7a:	4b3e      	ldr	r3, [pc, #248]	; (8004074 <HAL_RCC_OscConfig+0x298>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	493b      	ldr	r1, [pc, #236]	; (8004074 <HAL_RCC_OscConfig+0x298>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f8c:	4b39      	ldr	r3, [pc, #228]	; (8004074 <HAL_RCC_OscConfig+0x298>)
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	69db      	ldr	r3, [r3, #28]
 8003f98:	021b      	lsls	r3, r3, #8
 8003f9a:	4936      	ldr	r1, [pc, #216]	; (8004074 <HAL_RCC_OscConfig+0x298>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	604b      	str	r3, [r1, #4]
 8003fa0:	e01a      	b.n	8003fd8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003fa2:	4b34      	ldr	r3, [pc, #208]	; (8004074 <HAL_RCC_OscConfig+0x298>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a33      	ldr	r2, [pc, #204]	; (8004074 <HAL_RCC_OscConfig+0x298>)
 8003fa8:	f023 0301 	bic.w	r3, r3, #1
 8003fac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003fae:	f7fe fc1d 	bl	80027ec <HAL_GetTick>
 8003fb2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fb4:	e008      	b.n	8003fc8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fb6:	f7fe fc19 	bl	80027ec <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d901      	bls.n	8003fc8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e2e7      	b.n	8004598 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fc8:	4b2a      	ldr	r3, [pc, #168]	; (8004074 <HAL_RCC_OscConfig+0x298>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1f0      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x1da>
 8003fd4:	e000      	b.n	8003fd8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003fd6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d074      	beq.n	80040ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	2b08      	cmp	r3, #8
 8003fe8:	d005      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x21a>
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	2b0c      	cmp	r3, #12
 8003fee:	d10e      	bne.n	800400e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	2b03      	cmp	r3, #3
 8003ff4:	d10b      	bne.n	800400e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ff6:	4b1f      	ldr	r3, [pc, #124]	; (8004074 <HAL_RCC_OscConfig+0x298>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d064      	beq.n	80040cc <HAL_RCC_OscConfig+0x2f0>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d160      	bne.n	80040cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e2c4      	b.n	8004598 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004016:	d106      	bne.n	8004026 <HAL_RCC_OscConfig+0x24a>
 8004018:	4b16      	ldr	r3, [pc, #88]	; (8004074 <HAL_RCC_OscConfig+0x298>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a15      	ldr	r2, [pc, #84]	; (8004074 <HAL_RCC_OscConfig+0x298>)
 800401e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004022:	6013      	str	r3, [r2, #0]
 8004024:	e01d      	b.n	8004062 <HAL_RCC_OscConfig+0x286>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800402e:	d10c      	bne.n	800404a <HAL_RCC_OscConfig+0x26e>
 8004030:	4b10      	ldr	r3, [pc, #64]	; (8004074 <HAL_RCC_OscConfig+0x298>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a0f      	ldr	r2, [pc, #60]	; (8004074 <HAL_RCC_OscConfig+0x298>)
 8004036:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800403a:	6013      	str	r3, [r2, #0]
 800403c:	4b0d      	ldr	r3, [pc, #52]	; (8004074 <HAL_RCC_OscConfig+0x298>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a0c      	ldr	r2, [pc, #48]	; (8004074 <HAL_RCC_OscConfig+0x298>)
 8004042:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004046:	6013      	str	r3, [r2, #0]
 8004048:	e00b      	b.n	8004062 <HAL_RCC_OscConfig+0x286>
 800404a:	4b0a      	ldr	r3, [pc, #40]	; (8004074 <HAL_RCC_OscConfig+0x298>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a09      	ldr	r2, [pc, #36]	; (8004074 <HAL_RCC_OscConfig+0x298>)
 8004050:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004054:	6013      	str	r3, [r2, #0]
 8004056:	4b07      	ldr	r3, [pc, #28]	; (8004074 <HAL_RCC_OscConfig+0x298>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a06      	ldr	r2, [pc, #24]	; (8004074 <HAL_RCC_OscConfig+0x298>)
 800405c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004060:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d01c      	beq.n	80040a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406a:	f7fe fbbf 	bl	80027ec <HAL_GetTick>
 800406e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004070:	e011      	b.n	8004096 <HAL_RCC_OscConfig+0x2ba>
 8004072:	bf00      	nop
 8004074:	40021000 	.word	0x40021000
 8004078:	0800741c 	.word	0x0800741c
 800407c:	20000008 	.word	0x20000008
 8004080:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004084:	f7fe fbb2 	bl	80027ec <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b64      	cmp	r3, #100	; 0x64
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e280      	b.n	8004598 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004096:	4baf      	ldr	r3, [pc, #700]	; (8004354 <HAL_RCC_OscConfig+0x578>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0f0      	beq.n	8004084 <HAL_RCC_OscConfig+0x2a8>
 80040a2:	e014      	b.n	80040ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a4:	f7fe fba2 	bl	80027ec <HAL_GetTick>
 80040a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040aa:	e008      	b.n	80040be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040ac:	f7fe fb9e 	bl	80027ec <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b64      	cmp	r3, #100	; 0x64
 80040b8:	d901      	bls.n	80040be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e26c      	b.n	8004598 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040be:	4ba5      	ldr	r3, [pc, #660]	; (8004354 <HAL_RCC_OscConfig+0x578>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1f0      	bne.n	80040ac <HAL_RCC_OscConfig+0x2d0>
 80040ca:	e000      	b.n	80040ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d060      	beq.n	800419c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	2b04      	cmp	r3, #4
 80040de:	d005      	beq.n	80040ec <HAL_RCC_OscConfig+0x310>
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	2b0c      	cmp	r3, #12
 80040e4:	d119      	bne.n	800411a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d116      	bne.n	800411a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040ec:	4b99      	ldr	r3, [pc, #612]	; (8004354 <HAL_RCC_OscConfig+0x578>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d005      	beq.n	8004104 <HAL_RCC_OscConfig+0x328>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d101      	bne.n	8004104 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e249      	b.n	8004598 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004104:	4b93      	ldr	r3, [pc, #588]	; (8004354 <HAL_RCC_OscConfig+0x578>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	061b      	lsls	r3, r3, #24
 8004112:	4990      	ldr	r1, [pc, #576]	; (8004354 <HAL_RCC_OscConfig+0x578>)
 8004114:	4313      	orrs	r3, r2
 8004116:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004118:	e040      	b.n	800419c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d023      	beq.n	800416a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004122:	4b8c      	ldr	r3, [pc, #560]	; (8004354 <HAL_RCC_OscConfig+0x578>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a8b      	ldr	r2, [pc, #556]	; (8004354 <HAL_RCC_OscConfig+0x578>)
 8004128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800412c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800412e:	f7fe fb5d 	bl	80027ec <HAL_GetTick>
 8004132:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004134:	e008      	b.n	8004148 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004136:	f7fe fb59 	bl	80027ec <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b02      	cmp	r3, #2
 8004142:	d901      	bls.n	8004148 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e227      	b.n	8004598 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004148:	4b82      	ldr	r3, [pc, #520]	; (8004354 <HAL_RCC_OscConfig+0x578>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004150:	2b00      	cmp	r3, #0
 8004152:	d0f0      	beq.n	8004136 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004154:	4b7f      	ldr	r3, [pc, #508]	; (8004354 <HAL_RCC_OscConfig+0x578>)
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	061b      	lsls	r3, r3, #24
 8004162:	497c      	ldr	r1, [pc, #496]	; (8004354 <HAL_RCC_OscConfig+0x578>)
 8004164:	4313      	orrs	r3, r2
 8004166:	604b      	str	r3, [r1, #4]
 8004168:	e018      	b.n	800419c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800416a:	4b7a      	ldr	r3, [pc, #488]	; (8004354 <HAL_RCC_OscConfig+0x578>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a79      	ldr	r2, [pc, #484]	; (8004354 <HAL_RCC_OscConfig+0x578>)
 8004170:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004174:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004176:	f7fe fb39 	bl	80027ec <HAL_GetTick>
 800417a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800417c:	e008      	b.n	8004190 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800417e:	f7fe fb35 	bl	80027ec <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d901      	bls.n	8004190 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e203      	b.n	8004598 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004190:	4b70      	ldr	r3, [pc, #448]	; (8004354 <HAL_RCC_OscConfig+0x578>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1f0      	bne.n	800417e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0308 	and.w	r3, r3, #8
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d03c      	beq.n	8004222 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	695b      	ldr	r3, [r3, #20]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d01c      	beq.n	80041ea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041b0:	4b68      	ldr	r3, [pc, #416]	; (8004354 <HAL_RCC_OscConfig+0x578>)
 80041b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041b6:	4a67      	ldr	r2, [pc, #412]	; (8004354 <HAL_RCC_OscConfig+0x578>)
 80041b8:	f043 0301 	orr.w	r3, r3, #1
 80041bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c0:	f7fe fb14 	bl	80027ec <HAL_GetTick>
 80041c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041c6:	e008      	b.n	80041da <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041c8:	f7fe fb10 	bl	80027ec <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e1de      	b.n	8004598 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041da:	4b5e      	ldr	r3, [pc, #376]	; (8004354 <HAL_RCC_OscConfig+0x578>)
 80041dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d0ef      	beq.n	80041c8 <HAL_RCC_OscConfig+0x3ec>
 80041e8:	e01b      	b.n	8004222 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041ea:	4b5a      	ldr	r3, [pc, #360]	; (8004354 <HAL_RCC_OscConfig+0x578>)
 80041ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041f0:	4a58      	ldr	r2, [pc, #352]	; (8004354 <HAL_RCC_OscConfig+0x578>)
 80041f2:	f023 0301 	bic.w	r3, r3, #1
 80041f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041fa:	f7fe faf7 	bl	80027ec <HAL_GetTick>
 80041fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004200:	e008      	b.n	8004214 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004202:	f7fe faf3 	bl	80027ec <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	2b02      	cmp	r3, #2
 800420e:	d901      	bls.n	8004214 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e1c1      	b.n	8004598 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004214:	4b4f      	ldr	r3, [pc, #316]	; (8004354 <HAL_RCC_OscConfig+0x578>)
 8004216:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1ef      	bne.n	8004202 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0304 	and.w	r3, r3, #4
 800422a:	2b00      	cmp	r3, #0
 800422c:	f000 80a6 	beq.w	800437c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004230:	2300      	movs	r3, #0
 8004232:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004234:	4b47      	ldr	r3, [pc, #284]	; (8004354 <HAL_RCC_OscConfig+0x578>)
 8004236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10d      	bne.n	800425c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004240:	4b44      	ldr	r3, [pc, #272]	; (8004354 <HAL_RCC_OscConfig+0x578>)
 8004242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004244:	4a43      	ldr	r2, [pc, #268]	; (8004354 <HAL_RCC_OscConfig+0x578>)
 8004246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800424a:	6593      	str	r3, [r2, #88]	; 0x58
 800424c:	4b41      	ldr	r3, [pc, #260]	; (8004354 <HAL_RCC_OscConfig+0x578>)
 800424e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004254:	60bb      	str	r3, [r7, #8]
 8004256:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004258:	2301      	movs	r3, #1
 800425a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800425c:	4b3e      	ldr	r3, [pc, #248]	; (8004358 <HAL_RCC_OscConfig+0x57c>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004264:	2b00      	cmp	r3, #0
 8004266:	d118      	bne.n	800429a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004268:	4b3b      	ldr	r3, [pc, #236]	; (8004358 <HAL_RCC_OscConfig+0x57c>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a3a      	ldr	r2, [pc, #232]	; (8004358 <HAL_RCC_OscConfig+0x57c>)
 800426e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004272:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004274:	f7fe faba 	bl	80027ec <HAL_GetTick>
 8004278:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800427a:	e008      	b.n	800428e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800427c:	f7fe fab6 	bl	80027ec <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e184      	b.n	8004598 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800428e:	4b32      	ldr	r3, [pc, #200]	; (8004358 <HAL_RCC_OscConfig+0x57c>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004296:	2b00      	cmp	r3, #0
 8004298:	d0f0      	beq.n	800427c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d108      	bne.n	80042b4 <HAL_RCC_OscConfig+0x4d8>
 80042a2:	4b2c      	ldr	r3, [pc, #176]	; (8004354 <HAL_RCC_OscConfig+0x578>)
 80042a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a8:	4a2a      	ldr	r2, [pc, #168]	; (8004354 <HAL_RCC_OscConfig+0x578>)
 80042aa:	f043 0301 	orr.w	r3, r3, #1
 80042ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042b2:	e024      	b.n	80042fe <HAL_RCC_OscConfig+0x522>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	2b05      	cmp	r3, #5
 80042ba:	d110      	bne.n	80042de <HAL_RCC_OscConfig+0x502>
 80042bc:	4b25      	ldr	r3, [pc, #148]	; (8004354 <HAL_RCC_OscConfig+0x578>)
 80042be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c2:	4a24      	ldr	r2, [pc, #144]	; (8004354 <HAL_RCC_OscConfig+0x578>)
 80042c4:	f043 0304 	orr.w	r3, r3, #4
 80042c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042cc:	4b21      	ldr	r3, [pc, #132]	; (8004354 <HAL_RCC_OscConfig+0x578>)
 80042ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d2:	4a20      	ldr	r2, [pc, #128]	; (8004354 <HAL_RCC_OscConfig+0x578>)
 80042d4:	f043 0301 	orr.w	r3, r3, #1
 80042d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042dc:	e00f      	b.n	80042fe <HAL_RCC_OscConfig+0x522>
 80042de:	4b1d      	ldr	r3, [pc, #116]	; (8004354 <HAL_RCC_OscConfig+0x578>)
 80042e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e4:	4a1b      	ldr	r2, [pc, #108]	; (8004354 <HAL_RCC_OscConfig+0x578>)
 80042e6:	f023 0301 	bic.w	r3, r3, #1
 80042ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042ee:	4b19      	ldr	r3, [pc, #100]	; (8004354 <HAL_RCC_OscConfig+0x578>)
 80042f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f4:	4a17      	ldr	r2, [pc, #92]	; (8004354 <HAL_RCC_OscConfig+0x578>)
 80042f6:	f023 0304 	bic.w	r3, r3, #4
 80042fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d016      	beq.n	8004334 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004306:	f7fe fa71 	bl	80027ec <HAL_GetTick>
 800430a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800430c:	e00a      	b.n	8004324 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800430e:	f7fe fa6d 	bl	80027ec <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	f241 3288 	movw	r2, #5000	; 0x1388
 800431c:	4293      	cmp	r3, r2
 800431e:	d901      	bls.n	8004324 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e139      	b.n	8004598 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004324:	4b0b      	ldr	r3, [pc, #44]	; (8004354 <HAL_RCC_OscConfig+0x578>)
 8004326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800432a:	f003 0302 	and.w	r3, r3, #2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d0ed      	beq.n	800430e <HAL_RCC_OscConfig+0x532>
 8004332:	e01a      	b.n	800436a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004334:	f7fe fa5a 	bl	80027ec <HAL_GetTick>
 8004338:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800433a:	e00f      	b.n	800435c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800433c:	f7fe fa56 	bl	80027ec <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	f241 3288 	movw	r2, #5000	; 0x1388
 800434a:	4293      	cmp	r3, r2
 800434c:	d906      	bls.n	800435c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e122      	b.n	8004598 <HAL_RCC_OscConfig+0x7bc>
 8004352:	bf00      	nop
 8004354:	40021000 	.word	0x40021000
 8004358:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800435c:	4b90      	ldr	r3, [pc, #576]	; (80045a0 <HAL_RCC_OscConfig+0x7c4>)
 800435e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1e8      	bne.n	800433c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800436a:	7ffb      	ldrb	r3, [r7, #31]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d105      	bne.n	800437c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004370:	4b8b      	ldr	r3, [pc, #556]	; (80045a0 <HAL_RCC_OscConfig+0x7c4>)
 8004372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004374:	4a8a      	ldr	r2, [pc, #552]	; (80045a0 <HAL_RCC_OscConfig+0x7c4>)
 8004376:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800437a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 8108 	beq.w	8004596 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438a:	2b02      	cmp	r3, #2
 800438c:	f040 80d0 	bne.w	8004530 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004390:	4b83      	ldr	r3, [pc, #524]	; (80045a0 <HAL_RCC_OscConfig+0x7c4>)
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f003 0203 	and.w	r2, r3, #3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d130      	bne.n	8004406 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ae:	3b01      	subs	r3, #1
 80043b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d127      	bne.n	8004406 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d11f      	bne.n	8004406 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043d0:	2a07      	cmp	r2, #7
 80043d2:	bf14      	ite	ne
 80043d4:	2201      	movne	r2, #1
 80043d6:	2200      	moveq	r2, #0
 80043d8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043da:	4293      	cmp	r3, r2
 80043dc:	d113      	bne.n	8004406 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e8:	085b      	lsrs	r3, r3, #1
 80043ea:	3b01      	subs	r3, #1
 80043ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d109      	bne.n	8004406 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fc:	085b      	lsrs	r3, r3, #1
 80043fe:	3b01      	subs	r3, #1
 8004400:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004402:	429a      	cmp	r2, r3
 8004404:	d06e      	beq.n	80044e4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	2b0c      	cmp	r3, #12
 800440a:	d069      	beq.n	80044e0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800440c:	4b64      	ldr	r3, [pc, #400]	; (80045a0 <HAL_RCC_OscConfig+0x7c4>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d105      	bne.n	8004424 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004418:	4b61      	ldr	r3, [pc, #388]	; (80045a0 <HAL_RCC_OscConfig+0x7c4>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d001      	beq.n	8004428 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e0b7      	b.n	8004598 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004428:	4b5d      	ldr	r3, [pc, #372]	; (80045a0 <HAL_RCC_OscConfig+0x7c4>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a5c      	ldr	r2, [pc, #368]	; (80045a0 <HAL_RCC_OscConfig+0x7c4>)
 800442e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004432:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004434:	f7fe f9da 	bl	80027ec <HAL_GetTick>
 8004438:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800443a:	e008      	b.n	800444e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800443c:	f7fe f9d6 	bl	80027ec <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e0a4      	b.n	8004598 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800444e:	4b54      	ldr	r3, [pc, #336]	; (80045a0 <HAL_RCC_OscConfig+0x7c4>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1f0      	bne.n	800443c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800445a:	4b51      	ldr	r3, [pc, #324]	; (80045a0 <HAL_RCC_OscConfig+0x7c4>)
 800445c:	68da      	ldr	r2, [r3, #12]
 800445e:	4b51      	ldr	r3, [pc, #324]	; (80045a4 <HAL_RCC_OscConfig+0x7c8>)
 8004460:	4013      	ands	r3, r2
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800446a:	3a01      	subs	r2, #1
 800446c:	0112      	lsls	r2, r2, #4
 800446e:	4311      	orrs	r1, r2
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004474:	0212      	lsls	r2, r2, #8
 8004476:	4311      	orrs	r1, r2
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800447c:	0852      	lsrs	r2, r2, #1
 800447e:	3a01      	subs	r2, #1
 8004480:	0552      	lsls	r2, r2, #21
 8004482:	4311      	orrs	r1, r2
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004488:	0852      	lsrs	r2, r2, #1
 800448a:	3a01      	subs	r2, #1
 800448c:	0652      	lsls	r2, r2, #25
 800448e:	4311      	orrs	r1, r2
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004494:	0912      	lsrs	r2, r2, #4
 8004496:	0452      	lsls	r2, r2, #17
 8004498:	430a      	orrs	r2, r1
 800449a:	4941      	ldr	r1, [pc, #260]	; (80045a0 <HAL_RCC_OscConfig+0x7c4>)
 800449c:	4313      	orrs	r3, r2
 800449e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80044a0:	4b3f      	ldr	r3, [pc, #252]	; (80045a0 <HAL_RCC_OscConfig+0x7c4>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a3e      	ldr	r2, [pc, #248]	; (80045a0 <HAL_RCC_OscConfig+0x7c4>)
 80044a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044ac:	4b3c      	ldr	r3, [pc, #240]	; (80045a0 <HAL_RCC_OscConfig+0x7c4>)
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	4a3b      	ldr	r2, [pc, #236]	; (80045a0 <HAL_RCC_OscConfig+0x7c4>)
 80044b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80044b8:	f7fe f998 	bl	80027ec <HAL_GetTick>
 80044bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044be:	e008      	b.n	80044d2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044c0:	f7fe f994 	bl	80027ec <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e062      	b.n	8004598 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044d2:	4b33      	ldr	r3, [pc, #204]	; (80045a0 <HAL_RCC_OscConfig+0x7c4>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d0f0      	beq.n	80044c0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044de:	e05a      	b.n	8004596 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e059      	b.n	8004598 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044e4:	4b2e      	ldr	r3, [pc, #184]	; (80045a0 <HAL_RCC_OscConfig+0x7c4>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d152      	bne.n	8004596 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80044f0:	4b2b      	ldr	r3, [pc, #172]	; (80045a0 <HAL_RCC_OscConfig+0x7c4>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a2a      	ldr	r2, [pc, #168]	; (80045a0 <HAL_RCC_OscConfig+0x7c4>)
 80044f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044fc:	4b28      	ldr	r3, [pc, #160]	; (80045a0 <HAL_RCC_OscConfig+0x7c4>)
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	4a27      	ldr	r2, [pc, #156]	; (80045a0 <HAL_RCC_OscConfig+0x7c4>)
 8004502:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004506:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004508:	f7fe f970 	bl	80027ec <HAL_GetTick>
 800450c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800450e:	e008      	b.n	8004522 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004510:	f7fe f96c 	bl	80027ec <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b02      	cmp	r3, #2
 800451c:	d901      	bls.n	8004522 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e03a      	b.n	8004598 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004522:	4b1f      	ldr	r3, [pc, #124]	; (80045a0 <HAL_RCC_OscConfig+0x7c4>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d0f0      	beq.n	8004510 <HAL_RCC_OscConfig+0x734>
 800452e:	e032      	b.n	8004596 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	2b0c      	cmp	r3, #12
 8004534:	d02d      	beq.n	8004592 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004536:	4b1a      	ldr	r3, [pc, #104]	; (80045a0 <HAL_RCC_OscConfig+0x7c4>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a19      	ldr	r2, [pc, #100]	; (80045a0 <HAL_RCC_OscConfig+0x7c4>)
 800453c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004540:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004542:	4b17      	ldr	r3, [pc, #92]	; (80045a0 <HAL_RCC_OscConfig+0x7c4>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d105      	bne.n	800455a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800454e:	4b14      	ldr	r3, [pc, #80]	; (80045a0 <HAL_RCC_OscConfig+0x7c4>)
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	4a13      	ldr	r2, [pc, #76]	; (80045a0 <HAL_RCC_OscConfig+0x7c4>)
 8004554:	f023 0303 	bic.w	r3, r3, #3
 8004558:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800455a:	4b11      	ldr	r3, [pc, #68]	; (80045a0 <HAL_RCC_OscConfig+0x7c4>)
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	4a10      	ldr	r2, [pc, #64]	; (80045a0 <HAL_RCC_OscConfig+0x7c4>)
 8004560:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004564:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004568:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800456a:	f7fe f93f 	bl	80027ec <HAL_GetTick>
 800456e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004570:	e008      	b.n	8004584 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004572:	f7fe f93b 	bl	80027ec <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d901      	bls.n	8004584 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e009      	b.n	8004598 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004584:	4b06      	ldr	r3, [pc, #24]	; (80045a0 <HAL_RCC_OscConfig+0x7c4>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1f0      	bne.n	8004572 <HAL_RCC_OscConfig+0x796>
 8004590:	e001      	b.n	8004596 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e000      	b.n	8004598 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3720      	adds	r7, #32
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	40021000 	.word	0x40021000
 80045a4:	f99d808c 	.word	0xf99d808c

080045a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d101      	bne.n	80045bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e0c8      	b.n	800474e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045bc:	4b66      	ldr	r3, [pc, #408]	; (8004758 <HAL_RCC_ClockConfig+0x1b0>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0307 	and.w	r3, r3, #7
 80045c4:	683a      	ldr	r2, [r7, #0]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d910      	bls.n	80045ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ca:	4b63      	ldr	r3, [pc, #396]	; (8004758 <HAL_RCC_ClockConfig+0x1b0>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f023 0207 	bic.w	r2, r3, #7
 80045d2:	4961      	ldr	r1, [pc, #388]	; (8004758 <HAL_RCC_ClockConfig+0x1b0>)
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045da:	4b5f      	ldr	r3, [pc, #380]	; (8004758 <HAL_RCC_ClockConfig+0x1b0>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0307 	and.w	r3, r3, #7
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d001      	beq.n	80045ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e0b0      	b.n	800474e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d04c      	beq.n	8004692 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	2b03      	cmp	r3, #3
 80045fe:	d107      	bne.n	8004610 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004600:	4b56      	ldr	r3, [pc, #344]	; (800475c <HAL_RCC_ClockConfig+0x1b4>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d121      	bne.n	8004650 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e09e      	b.n	800474e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	2b02      	cmp	r3, #2
 8004616:	d107      	bne.n	8004628 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004618:	4b50      	ldr	r3, [pc, #320]	; (800475c <HAL_RCC_ClockConfig+0x1b4>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d115      	bne.n	8004650 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e092      	b.n	800474e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d107      	bne.n	8004640 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004630:	4b4a      	ldr	r3, [pc, #296]	; (800475c <HAL_RCC_ClockConfig+0x1b4>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0302 	and.w	r3, r3, #2
 8004638:	2b00      	cmp	r3, #0
 800463a:	d109      	bne.n	8004650 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e086      	b.n	800474e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004640:	4b46      	ldr	r3, [pc, #280]	; (800475c <HAL_RCC_ClockConfig+0x1b4>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004648:	2b00      	cmp	r3, #0
 800464a:	d101      	bne.n	8004650 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e07e      	b.n	800474e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004650:	4b42      	ldr	r3, [pc, #264]	; (800475c <HAL_RCC_ClockConfig+0x1b4>)
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f023 0203 	bic.w	r2, r3, #3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	493f      	ldr	r1, [pc, #252]	; (800475c <HAL_RCC_ClockConfig+0x1b4>)
 800465e:	4313      	orrs	r3, r2
 8004660:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004662:	f7fe f8c3 	bl	80027ec <HAL_GetTick>
 8004666:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004668:	e00a      	b.n	8004680 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800466a:	f7fe f8bf 	bl	80027ec <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	f241 3288 	movw	r2, #5000	; 0x1388
 8004678:	4293      	cmp	r3, r2
 800467a:	d901      	bls.n	8004680 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e066      	b.n	800474e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004680:	4b36      	ldr	r3, [pc, #216]	; (800475c <HAL_RCC_ClockConfig+0x1b4>)
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f003 020c 	and.w	r2, r3, #12
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	429a      	cmp	r2, r3
 8004690:	d1eb      	bne.n	800466a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d008      	beq.n	80046b0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800469e:	4b2f      	ldr	r3, [pc, #188]	; (800475c <HAL_RCC_ClockConfig+0x1b4>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	492c      	ldr	r1, [pc, #176]	; (800475c <HAL_RCC_ClockConfig+0x1b4>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046b0:	4b29      	ldr	r3, [pc, #164]	; (8004758 <HAL_RCC_ClockConfig+0x1b0>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0307 	and.w	r3, r3, #7
 80046b8:	683a      	ldr	r2, [r7, #0]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d210      	bcs.n	80046e0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046be:	4b26      	ldr	r3, [pc, #152]	; (8004758 <HAL_RCC_ClockConfig+0x1b0>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f023 0207 	bic.w	r2, r3, #7
 80046c6:	4924      	ldr	r1, [pc, #144]	; (8004758 <HAL_RCC_ClockConfig+0x1b0>)
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ce:	4b22      	ldr	r3, [pc, #136]	; (8004758 <HAL_RCC_ClockConfig+0x1b0>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0307 	and.w	r3, r3, #7
 80046d6:	683a      	ldr	r2, [r7, #0]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d001      	beq.n	80046e0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e036      	b.n	800474e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0304 	and.w	r3, r3, #4
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d008      	beq.n	80046fe <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046ec:	4b1b      	ldr	r3, [pc, #108]	; (800475c <HAL_RCC_ClockConfig+0x1b4>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	4918      	ldr	r1, [pc, #96]	; (800475c <HAL_RCC_ClockConfig+0x1b4>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0308 	and.w	r3, r3, #8
 8004706:	2b00      	cmp	r3, #0
 8004708:	d009      	beq.n	800471e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800470a:	4b14      	ldr	r3, [pc, #80]	; (800475c <HAL_RCC_ClockConfig+0x1b4>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	00db      	lsls	r3, r3, #3
 8004718:	4910      	ldr	r1, [pc, #64]	; (800475c <HAL_RCC_ClockConfig+0x1b4>)
 800471a:	4313      	orrs	r3, r2
 800471c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800471e:	f000 f825 	bl	800476c <HAL_RCC_GetSysClockFreq>
 8004722:	4602      	mov	r2, r0
 8004724:	4b0d      	ldr	r3, [pc, #52]	; (800475c <HAL_RCC_ClockConfig+0x1b4>)
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	091b      	lsrs	r3, r3, #4
 800472a:	f003 030f 	and.w	r3, r3, #15
 800472e:	490c      	ldr	r1, [pc, #48]	; (8004760 <HAL_RCC_ClockConfig+0x1b8>)
 8004730:	5ccb      	ldrb	r3, [r1, r3]
 8004732:	f003 031f 	and.w	r3, r3, #31
 8004736:	fa22 f303 	lsr.w	r3, r2, r3
 800473a:	4a0a      	ldr	r2, [pc, #40]	; (8004764 <HAL_RCC_ClockConfig+0x1bc>)
 800473c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800473e:	4b0a      	ldr	r3, [pc, #40]	; (8004768 <HAL_RCC_ClockConfig+0x1c0>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4618      	mov	r0, r3
 8004744:	f7fe f802 	bl	800274c <HAL_InitTick>
 8004748:	4603      	mov	r3, r0
 800474a:	72fb      	strb	r3, [r7, #11]

  return status;
 800474c:	7afb      	ldrb	r3, [r7, #11]
}
 800474e:	4618      	mov	r0, r3
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	40022000 	.word	0x40022000
 800475c:	40021000 	.word	0x40021000
 8004760:	0800741c 	.word	0x0800741c
 8004764:	20000008 	.word	0x20000008
 8004768:	2000000c 	.word	0x2000000c

0800476c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800476c:	b480      	push	{r7}
 800476e:	b089      	sub	sp, #36	; 0x24
 8004770:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004772:	2300      	movs	r3, #0
 8004774:	61fb      	str	r3, [r7, #28]
 8004776:	2300      	movs	r3, #0
 8004778:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800477a:	4b3e      	ldr	r3, [pc, #248]	; (8004874 <HAL_RCC_GetSysClockFreq+0x108>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f003 030c 	and.w	r3, r3, #12
 8004782:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004784:	4b3b      	ldr	r3, [pc, #236]	; (8004874 <HAL_RCC_GetSysClockFreq+0x108>)
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	f003 0303 	and.w	r3, r3, #3
 800478c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d005      	beq.n	80047a0 <HAL_RCC_GetSysClockFreq+0x34>
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	2b0c      	cmp	r3, #12
 8004798:	d121      	bne.n	80047de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d11e      	bne.n	80047de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80047a0:	4b34      	ldr	r3, [pc, #208]	; (8004874 <HAL_RCC_GetSysClockFreq+0x108>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0308 	and.w	r3, r3, #8
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d107      	bne.n	80047bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80047ac:	4b31      	ldr	r3, [pc, #196]	; (8004874 <HAL_RCC_GetSysClockFreq+0x108>)
 80047ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047b2:	0a1b      	lsrs	r3, r3, #8
 80047b4:	f003 030f 	and.w	r3, r3, #15
 80047b8:	61fb      	str	r3, [r7, #28]
 80047ba:	e005      	b.n	80047c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80047bc:	4b2d      	ldr	r3, [pc, #180]	; (8004874 <HAL_RCC_GetSysClockFreq+0x108>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	091b      	lsrs	r3, r3, #4
 80047c2:	f003 030f 	and.w	r3, r3, #15
 80047c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80047c8:	4a2b      	ldr	r2, [pc, #172]	; (8004878 <HAL_RCC_GetSysClockFreq+0x10c>)
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10d      	bne.n	80047f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047dc:	e00a      	b.n	80047f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	2b04      	cmp	r3, #4
 80047e2:	d102      	bne.n	80047ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80047e4:	4b25      	ldr	r3, [pc, #148]	; (800487c <HAL_RCC_GetSysClockFreq+0x110>)
 80047e6:	61bb      	str	r3, [r7, #24]
 80047e8:	e004      	b.n	80047f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	2b08      	cmp	r3, #8
 80047ee:	d101      	bne.n	80047f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80047f0:	4b23      	ldr	r3, [pc, #140]	; (8004880 <HAL_RCC_GetSysClockFreq+0x114>)
 80047f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	2b0c      	cmp	r3, #12
 80047f8:	d134      	bne.n	8004864 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047fa:	4b1e      	ldr	r3, [pc, #120]	; (8004874 <HAL_RCC_GetSysClockFreq+0x108>)
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	f003 0303 	and.w	r3, r3, #3
 8004802:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	2b02      	cmp	r3, #2
 8004808:	d003      	beq.n	8004812 <HAL_RCC_GetSysClockFreq+0xa6>
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	2b03      	cmp	r3, #3
 800480e:	d003      	beq.n	8004818 <HAL_RCC_GetSysClockFreq+0xac>
 8004810:	e005      	b.n	800481e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004812:	4b1a      	ldr	r3, [pc, #104]	; (800487c <HAL_RCC_GetSysClockFreq+0x110>)
 8004814:	617b      	str	r3, [r7, #20]
      break;
 8004816:	e005      	b.n	8004824 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004818:	4b19      	ldr	r3, [pc, #100]	; (8004880 <HAL_RCC_GetSysClockFreq+0x114>)
 800481a:	617b      	str	r3, [r7, #20]
      break;
 800481c:	e002      	b.n	8004824 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	617b      	str	r3, [r7, #20]
      break;
 8004822:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004824:	4b13      	ldr	r3, [pc, #76]	; (8004874 <HAL_RCC_GetSysClockFreq+0x108>)
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	091b      	lsrs	r3, r3, #4
 800482a:	f003 0307 	and.w	r3, r3, #7
 800482e:	3301      	adds	r3, #1
 8004830:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004832:	4b10      	ldr	r3, [pc, #64]	; (8004874 <HAL_RCC_GetSysClockFreq+0x108>)
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	0a1b      	lsrs	r3, r3, #8
 8004838:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800483c:	697a      	ldr	r2, [r7, #20]
 800483e:	fb02 f203 	mul.w	r2, r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	fbb2 f3f3 	udiv	r3, r2, r3
 8004848:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800484a:	4b0a      	ldr	r3, [pc, #40]	; (8004874 <HAL_RCC_GetSysClockFreq+0x108>)
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	0e5b      	lsrs	r3, r3, #25
 8004850:	f003 0303 	and.w	r3, r3, #3
 8004854:	3301      	adds	r3, #1
 8004856:	005b      	lsls	r3, r3, #1
 8004858:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004862:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004864:	69bb      	ldr	r3, [r7, #24]
}
 8004866:	4618      	mov	r0, r3
 8004868:	3724      	adds	r7, #36	; 0x24
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	40021000 	.word	0x40021000
 8004878:	08007434 	.word	0x08007434
 800487c:	00f42400 	.word	0x00f42400
 8004880:	007a1200 	.word	0x007a1200

08004884 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004884:	b480      	push	{r7}
 8004886:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004888:	4b03      	ldr	r3, [pc, #12]	; (8004898 <HAL_RCC_GetHCLKFreq+0x14>)
 800488a:	681b      	ldr	r3, [r3, #0]
}
 800488c:	4618      	mov	r0, r3
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	20000008 	.word	0x20000008

0800489c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80048a0:	f7ff fff0 	bl	8004884 <HAL_RCC_GetHCLKFreq>
 80048a4:	4602      	mov	r2, r0
 80048a6:	4b06      	ldr	r3, [pc, #24]	; (80048c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	0a1b      	lsrs	r3, r3, #8
 80048ac:	f003 0307 	and.w	r3, r3, #7
 80048b0:	4904      	ldr	r1, [pc, #16]	; (80048c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80048b2:	5ccb      	ldrb	r3, [r1, r3]
 80048b4:	f003 031f 	and.w	r3, r3, #31
 80048b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048bc:	4618      	mov	r0, r3
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	40021000 	.word	0x40021000
 80048c4:	0800742c 	.word	0x0800742c

080048c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80048cc:	f7ff ffda 	bl	8004884 <HAL_RCC_GetHCLKFreq>
 80048d0:	4602      	mov	r2, r0
 80048d2:	4b06      	ldr	r3, [pc, #24]	; (80048ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	0adb      	lsrs	r3, r3, #11
 80048d8:	f003 0307 	and.w	r3, r3, #7
 80048dc:	4904      	ldr	r1, [pc, #16]	; (80048f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80048de:	5ccb      	ldrb	r3, [r1, r3]
 80048e0:	f003 031f 	and.w	r3, r3, #31
 80048e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	40021000 	.word	0x40021000
 80048f0:	0800742c 	.word	0x0800742c

080048f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b086      	sub	sp, #24
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80048fc:	2300      	movs	r3, #0
 80048fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004900:	4b2a      	ldr	r3, [pc, #168]	; (80049ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d003      	beq.n	8004914 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800490c:	f7ff fa02 	bl	8003d14 <HAL_PWREx_GetVoltageRange>
 8004910:	6178      	str	r0, [r7, #20]
 8004912:	e014      	b.n	800493e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004914:	4b25      	ldr	r3, [pc, #148]	; (80049ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004918:	4a24      	ldr	r2, [pc, #144]	; (80049ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800491a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800491e:	6593      	str	r3, [r2, #88]	; 0x58
 8004920:	4b22      	ldr	r3, [pc, #136]	; (80049ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004928:	60fb      	str	r3, [r7, #12]
 800492a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800492c:	f7ff f9f2 	bl	8003d14 <HAL_PWREx_GetVoltageRange>
 8004930:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004932:	4b1e      	ldr	r3, [pc, #120]	; (80049ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004936:	4a1d      	ldr	r2, [pc, #116]	; (80049ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004938:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800493c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004944:	d10b      	bne.n	800495e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b80      	cmp	r3, #128	; 0x80
 800494a:	d919      	bls.n	8004980 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2ba0      	cmp	r3, #160	; 0xa0
 8004950:	d902      	bls.n	8004958 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004952:	2302      	movs	r3, #2
 8004954:	613b      	str	r3, [r7, #16]
 8004956:	e013      	b.n	8004980 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004958:	2301      	movs	r3, #1
 800495a:	613b      	str	r3, [r7, #16]
 800495c:	e010      	b.n	8004980 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b80      	cmp	r3, #128	; 0x80
 8004962:	d902      	bls.n	800496a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004964:	2303      	movs	r3, #3
 8004966:	613b      	str	r3, [r7, #16]
 8004968:	e00a      	b.n	8004980 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2b80      	cmp	r3, #128	; 0x80
 800496e:	d102      	bne.n	8004976 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004970:	2302      	movs	r3, #2
 8004972:	613b      	str	r3, [r7, #16]
 8004974:	e004      	b.n	8004980 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2b70      	cmp	r3, #112	; 0x70
 800497a:	d101      	bne.n	8004980 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800497c:	2301      	movs	r3, #1
 800497e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004980:	4b0b      	ldr	r3, [pc, #44]	; (80049b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f023 0207 	bic.w	r2, r3, #7
 8004988:	4909      	ldr	r1, [pc, #36]	; (80049b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	4313      	orrs	r3, r2
 800498e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004990:	4b07      	ldr	r3, [pc, #28]	; (80049b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0307 	and.w	r3, r3, #7
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	429a      	cmp	r2, r3
 800499c:	d001      	beq.n	80049a2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e000      	b.n	80049a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3718      	adds	r7, #24
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	40021000 	.word	0x40021000
 80049b0:	40022000 	.word	0x40022000

080049b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b086      	sub	sp, #24
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049bc:	2300      	movs	r3, #0
 80049be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049c0:	2300      	movs	r3, #0
 80049c2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d041      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049d4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80049d8:	d02a      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80049da:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80049de:	d824      	bhi.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80049e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049e4:	d008      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80049e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049ea:	d81e      	bhi.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00a      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80049f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049f4:	d010      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80049f6:	e018      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80049f8:	4b86      	ldr	r3, [pc, #536]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	4a85      	ldr	r2, [pc, #532]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a02:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a04:	e015      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	3304      	adds	r3, #4
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f000 fabb 	bl	8004f88 <RCCEx_PLLSAI1_Config>
 8004a12:	4603      	mov	r3, r0
 8004a14:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a16:	e00c      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	3320      	adds	r3, #32
 8004a1c:	2100      	movs	r1, #0
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f000 fba6 	bl	8005170 <RCCEx_PLLSAI2_Config>
 8004a24:	4603      	mov	r3, r0
 8004a26:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a28:	e003      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	74fb      	strb	r3, [r7, #19]
      break;
 8004a2e:	e000      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004a30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a32:	7cfb      	ldrb	r3, [r7, #19]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d10b      	bne.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a38:	4b76      	ldr	r3, [pc, #472]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a46:	4973      	ldr	r1, [pc, #460]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a4e:	e001      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a50:	7cfb      	ldrb	r3, [r7, #19]
 8004a52:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d041      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a64:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a68:	d02a      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004a6a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a6e:	d824      	bhi.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a74:	d008      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004a76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a7a:	d81e      	bhi.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00a      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004a80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a84:	d010      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004a86:	e018      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a88:	4b62      	ldr	r3, [pc, #392]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	4a61      	ldr	r2, [pc, #388]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a92:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a94:	e015      	b.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	3304      	adds	r3, #4
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f000 fa73 	bl	8004f88 <RCCEx_PLLSAI1_Config>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004aa6:	e00c      	b.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	3320      	adds	r3, #32
 8004aac:	2100      	movs	r1, #0
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f000 fb5e 	bl	8005170 <RCCEx_PLLSAI2_Config>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ab8:	e003      	b.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	74fb      	strb	r3, [r7, #19]
      break;
 8004abe:	e000      	b.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004ac0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ac2:	7cfb      	ldrb	r3, [r7, #19]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d10b      	bne.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ac8:	4b52      	ldr	r3, [pc, #328]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ace:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ad6:	494f      	ldr	r1, [pc, #316]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004ade:	e001      	b.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ae0:	7cfb      	ldrb	r3, [r7, #19]
 8004ae2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f000 80a0 	beq.w	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004af2:	2300      	movs	r3, #0
 8004af4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004af6:	4b47      	ldr	r3, [pc, #284]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d101      	bne.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004b02:	2301      	movs	r3, #1
 8004b04:	e000      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004b06:	2300      	movs	r3, #0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00d      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b0c:	4b41      	ldr	r3, [pc, #260]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b10:	4a40      	ldr	r2, [pc, #256]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b16:	6593      	str	r3, [r2, #88]	; 0x58
 8004b18:	4b3e      	ldr	r3, [pc, #248]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b20:	60bb      	str	r3, [r7, #8]
 8004b22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b24:	2301      	movs	r3, #1
 8004b26:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b28:	4b3b      	ldr	r3, [pc, #236]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a3a      	ldr	r2, [pc, #232]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b32:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b34:	f7fd fe5a 	bl	80027ec <HAL_GetTick>
 8004b38:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b3a:	e009      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b3c:	f7fd fe56 	bl	80027ec <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d902      	bls.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	74fb      	strb	r3, [r7, #19]
        break;
 8004b4e:	e005      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b50:	4b31      	ldr	r3, [pc, #196]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d0ef      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004b5c:	7cfb      	ldrb	r3, [r7, #19]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d15c      	bne.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b62:	4b2c      	ldr	r3, [pc, #176]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b6c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d01f      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d019      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b80:	4b24      	ldr	r3, [pc, #144]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b8a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b8c:	4b21      	ldr	r3, [pc, #132]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b92:	4a20      	ldr	r2, [pc, #128]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b9c:	4b1d      	ldr	r3, [pc, #116]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba2:	4a1c      	ldr	r2, [pc, #112]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ba4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ba8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004bac:	4a19      	ldr	r2, [pc, #100]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d016      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bbe:	f7fd fe15 	bl	80027ec <HAL_GetTick>
 8004bc2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bc4:	e00b      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bc6:	f7fd fe11 	bl	80027ec <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d902      	bls.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	74fb      	strb	r3, [r7, #19]
            break;
 8004bdc:	e006      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bde:	4b0d      	ldr	r3, [pc, #52]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0ec      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004bec:	7cfb      	ldrb	r3, [r7, #19]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10c      	bne.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bf2:	4b08      	ldr	r3, [pc, #32]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c02:	4904      	ldr	r1, [pc, #16]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c0a:	e009      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c0c:	7cfb      	ldrb	r3, [r7, #19]
 8004c0e:	74bb      	strb	r3, [r7, #18]
 8004c10:	e006      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004c12:	bf00      	nop
 8004c14:	40021000 	.word	0x40021000
 8004c18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c1c:	7cfb      	ldrb	r3, [r7, #19]
 8004c1e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c20:	7c7b      	ldrb	r3, [r7, #17]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d105      	bne.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c26:	4b9e      	ldr	r3, [pc, #632]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c2a:	4a9d      	ldr	r2, [pc, #628]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c30:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00a      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c3e:	4b98      	ldr	r3, [pc, #608]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c44:	f023 0203 	bic.w	r2, r3, #3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4c:	4994      	ldr	r1, [pc, #592]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0302 	and.w	r3, r3, #2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00a      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c60:	4b8f      	ldr	r3, [pc, #572]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c66:	f023 020c 	bic.w	r2, r3, #12
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c6e:	498c      	ldr	r1, [pc, #560]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0304 	and.w	r3, r3, #4
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00a      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c82:	4b87      	ldr	r3, [pc, #540]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c88:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c90:	4983      	ldr	r1, [pc, #524]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0308 	and.w	r3, r3, #8
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00a      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ca4:	4b7e      	ldr	r3, [pc, #504]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004caa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb2:	497b      	ldr	r1, [pc, #492]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0310 	and.w	r3, r3, #16
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00a      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004cc6:	4b76      	ldr	r3, [pc, #472]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ccc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cd4:	4972      	ldr	r1, [pc, #456]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0320 	and.w	r3, r3, #32
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00a      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ce8:	4b6d      	ldr	r3, [pc, #436]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cf6:	496a      	ldr	r1, [pc, #424]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00a      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d0a:	4b65      	ldr	r3, [pc, #404]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d10:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d18:	4961      	ldr	r1, [pc, #388]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00a      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d2c:	4b5c      	ldr	r3, [pc, #368]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d3a:	4959      	ldr	r1, [pc, #356]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00a      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d4e:	4b54      	ldr	r3, [pc, #336]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d54:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d5c:	4950      	ldr	r1, [pc, #320]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00a      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d70:	4b4b      	ldr	r3, [pc, #300]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d76:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d7e:	4948      	ldr	r1, [pc, #288]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00a      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d92:	4b43      	ldr	r3, [pc, #268]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da0:	493f      	ldr	r1, [pc, #252]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d028      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004db4:	4b3a      	ldr	r3, [pc, #232]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dc2:	4937      	ldr	r1, [pc, #220]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dd2:	d106      	bne.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dd4:	4b32      	ldr	r3, [pc, #200]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	4a31      	ldr	r2, [pc, #196]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dde:	60d3      	str	r3, [r2, #12]
 8004de0:	e011      	b.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004de6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004dea:	d10c      	bne.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	3304      	adds	r3, #4
 8004df0:	2101      	movs	r1, #1
 8004df2:	4618      	mov	r0, r3
 8004df4:	f000 f8c8 	bl	8004f88 <RCCEx_PLLSAI1_Config>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004dfc:	7cfb      	ldrb	r3, [r7, #19]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d001      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004e02:	7cfb      	ldrb	r3, [r7, #19]
 8004e04:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d028      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e12:	4b23      	ldr	r3, [pc, #140]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e18:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e20:	491f      	ldr	r1, [pc, #124]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e30:	d106      	bne.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e32:	4b1b      	ldr	r3, [pc, #108]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	4a1a      	ldr	r2, [pc, #104]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e3c:	60d3      	str	r3, [r2, #12]
 8004e3e:	e011      	b.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e48:	d10c      	bne.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	3304      	adds	r3, #4
 8004e4e:	2101      	movs	r1, #1
 8004e50:	4618      	mov	r0, r3
 8004e52:	f000 f899 	bl	8004f88 <RCCEx_PLLSAI1_Config>
 8004e56:	4603      	mov	r3, r0
 8004e58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e5a:	7cfb      	ldrb	r3, [r7, #19]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d001      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004e60:	7cfb      	ldrb	r3, [r7, #19]
 8004e62:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d02b      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e70:	4b0b      	ldr	r3, [pc, #44]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e7e:	4908      	ldr	r1, [pc, #32]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e8e:	d109      	bne.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e90:	4b03      	ldr	r3, [pc, #12]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	4a02      	ldr	r2, [pc, #8]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e9a:	60d3      	str	r3, [r2, #12]
 8004e9c:	e014      	b.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004e9e:	bf00      	nop
 8004ea0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ea8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004eac:	d10c      	bne.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	3304      	adds	r3, #4
 8004eb2:	2101      	movs	r1, #1
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f000 f867 	bl	8004f88 <RCCEx_PLLSAI1_Config>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ebe:	7cfb      	ldrb	r3, [r7, #19]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d001      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004ec4:	7cfb      	ldrb	r3, [r7, #19]
 8004ec6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d02f      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ed4:	4b2b      	ldr	r3, [pc, #172]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eda:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ee2:	4928      	ldr	r1, [pc, #160]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ef2:	d10d      	bne.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	3304      	adds	r3, #4
 8004ef8:	2102      	movs	r1, #2
 8004efa:	4618      	mov	r0, r3
 8004efc:	f000 f844 	bl	8004f88 <RCCEx_PLLSAI1_Config>
 8004f00:	4603      	mov	r3, r0
 8004f02:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f04:	7cfb      	ldrb	r3, [r7, #19]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d014      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004f0a:	7cfb      	ldrb	r3, [r7, #19]
 8004f0c:	74bb      	strb	r3, [r7, #18]
 8004f0e:	e011      	b.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f18:	d10c      	bne.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	3320      	adds	r3, #32
 8004f1e:	2102      	movs	r1, #2
 8004f20:	4618      	mov	r0, r3
 8004f22:	f000 f925 	bl	8005170 <RCCEx_PLLSAI2_Config>
 8004f26:	4603      	mov	r3, r0
 8004f28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f2a:	7cfb      	ldrb	r3, [r7, #19]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d001      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004f30:	7cfb      	ldrb	r3, [r7, #19]
 8004f32:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00a      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f40:	4b10      	ldr	r3, [pc, #64]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f46:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f4e:	490d      	ldr	r1, [pc, #52]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00b      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f62:	4b08      	ldr	r3, [pc, #32]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f68:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f72:	4904      	ldr	r1, [pc, #16]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004f7a:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3718      	adds	r7, #24
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	40021000 	.word	0x40021000

08004f88 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f92:	2300      	movs	r3, #0
 8004f94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f96:	4b75      	ldr	r3, [pc, #468]	; (800516c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	f003 0303 	and.w	r3, r3, #3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d018      	beq.n	8004fd4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004fa2:	4b72      	ldr	r3, [pc, #456]	; (800516c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	f003 0203 	and.w	r2, r3, #3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d10d      	bne.n	8004fce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
       ||
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d009      	beq.n	8004fce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004fba:	4b6c      	ldr	r3, [pc, #432]	; (800516c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	091b      	lsrs	r3, r3, #4
 8004fc0:	f003 0307 	and.w	r3, r3, #7
 8004fc4:	1c5a      	adds	r2, r3, #1
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
       ||
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d047      	beq.n	800505e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	73fb      	strb	r3, [r7, #15]
 8004fd2:	e044      	b.n	800505e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2b03      	cmp	r3, #3
 8004fda:	d018      	beq.n	800500e <RCCEx_PLLSAI1_Config+0x86>
 8004fdc:	2b03      	cmp	r3, #3
 8004fde:	d825      	bhi.n	800502c <RCCEx_PLLSAI1_Config+0xa4>
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d002      	beq.n	8004fea <RCCEx_PLLSAI1_Config+0x62>
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d009      	beq.n	8004ffc <RCCEx_PLLSAI1_Config+0x74>
 8004fe8:	e020      	b.n	800502c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004fea:	4b60      	ldr	r3, [pc, #384]	; (800516c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d11d      	bne.n	8005032 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ffa:	e01a      	b.n	8005032 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ffc:	4b5b      	ldr	r3, [pc, #364]	; (800516c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005004:	2b00      	cmp	r3, #0
 8005006:	d116      	bne.n	8005036 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800500c:	e013      	b.n	8005036 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800500e:	4b57      	ldr	r3, [pc, #348]	; (800516c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d10f      	bne.n	800503a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800501a:	4b54      	ldr	r3, [pc, #336]	; (800516c <RCCEx_PLLSAI1_Config+0x1e4>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d109      	bne.n	800503a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800502a:	e006      	b.n	800503a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	73fb      	strb	r3, [r7, #15]
      break;
 8005030:	e004      	b.n	800503c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005032:	bf00      	nop
 8005034:	e002      	b.n	800503c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005036:	bf00      	nop
 8005038:	e000      	b.n	800503c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800503a:	bf00      	nop
    }

    if(status == HAL_OK)
 800503c:	7bfb      	ldrb	r3, [r7, #15]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10d      	bne.n	800505e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005042:	4b4a      	ldr	r3, [pc, #296]	; (800516c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6819      	ldr	r1, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	3b01      	subs	r3, #1
 8005054:	011b      	lsls	r3, r3, #4
 8005056:	430b      	orrs	r3, r1
 8005058:	4944      	ldr	r1, [pc, #272]	; (800516c <RCCEx_PLLSAI1_Config+0x1e4>)
 800505a:	4313      	orrs	r3, r2
 800505c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800505e:	7bfb      	ldrb	r3, [r7, #15]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d17d      	bne.n	8005160 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005064:	4b41      	ldr	r3, [pc, #260]	; (800516c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a40      	ldr	r2, [pc, #256]	; (800516c <RCCEx_PLLSAI1_Config+0x1e4>)
 800506a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800506e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005070:	f7fd fbbc 	bl	80027ec <HAL_GetTick>
 8005074:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005076:	e009      	b.n	800508c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005078:	f7fd fbb8 	bl	80027ec <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	2b02      	cmp	r3, #2
 8005084:	d902      	bls.n	800508c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	73fb      	strb	r3, [r7, #15]
        break;
 800508a:	e005      	b.n	8005098 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800508c:	4b37      	ldr	r3, [pc, #220]	; (800516c <RCCEx_PLLSAI1_Config+0x1e4>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1ef      	bne.n	8005078 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005098:	7bfb      	ldrb	r3, [r7, #15]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d160      	bne.n	8005160 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d111      	bne.n	80050c8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050a4:	4b31      	ldr	r3, [pc, #196]	; (800516c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80050ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	6892      	ldr	r2, [r2, #8]
 80050b4:	0211      	lsls	r1, r2, #8
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	68d2      	ldr	r2, [r2, #12]
 80050ba:	0912      	lsrs	r2, r2, #4
 80050bc:	0452      	lsls	r2, r2, #17
 80050be:	430a      	orrs	r2, r1
 80050c0:	492a      	ldr	r1, [pc, #168]	; (800516c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	610b      	str	r3, [r1, #16]
 80050c6:	e027      	b.n	8005118 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d112      	bne.n	80050f4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050ce:	4b27      	ldr	r3, [pc, #156]	; (800516c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80050d6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	6892      	ldr	r2, [r2, #8]
 80050de:	0211      	lsls	r1, r2, #8
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	6912      	ldr	r2, [r2, #16]
 80050e4:	0852      	lsrs	r2, r2, #1
 80050e6:	3a01      	subs	r2, #1
 80050e8:	0552      	lsls	r2, r2, #21
 80050ea:	430a      	orrs	r2, r1
 80050ec:	491f      	ldr	r1, [pc, #124]	; (800516c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	610b      	str	r3, [r1, #16]
 80050f2:	e011      	b.n	8005118 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050f4:	4b1d      	ldr	r3, [pc, #116]	; (800516c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80050fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	6892      	ldr	r2, [r2, #8]
 8005104:	0211      	lsls	r1, r2, #8
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	6952      	ldr	r2, [r2, #20]
 800510a:	0852      	lsrs	r2, r2, #1
 800510c:	3a01      	subs	r2, #1
 800510e:	0652      	lsls	r2, r2, #25
 8005110:	430a      	orrs	r2, r1
 8005112:	4916      	ldr	r1, [pc, #88]	; (800516c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005114:	4313      	orrs	r3, r2
 8005116:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005118:	4b14      	ldr	r3, [pc, #80]	; (800516c <RCCEx_PLLSAI1_Config+0x1e4>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a13      	ldr	r2, [pc, #76]	; (800516c <RCCEx_PLLSAI1_Config+0x1e4>)
 800511e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005122:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005124:	f7fd fb62 	bl	80027ec <HAL_GetTick>
 8005128:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800512a:	e009      	b.n	8005140 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800512c:	f7fd fb5e 	bl	80027ec <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	2b02      	cmp	r3, #2
 8005138:	d902      	bls.n	8005140 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	73fb      	strb	r3, [r7, #15]
          break;
 800513e:	e005      	b.n	800514c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005140:	4b0a      	ldr	r3, [pc, #40]	; (800516c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d0ef      	beq.n	800512c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800514c:	7bfb      	ldrb	r3, [r7, #15]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d106      	bne.n	8005160 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005152:	4b06      	ldr	r3, [pc, #24]	; (800516c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005154:	691a      	ldr	r2, [r3, #16]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	4904      	ldr	r1, [pc, #16]	; (800516c <RCCEx_PLLSAI1_Config+0x1e4>)
 800515c:	4313      	orrs	r3, r2
 800515e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005160:	7bfb      	ldrb	r3, [r7, #15]
}
 8005162:	4618      	mov	r0, r3
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	40021000 	.word	0x40021000

08005170 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800517a:	2300      	movs	r3, #0
 800517c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800517e:	4b6a      	ldr	r3, [pc, #424]	; (8005328 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	f003 0303 	and.w	r3, r3, #3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d018      	beq.n	80051bc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800518a:	4b67      	ldr	r3, [pc, #412]	; (8005328 <RCCEx_PLLSAI2_Config+0x1b8>)
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	f003 0203 	and.w	r2, r3, #3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	429a      	cmp	r2, r3
 8005198:	d10d      	bne.n	80051b6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
       ||
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d009      	beq.n	80051b6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80051a2:	4b61      	ldr	r3, [pc, #388]	; (8005328 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	091b      	lsrs	r3, r3, #4
 80051a8:	f003 0307 	and.w	r3, r3, #7
 80051ac:	1c5a      	adds	r2, r3, #1
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
       ||
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d047      	beq.n	8005246 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	73fb      	strb	r3, [r7, #15]
 80051ba:	e044      	b.n	8005246 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2b03      	cmp	r3, #3
 80051c2:	d018      	beq.n	80051f6 <RCCEx_PLLSAI2_Config+0x86>
 80051c4:	2b03      	cmp	r3, #3
 80051c6:	d825      	bhi.n	8005214 <RCCEx_PLLSAI2_Config+0xa4>
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d002      	beq.n	80051d2 <RCCEx_PLLSAI2_Config+0x62>
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d009      	beq.n	80051e4 <RCCEx_PLLSAI2_Config+0x74>
 80051d0:	e020      	b.n	8005214 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80051d2:	4b55      	ldr	r3, [pc, #340]	; (8005328 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d11d      	bne.n	800521a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051e2:	e01a      	b.n	800521a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80051e4:	4b50      	ldr	r3, [pc, #320]	; (8005328 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d116      	bne.n	800521e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051f4:	e013      	b.n	800521e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80051f6:	4b4c      	ldr	r3, [pc, #304]	; (8005328 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d10f      	bne.n	8005222 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005202:	4b49      	ldr	r3, [pc, #292]	; (8005328 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d109      	bne.n	8005222 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005212:	e006      	b.n	8005222 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	73fb      	strb	r3, [r7, #15]
      break;
 8005218:	e004      	b.n	8005224 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800521a:	bf00      	nop
 800521c:	e002      	b.n	8005224 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800521e:	bf00      	nop
 8005220:	e000      	b.n	8005224 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005222:	bf00      	nop
    }

    if(status == HAL_OK)
 8005224:	7bfb      	ldrb	r3, [r7, #15]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10d      	bne.n	8005246 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800522a:	4b3f      	ldr	r3, [pc, #252]	; (8005328 <RCCEx_PLLSAI2_Config+0x1b8>)
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6819      	ldr	r1, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	3b01      	subs	r3, #1
 800523c:	011b      	lsls	r3, r3, #4
 800523e:	430b      	orrs	r3, r1
 8005240:	4939      	ldr	r1, [pc, #228]	; (8005328 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005242:	4313      	orrs	r3, r2
 8005244:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005246:	7bfb      	ldrb	r3, [r7, #15]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d167      	bne.n	800531c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800524c:	4b36      	ldr	r3, [pc, #216]	; (8005328 <RCCEx_PLLSAI2_Config+0x1b8>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a35      	ldr	r2, [pc, #212]	; (8005328 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005252:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005256:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005258:	f7fd fac8 	bl	80027ec <HAL_GetTick>
 800525c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800525e:	e009      	b.n	8005274 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005260:	f7fd fac4 	bl	80027ec <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	2b02      	cmp	r3, #2
 800526c:	d902      	bls.n	8005274 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	73fb      	strb	r3, [r7, #15]
        break;
 8005272:	e005      	b.n	8005280 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005274:	4b2c      	ldr	r3, [pc, #176]	; (8005328 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1ef      	bne.n	8005260 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005280:	7bfb      	ldrb	r3, [r7, #15]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d14a      	bne.n	800531c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d111      	bne.n	80052b0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800528c:	4b26      	ldr	r3, [pc, #152]	; (8005328 <RCCEx_PLLSAI2_Config+0x1b8>)
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	6892      	ldr	r2, [r2, #8]
 800529c:	0211      	lsls	r1, r2, #8
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	68d2      	ldr	r2, [r2, #12]
 80052a2:	0912      	lsrs	r2, r2, #4
 80052a4:	0452      	lsls	r2, r2, #17
 80052a6:	430a      	orrs	r2, r1
 80052a8:	491f      	ldr	r1, [pc, #124]	; (8005328 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	614b      	str	r3, [r1, #20]
 80052ae:	e011      	b.n	80052d4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80052b0:	4b1d      	ldr	r3, [pc, #116]	; (8005328 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052b2:	695b      	ldr	r3, [r3, #20]
 80052b4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80052b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	6892      	ldr	r2, [r2, #8]
 80052c0:	0211      	lsls	r1, r2, #8
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	6912      	ldr	r2, [r2, #16]
 80052c6:	0852      	lsrs	r2, r2, #1
 80052c8:	3a01      	subs	r2, #1
 80052ca:	0652      	lsls	r2, r2, #25
 80052cc:	430a      	orrs	r2, r1
 80052ce:	4916      	ldr	r1, [pc, #88]	; (8005328 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052d0:	4313      	orrs	r3, r2
 80052d2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80052d4:	4b14      	ldr	r3, [pc, #80]	; (8005328 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a13      	ldr	r2, [pc, #76]	; (8005328 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052e0:	f7fd fa84 	bl	80027ec <HAL_GetTick>
 80052e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80052e6:	e009      	b.n	80052fc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80052e8:	f7fd fa80 	bl	80027ec <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d902      	bls.n	80052fc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	73fb      	strb	r3, [r7, #15]
          break;
 80052fa:	e005      	b.n	8005308 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80052fc:	4b0a      	ldr	r3, [pc, #40]	; (8005328 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d0ef      	beq.n	80052e8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005308:	7bfb      	ldrb	r3, [r7, #15]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d106      	bne.n	800531c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800530e:	4b06      	ldr	r3, [pc, #24]	; (8005328 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005310:	695a      	ldr	r2, [r3, #20]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	4904      	ldr	r1, [pc, #16]	; (8005328 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005318:	4313      	orrs	r3, r2
 800531a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800531c:	7bfb      	ldrb	r3, [r7, #15]
}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	40021000 	.word	0x40021000

0800532c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e095      	b.n	800546a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005342:	2b00      	cmp	r3, #0
 8005344:	d108      	bne.n	8005358 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800534e:	d009      	beq.n	8005364 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	61da      	str	r2, [r3, #28]
 8005356:	e005      	b.n	8005364 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d106      	bne.n	8005384 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f7fc ffa6 	bl	80022d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2202      	movs	r2, #2
 8005388:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800539a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053a4:	d902      	bls.n	80053ac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80053a6:	2300      	movs	r3, #0
 80053a8:	60fb      	str	r3, [r7, #12]
 80053aa:	e002      	b.n	80053b2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80053ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053b0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80053ba:	d007      	beq.n	80053cc <HAL_SPI_Init+0xa0>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053c4:	d002      	beq.n	80053cc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80053dc:	431a      	orrs	r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	f003 0302 	and.w	r3, r3, #2
 80053e6:	431a      	orrs	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	f003 0301 	and.w	r3, r3, #1
 80053f0:	431a      	orrs	r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053fa:	431a      	orrs	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	69db      	ldr	r3, [r3, #28]
 8005400:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005404:	431a      	orrs	r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800540e:	ea42 0103 	orr.w	r1, r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005416:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	430a      	orrs	r2, r1
 8005420:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	0c1b      	lsrs	r3, r3, #16
 8005428:	f003 0204 	and.w	r2, r3, #4
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005430:	f003 0310 	and.w	r3, r3, #16
 8005434:	431a      	orrs	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800543a:	f003 0308 	and.w	r3, r3, #8
 800543e:	431a      	orrs	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005448:	ea42 0103 	orr.w	r1, r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	430a      	orrs	r2, r1
 8005458:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}

08005472 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005472:	b580      	push	{r7, lr}
 8005474:	b088      	sub	sp, #32
 8005476:	af00      	add	r7, sp, #0
 8005478:	60f8      	str	r0, [r7, #12]
 800547a:	60b9      	str	r1, [r7, #8]
 800547c:	603b      	str	r3, [r7, #0]
 800547e:	4613      	mov	r3, r2
 8005480:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005482:	2300      	movs	r3, #0
 8005484:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800548c:	2b01      	cmp	r3, #1
 800548e:	d101      	bne.n	8005494 <HAL_SPI_Transmit+0x22>
 8005490:	2302      	movs	r3, #2
 8005492:	e158      	b.n	8005746 <HAL_SPI_Transmit+0x2d4>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800549c:	f7fd f9a6 	bl	80027ec <HAL_GetTick>
 80054a0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80054a2:	88fb      	ldrh	r3, [r7, #6]
 80054a4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d002      	beq.n	80054b8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80054b2:	2302      	movs	r3, #2
 80054b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80054b6:	e13d      	b.n	8005734 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d002      	beq.n	80054c4 <HAL_SPI_Transmit+0x52>
 80054be:	88fb      	ldrh	r3, [r7, #6]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d102      	bne.n	80054ca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80054c8:	e134      	b.n	8005734 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2203      	movs	r2, #3
 80054ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	68ba      	ldr	r2, [r7, #8]
 80054dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	88fa      	ldrh	r2, [r7, #6]
 80054e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	88fa      	ldrh	r2, [r7, #6]
 80054e8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2200      	movs	r2, #0
 800550a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005514:	d10f      	bne.n	8005536 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005524:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005534:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005540:	2b40      	cmp	r3, #64	; 0x40
 8005542:	d007      	beq.n	8005554 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005552:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800555c:	d94b      	bls.n	80055f6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d002      	beq.n	800556c <HAL_SPI_Transmit+0xfa>
 8005566:	8afb      	ldrh	r3, [r7, #22]
 8005568:	2b01      	cmp	r3, #1
 800556a:	d13e      	bne.n	80055ea <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005570:	881a      	ldrh	r2, [r3, #0]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557c:	1c9a      	adds	r2, r3, #2
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005586:	b29b      	uxth	r3, r3
 8005588:	3b01      	subs	r3, #1
 800558a:	b29a      	uxth	r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005590:	e02b      	b.n	80055ea <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f003 0302 	and.w	r3, r3, #2
 800559c:	2b02      	cmp	r3, #2
 800559e:	d112      	bne.n	80055c6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a4:	881a      	ldrh	r2, [r3, #0]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b0:	1c9a      	adds	r2, r3, #2
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	3b01      	subs	r3, #1
 80055be:	b29a      	uxth	r2, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055c4:	e011      	b.n	80055ea <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055c6:	f7fd f911 	bl	80027ec <HAL_GetTick>
 80055ca:	4602      	mov	r2, r0
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	683a      	ldr	r2, [r7, #0]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d803      	bhi.n	80055de <HAL_SPI_Transmit+0x16c>
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055dc:	d102      	bne.n	80055e4 <HAL_SPI_Transmit+0x172>
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d102      	bne.n	80055ea <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80055e8:	e0a4      	b.n	8005734 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1ce      	bne.n	8005592 <HAL_SPI_Transmit+0x120>
 80055f4:	e07c      	b.n	80056f0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d002      	beq.n	8005604 <HAL_SPI_Transmit+0x192>
 80055fe:	8afb      	ldrh	r3, [r7, #22]
 8005600:	2b01      	cmp	r3, #1
 8005602:	d170      	bne.n	80056e6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005608:	b29b      	uxth	r3, r3
 800560a:	2b01      	cmp	r3, #1
 800560c:	d912      	bls.n	8005634 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005612:	881a      	ldrh	r2, [r3, #0]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561e:	1c9a      	adds	r2, r3, #2
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005628:	b29b      	uxth	r3, r3
 800562a:	3b02      	subs	r3, #2
 800562c:	b29a      	uxth	r2, r3
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005632:	e058      	b.n	80056e6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	330c      	adds	r3, #12
 800563e:	7812      	ldrb	r2, [r2, #0]
 8005640:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005646:	1c5a      	adds	r2, r3, #1
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005650:	b29b      	uxth	r3, r3
 8005652:	3b01      	subs	r3, #1
 8005654:	b29a      	uxth	r2, r3
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800565a:	e044      	b.n	80056e6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	2b02      	cmp	r3, #2
 8005668:	d12b      	bne.n	80056c2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800566e:	b29b      	uxth	r3, r3
 8005670:	2b01      	cmp	r3, #1
 8005672:	d912      	bls.n	800569a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005678:	881a      	ldrh	r2, [r3, #0]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005684:	1c9a      	adds	r2, r3, #2
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800568e:	b29b      	uxth	r3, r3
 8005690:	3b02      	subs	r3, #2
 8005692:	b29a      	uxth	r2, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005698:	e025      	b.n	80056e6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	330c      	adds	r3, #12
 80056a4:	7812      	ldrb	r2, [r2, #0]
 80056a6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ac:	1c5a      	adds	r2, r3, #1
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	3b01      	subs	r3, #1
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056c0:	e011      	b.n	80056e6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056c2:	f7fd f893 	bl	80027ec <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	683a      	ldr	r2, [r7, #0]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d803      	bhi.n	80056da <HAL_SPI_Transmit+0x268>
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d8:	d102      	bne.n	80056e0 <HAL_SPI_Transmit+0x26e>
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d102      	bne.n	80056e6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80056e4:	e026      	b.n	8005734 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1b5      	bne.n	800565c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056f0:	69ba      	ldr	r2, [r7, #24]
 80056f2:	6839      	ldr	r1, [r7, #0]
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	f000 fcdf 	bl	80060b8 <SPI_EndRxTxTransaction>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d002      	beq.n	8005706 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2220      	movs	r2, #32
 8005704:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10a      	bne.n	8005724 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800570e:	2300      	movs	r3, #0
 8005710:	613b      	str	r3, [r7, #16]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	613b      	str	r3, [r7, #16]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	613b      	str	r3, [r7, #16]
 8005722:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005728:	2b00      	cmp	r3, #0
 800572a:	d002      	beq.n	8005732 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	77fb      	strb	r3, [r7, #31]
 8005730:	e000      	b.n	8005734 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005732:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005744:	7ffb      	ldrb	r3, [r7, #31]
}
 8005746:	4618      	mov	r0, r3
 8005748:	3720      	adds	r7, #32
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}

0800574e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800574e:	b580      	push	{r7, lr}
 8005750:	b088      	sub	sp, #32
 8005752:	af02      	add	r7, sp, #8
 8005754:	60f8      	str	r0, [r7, #12]
 8005756:	60b9      	str	r1, [r7, #8]
 8005758:	603b      	str	r3, [r7, #0]
 800575a:	4613      	mov	r3, r2
 800575c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800575e:	2300      	movs	r3, #0
 8005760:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800576a:	d112      	bne.n	8005792 <HAL_SPI_Receive+0x44>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d10e      	bne.n	8005792 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2204      	movs	r2, #4
 8005778:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800577c:	88fa      	ldrh	r2, [r7, #6]
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	4613      	mov	r3, r2
 8005784:	68ba      	ldr	r2, [r7, #8]
 8005786:	68b9      	ldr	r1, [r7, #8]
 8005788:	68f8      	ldr	r0, [r7, #12]
 800578a:	f000 f910 	bl	80059ae <HAL_SPI_TransmitReceive>
 800578e:	4603      	mov	r3, r0
 8005790:	e109      	b.n	80059a6 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005798:	2b01      	cmp	r3, #1
 800579a:	d101      	bne.n	80057a0 <HAL_SPI_Receive+0x52>
 800579c:	2302      	movs	r3, #2
 800579e:	e102      	b.n	80059a6 <HAL_SPI_Receive+0x258>
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057a8:	f7fd f820 	bl	80027ec <HAL_GetTick>
 80057ac:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d002      	beq.n	80057c0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80057ba:	2302      	movs	r3, #2
 80057bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80057be:	e0e9      	b.n	8005994 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d002      	beq.n	80057cc <HAL_SPI_Receive+0x7e>
 80057c6:	88fb      	ldrh	r3, [r7, #6]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d102      	bne.n	80057d2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	75fb      	strb	r3, [r7, #23]
    goto error;
 80057d0:	e0e0      	b.n	8005994 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2204      	movs	r2, #4
 80057d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	68ba      	ldr	r2, [r7, #8]
 80057e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	88fa      	ldrh	r2, [r7, #6]
 80057ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	88fa      	ldrh	r2, [r7, #6]
 80057f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800581c:	d908      	bls.n	8005830 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	685a      	ldr	r2, [r3, #4]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800582c:	605a      	str	r2, [r3, #4]
 800582e:	e007      	b.n	8005840 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	685a      	ldr	r2, [r3, #4]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800583e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005848:	d10f      	bne.n	800586a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005858:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005868:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005874:	2b40      	cmp	r3, #64	; 0x40
 8005876:	d007      	beq.n	8005888 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005886:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005890:	d867      	bhi.n	8005962 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005892:	e030      	b.n	80058f6 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f003 0301 	and.w	r3, r3, #1
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d117      	bne.n	80058d2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f103 020c 	add.w	r2, r3, #12
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ae:	7812      	ldrb	r2, [r2, #0]
 80058b0:	b2d2      	uxtb	r2, r2
 80058b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b8:	1c5a      	adds	r2, r3, #1
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	3b01      	subs	r3, #1
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80058d0:	e011      	b.n	80058f6 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058d2:	f7fc ff8b 	bl	80027ec <HAL_GetTick>
 80058d6:	4602      	mov	r2, r0
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	683a      	ldr	r2, [r7, #0]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d803      	bhi.n	80058ea <HAL_SPI_Receive+0x19c>
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e8:	d102      	bne.n	80058f0 <HAL_SPI_Receive+0x1a2>
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d102      	bne.n	80058f6 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80058f4:	e04e      	b.n	8005994 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1c8      	bne.n	8005894 <HAL_SPI_Receive+0x146>
 8005902:	e034      	b.n	800596e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	2b01      	cmp	r3, #1
 8005910:	d115      	bne.n	800593e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68da      	ldr	r2, [r3, #12]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591c:	b292      	uxth	r2, r2
 800591e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005924:	1c9a      	adds	r2, r3, #2
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005930:	b29b      	uxth	r3, r3
 8005932:	3b01      	subs	r3, #1
 8005934:	b29a      	uxth	r2, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800593c:	e011      	b.n	8005962 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800593e:	f7fc ff55 	bl	80027ec <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	683a      	ldr	r2, [r7, #0]
 800594a:	429a      	cmp	r2, r3
 800594c:	d803      	bhi.n	8005956 <HAL_SPI_Receive+0x208>
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005954:	d102      	bne.n	800595c <HAL_SPI_Receive+0x20e>
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d102      	bne.n	8005962 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005960:	e018      	b.n	8005994 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005968:	b29b      	uxth	r3, r3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d1ca      	bne.n	8005904 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800596e:	693a      	ldr	r2, [r7, #16]
 8005970:	6839      	ldr	r1, [r7, #0]
 8005972:	68f8      	ldr	r0, [r7, #12]
 8005974:	f000 fb48 	bl	8006008 <SPI_EndRxTransaction>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d002      	beq.n	8005984 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2220      	movs	r2, #32
 8005982:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005988:	2b00      	cmp	r3, #0
 800598a:	d002      	beq.n	8005992 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	75fb      	strb	r3, [r7, #23]
 8005990:	e000      	b.n	8005994 <HAL_SPI_Receive+0x246>
  }

error :
 8005992:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80059a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3718      	adds	r7, #24
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b08a      	sub	sp, #40	; 0x28
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	60f8      	str	r0, [r7, #12]
 80059b6:	60b9      	str	r1, [r7, #8]
 80059b8:	607a      	str	r2, [r7, #4]
 80059ba:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80059bc:	2301      	movs	r3, #1
 80059be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80059c0:	2300      	movs	r3, #0
 80059c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d101      	bne.n	80059d4 <HAL_SPI_TransmitReceive+0x26>
 80059d0:	2302      	movs	r3, #2
 80059d2:	e1fb      	b.n	8005dcc <HAL_SPI_TransmitReceive+0x41e>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059dc:	f7fc ff06 	bl	80027ec <HAL_GetTick>
 80059e0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80059e8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80059f0:	887b      	ldrh	r3, [r7, #2]
 80059f2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80059f4:	887b      	ldrh	r3, [r7, #2]
 80059f6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80059f8:	7efb      	ldrb	r3, [r7, #27]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d00e      	beq.n	8005a1c <HAL_SPI_TransmitReceive+0x6e>
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a04:	d106      	bne.n	8005a14 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d102      	bne.n	8005a14 <HAL_SPI_TransmitReceive+0x66>
 8005a0e:	7efb      	ldrb	r3, [r7, #27]
 8005a10:	2b04      	cmp	r3, #4
 8005a12:	d003      	beq.n	8005a1c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005a14:	2302      	movs	r3, #2
 8005a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005a1a:	e1cd      	b.n	8005db8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d005      	beq.n	8005a2e <HAL_SPI_TransmitReceive+0x80>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d002      	beq.n	8005a2e <HAL_SPI_TransmitReceive+0x80>
 8005a28:	887b      	ldrh	r3, [r7, #2]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d103      	bne.n	8005a36 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005a34:	e1c0      	b.n	8005db8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	2b04      	cmp	r3, #4
 8005a40:	d003      	beq.n	8005a4a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2205      	movs	r2, #5
 8005a46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	887a      	ldrh	r2, [r7, #2]
 8005a5a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	887a      	ldrh	r2, [r7, #2]
 8005a62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	68ba      	ldr	r2, [r7, #8]
 8005a6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	887a      	ldrh	r2, [r7, #2]
 8005a70:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	887a      	ldrh	r2, [r7, #2]
 8005a76:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a8c:	d802      	bhi.n	8005a94 <HAL_SPI_TransmitReceive+0xe6>
 8005a8e:	8a3b      	ldrh	r3, [r7, #16]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d908      	bls.n	8005aa6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	685a      	ldr	r2, [r3, #4]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005aa2:	605a      	str	r2, [r3, #4]
 8005aa4:	e007      	b.n	8005ab6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	685a      	ldr	r2, [r3, #4]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ab4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac0:	2b40      	cmp	r3, #64	; 0x40
 8005ac2:	d007      	beq.n	8005ad4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ad2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005adc:	d97c      	bls.n	8005bd8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d002      	beq.n	8005aec <HAL_SPI_TransmitReceive+0x13e>
 8005ae6:	8a7b      	ldrh	r3, [r7, #18]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d169      	bne.n	8005bc0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af0:	881a      	ldrh	r2, [r3, #0]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afc:	1c9a      	adds	r2, r3, #2
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b10:	e056      	b.n	8005bc0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	f003 0302 	and.w	r3, r3, #2
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d11b      	bne.n	8005b58 <HAL_SPI_TransmitReceive+0x1aa>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d016      	beq.n	8005b58 <HAL_SPI_TransmitReceive+0x1aa>
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d113      	bne.n	8005b58 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b34:	881a      	ldrh	r2, [r3, #0]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b40:	1c9a      	adds	r2, r3, #2
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b54:	2300      	movs	r3, #0
 8005b56:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d11c      	bne.n	8005ba0 <HAL_SPI_TransmitReceive+0x1f2>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d016      	beq.n	8005ba0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68da      	ldr	r2, [r3, #12]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7c:	b292      	uxth	r2, r2
 8005b7e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b84:	1c9a      	adds	r2, r3, #2
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	3b01      	subs	r3, #1
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005ba0:	f7fc fe24 	bl	80027ec <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d807      	bhi.n	8005bc0 <HAL_SPI_TransmitReceive+0x212>
 8005bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb6:	d003      	beq.n	8005bc0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005bbe:	e0fb      	b.n	8005db8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1a3      	bne.n	8005b12 <HAL_SPI_TransmitReceive+0x164>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d19d      	bne.n	8005b12 <HAL_SPI_TransmitReceive+0x164>
 8005bd6:	e0df      	b.n	8005d98 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d003      	beq.n	8005be8 <HAL_SPI_TransmitReceive+0x23a>
 8005be0:	8a7b      	ldrh	r3, [r7, #18]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	f040 80cb 	bne.w	8005d7e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d912      	bls.n	8005c18 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf6:	881a      	ldrh	r2, [r3, #0]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c02:	1c9a      	adds	r2, r3, #2
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	3b02      	subs	r3, #2
 8005c10:	b29a      	uxth	r2, r3
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c16:	e0b2      	b.n	8005d7e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	330c      	adds	r3, #12
 8005c22:	7812      	ldrb	r2, [r2, #0]
 8005c24:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2a:	1c5a      	adds	r2, r3, #1
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	3b01      	subs	r3, #1
 8005c38:	b29a      	uxth	r2, r3
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c3e:	e09e      	b.n	8005d7e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	f003 0302 	and.w	r3, r3, #2
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d134      	bne.n	8005cb8 <HAL_SPI_TransmitReceive+0x30a>
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d02f      	beq.n	8005cb8 <HAL_SPI_TransmitReceive+0x30a>
 8005c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d12c      	bne.n	8005cb8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d912      	bls.n	8005c8e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6c:	881a      	ldrh	r2, [r3, #0]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c78:	1c9a      	adds	r2, r3, #2
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	3b02      	subs	r3, #2
 8005c86:	b29a      	uxth	r2, r3
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c8c:	e012      	b.n	8005cb4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	330c      	adds	r3, #12
 8005c98:	7812      	ldrb	r2, [r2, #0]
 8005c9a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca0:	1c5a      	adds	r2, r3, #1
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	3b01      	subs	r3, #1
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f003 0301 	and.w	r3, r3, #1
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d148      	bne.n	8005d58 <HAL_SPI_TransmitReceive+0x3aa>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d042      	beq.n	8005d58 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d923      	bls.n	8005d26 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68da      	ldr	r2, [r3, #12]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce8:	b292      	uxth	r2, r2
 8005cea:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf0:	1c9a      	adds	r2, r3, #2
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	3b02      	subs	r3, #2
 8005d00:	b29a      	uxth	r2, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d81f      	bhi.n	8005d54 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	685a      	ldr	r2, [r3, #4]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d22:	605a      	str	r2, [r3, #4]
 8005d24:	e016      	b.n	8005d54 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f103 020c 	add.w	r2, r3, #12
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d32:	7812      	ldrb	r2, [r2, #0]
 8005d34:	b2d2      	uxtb	r2, r2
 8005d36:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3c:	1c5a      	adds	r2, r3, #1
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d54:	2301      	movs	r3, #1
 8005d56:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005d58:	f7fc fd48 	bl	80027ec <HAL_GetTick>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d803      	bhi.n	8005d70 <HAL_SPI_TransmitReceive+0x3c2>
 8005d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d6e:	d102      	bne.n	8005d76 <HAL_SPI_TransmitReceive+0x3c8>
 8005d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d103      	bne.n	8005d7e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005d7c:	e01c      	b.n	8005db8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f47f af5b 	bne.w	8005c40 <HAL_SPI_TransmitReceive+0x292>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	f47f af54 	bne.w	8005c40 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d98:	69fa      	ldr	r2, [r7, #28]
 8005d9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	f000 f98b 	bl	80060b8 <SPI_EndRxTxTransaction>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d006      	beq.n	8005db6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2220      	movs	r2, #32
 8005db2:	661a      	str	r2, [r3, #96]	; 0x60
 8005db4:	e000      	b.n	8005db8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005db6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005dc8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3728      	adds	r7, #40	; 0x28
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b088      	sub	sp, #32
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	603b      	str	r3, [r7, #0]
 8005de0:	4613      	mov	r3, r2
 8005de2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005de4:	f7fc fd02 	bl	80027ec <HAL_GetTick>
 8005de8:	4602      	mov	r2, r0
 8005dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dec:	1a9b      	subs	r3, r3, r2
 8005dee:	683a      	ldr	r2, [r7, #0]
 8005df0:	4413      	add	r3, r2
 8005df2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005df4:	f7fc fcfa 	bl	80027ec <HAL_GetTick>
 8005df8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005dfa:	4b39      	ldr	r3, [pc, #228]	; (8005ee0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	015b      	lsls	r3, r3, #5
 8005e00:	0d1b      	lsrs	r3, r3, #20
 8005e02:	69fa      	ldr	r2, [r7, #28]
 8005e04:	fb02 f303 	mul.w	r3, r2, r3
 8005e08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e0a:	e054      	b.n	8005eb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e12:	d050      	beq.n	8005eb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e14:	f7fc fcea 	bl	80027ec <HAL_GetTick>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	69fa      	ldr	r2, [r7, #28]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d902      	bls.n	8005e2a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d13d      	bne.n	8005ea6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	685a      	ldr	r2, [r3, #4]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e42:	d111      	bne.n	8005e68 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e4c:	d004      	beq.n	8005e58 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e56:	d107      	bne.n	8005e68 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e70:	d10f      	bne.n	8005e92 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e80:	601a      	str	r2, [r3, #0]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e017      	b.n	8005ed6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d101      	bne.n	8005eb0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005eac:	2300      	movs	r3, #0
 8005eae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	689a      	ldr	r2, [r3, #8]
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	68ba      	ldr	r2, [r7, #8]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	bf0c      	ite	eq
 8005ec6:	2301      	moveq	r3, #1
 8005ec8:	2300      	movne	r3, #0
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	461a      	mov	r2, r3
 8005ece:	79fb      	ldrb	r3, [r7, #7]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d19b      	bne.n	8005e0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3720      	adds	r7, #32
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	20000008 	.word	0x20000008

08005ee4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b088      	sub	sp, #32
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]
 8005ef0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005ef2:	f7fc fc7b 	bl	80027ec <HAL_GetTick>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005efa:	1a9b      	subs	r3, r3, r2
 8005efc:	683a      	ldr	r2, [r7, #0]
 8005efe:	4413      	add	r3, r2
 8005f00:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005f02:	f7fc fc73 	bl	80027ec <HAL_GetTick>
 8005f06:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005f08:	4b3e      	ldr	r3, [pc, #248]	; (8006004 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	4413      	add	r3, r2
 8005f12:	00da      	lsls	r2, r3, #3
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	0d1b      	lsrs	r3, r3, #20
 8005f18:	69fa      	ldr	r2, [r7, #28]
 8005f1a:	fb02 f303 	mul.w	r3, r2, r3
 8005f1e:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8005f20:	e062      	b.n	8005fe8 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005f28:	d109      	bne.n	8005f3e <SPI_WaitFifoStateUntilTimeout+0x5a>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d106      	bne.n	8005f3e <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	330c      	adds	r3, #12
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8005f3c:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f44:	d050      	beq.n	8005fe8 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f46:	f7fc fc51 	bl	80027ec <HAL_GetTick>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	69fa      	ldr	r2, [r7, #28]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d902      	bls.n	8005f5c <SPI_WaitFifoStateUntilTimeout+0x78>
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d13d      	bne.n	8005fd8 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	685a      	ldr	r2, [r3, #4]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005f6a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f74:	d111      	bne.n	8005f9a <SPI_WaitFifoStateUntilTimeout+0xb6>
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f7e:	d004      	beq.n	8005f8a <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f88:	d107      	bne.n	8005f9a <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f98:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fa2:	d10f      	bne.n	8005fc4 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fb2:	601a      	str	r2, [r3, #0]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fc2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e010      	b.n	8005ffa <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d101      	bne.n	8005fe2 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689a      	ldr	r2, [r3, #8]
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d194      	bne.n	8005f22 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3720      	adds	r7, #32
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	20000008 	.word	0x20000008

08006008 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af02      	add	r7, sp, #8
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800601c:	d111      	bne.n	8006042 <SPI_EndRxTransaction+0x3a>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006026:	d004      	beq.n	8006032 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006030:	d107      	bne.n	8006042 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006040:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	9300      	str	r3, [sp, #0]
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	2200      	movs	r2, #0
 800604a:	2180      	movs	r1, #128	; 0x80
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f7ff fec1 	bl	8005dd4 <SPI_WaitFlagStateUntilTimeout>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d007      	beq.n	8006068 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800605c:	f043 0220 	orr.w	r2, r3, #32
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006064:	2303      	movs	r3, #3
 8006066:	e023      	b.n	80060b0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006070:	d11d      	bne.n	80060ae <SPI_EndRxTransaction+0xa6>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800607a:	d004      	beq.n	8006086 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006084:	d113      	bne.n	80060ae <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	2200      	movs	r2, #0
 800608e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	f7ff ff26 	bl	8005ee4 <SPI_WaitFifoStateUntilTimeout>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d007      	beq.n	80060ae <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060a2:	f043 0220 	orr.w	r2, r3, #32
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80060aa:	2303      	movs	r3, #3
 80060ac:	e000      	b.n	80060b0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3710      	adds	r7, #16
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b086      	sub	sp, #24
 80060bc:	af02      	add	r7, sp, #8
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	9300      	str	r3, [sp, #0]
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80060d0:	68f8      	ldr	r0, [r7, #12]
 80060d2:	f7ff ff07 	bl	8005ee4 <SPI_WaitFifoStateUntilTimeout>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d007      	beq.n	80060ec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060e0:	f043 0220 	orr.w	r2, r3, #32
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e027      	b.n	800613c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	9300      	str	r3, [sp, #0]
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	2200      	movs	r2, #0
 80060f4:	2180      	movs	r1, #128	; 0x80
 80060f6:	68f8      	ldr	r0, [r7, #12]
 80060f8:	f7ff fe6c 	bl	8005dd4 <SPI_WaitFlagStateUntilTimeout>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d007      	beq.n	8006112 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006106:	f043 0220 	orr.w	r2, r3, #32
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e014      	b.n	800613c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	9300      	str	r3, [sp, #0]
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	2200      	movs	r2, #0
 800611a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800611e:	68f8      	ldr	r0, [r7, #12]
 8006120:	f7ff fee0 	bl	8005ee4 <SPI_WaitFifoStateUntilTimeout>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d007      	beq.n	800613a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800612e:	f043 0220 	orr.w	r2, r3, #32
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e000      	b.n	800613c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d101      	bne.n	8006156 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e040      	b.n	80061d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800615a:	2b00      	cmp	r3, #0
 800615c:	d106      	bne.n	800616c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f7fc fa0c 	bl	8002584 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2224      	movs	r2, #36	; 0x24
 8006170:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f022 0201 	bic.w	r2, r2, #1
 8006180:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f8c0 	bl	8006308 <UART_SetConfig>
 8006188:	4603      	mov	r3, r0
 800618a:	2b01      	cmp	r3, #1
 800618c:	d101      	bne.n	8006192 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e022      	b.n	80061d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006196:	2b00      	cmp	r3, #0
 8006198:	d002      	beq.n	80061a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 fb3e 	bl	800681c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	685a      	ldr	r2, [r3, #4]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	689a      	ldr	r2, [r3, #8]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f042 0201 	orr.w	r2, r2, #1
 80061ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 fbc5 	bl	8006960 <UART_CheckIdleState>
 80061d6:	4603      	mov	r3, r0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3708      	adds	r7, #8
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b08a      	sub	sp, #40	; 0x28
 80061e4:	af02      	add	r7, sp, #8
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	603b      	str	r3, [r7, #0]
 80061ec:	4613      	mov	r3, r2
 80061ee:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061f4:	2b20      	cmp	r3, #32
 80061f6:	f040 8082 	bne.w	80062fe <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d002      	beq.n	8006206 <HAL_UART_Transmit+0x26>
 8006200:	88fb      	ldrh	r3, [r7, #6]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d101      	bne.n	800620a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e07a      	b.n	8006300 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006210:	2b01      	cmp	r3, #1
 8006212:	d101      	bne.n	8006218 <HAL_UART_Transmit+0x38>
 8006214:	2302      	movs	r3, #2
 8006216:	e073      	b.n	8006300 <HAL_UART_Transmit+0x120>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2221      	movs	r2, #33	; 0x21
 800622c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800622e:	f7fc fadd 	bl	80027ec <HAL_GetTick>
 8006232:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	88fa      	ldrh	r2, [r7, #6]
 8006238:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	88fa      	ldrh	r2, [r7, #6]
 8006240:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800624c:	d108      	bne.n	8006260 <HAL_UART_Transmit+0x80>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d104      	bne.n	8006260 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006256:	2300      	movs	r3, #0
 8006258:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	61bb      	str	r3, [r7, #24]
 800625e:	e003      	b.n	8006268 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006264:	2300      	movs	r3, #0
 8006266:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006270:	e02d      	b.n	80062ce <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	9300      	str	r3, [sp, #0]
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	2200      	movs	r2, #0
 800627a:	2180      	movs	r1, #128	; 0x80
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f000 fbb8 	bl	80069f2 <UART_WaitOnFlagUntilTimeout>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d001      	beq.n	800628c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e039      	b.n	8006300 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10b      	bne.n	80062aa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	881a      	ldrh	r2, [r3, #0]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800629e:	b292      	uxth	r2, r2
 80062a0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	3302      	adds	r3, #2
 80062a6:	61bb      	str	r3, [r7, #24]
 80062a8:	e008      	b.n	80062bc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	781a      	ldrb	r2, [r3, #0]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	b292      	uxth	r2, r2
 80062b4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	3301      	adds	r3, #1
 80062ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	3b01      	subs	r3, #1
 80062c6:	b29a      	uxth	r2, r3
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1cb      	bne.n	8006272 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	9300      	str	r3, [sp, #0]
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	2200      	movs	r2, #0
 80062e2:	2140      	movs	r1, #64	; 0x40
 80062e4:	68f8      	ldr	r0, [r7, #12]
 80062e6:	f000 fb84 	bl	80069f2 <UART_WaitOnFlagUntilTimeout>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d001      	beq.n	80062f4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80062f0:	2303      	movs	r3, #3
 80062f2:	e005      	b.n	8006300 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2220      	movs	r2, #32
 80062f8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80062fa:	2300      	movs	r3, #0
 80062fc:	e000      	b.n	8006300 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80062fe:	2302      	movs	r3, #2
  }
}
 8006300:	4618      	mov	r0, r3
 8006302:	3720      	adds	r7, #32
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006308:	b5b0      	push	{r4, r5, r7, lr}
 800630a:	b088      	sub	sp, #32
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006310:	2300      	movs	r3, #0
 8006312:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	689a      	ldr	r2, [r3, #8]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	431a      	orrs	r2, r3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	431a      	orrs	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	69db      	ldr	r3, [r3, #28]
 8006328:	4313      	orrs	r3, r2
 800632a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	4bad      	ldr	r3, [pc, #692]	; (80065e8 <UART_SetConfig+0x2e0>)
 8006334:	4013      	ands	r3, r2
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	6812      	ldr	r2, [r2, #0]
 800633a:	69f9      	ldr	r1, [r7, #28]
 800633c:	430b      	orrs	r3, r1
 800633e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	68da      	ldr	r2, [r3, #12]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	430a      	orrs	r2, r1
 8006354:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4aa2      	ldr	r2, [pc, #648]	; (80065ec <UART_SetConfig+0x2e4>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d004      	beq.n	8006370 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a1b      	ldr	r3, [r3, #32]
 800636a:	69fa      	ldr	r2, [r7, #28]
 800636c:	4313      	orrs	r3, r2
 800636e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	69fa      	ldr	r2, [r7, #28]
 8006380:	430a      	orrs	r2, r1
 8006382:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a99      	ldr	r2, [pc, #612]	; (80065f0 <UART_SetConfig+0x2e8>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d121      	bne.n	80063d2 <UART_SetConfig+0xca>
 800638e:	4b99      	ldr	r3, [pc, #612]	; (80065f4 <UART_SetConfig+0x2ec>)
 8006390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006394:	f003 0303 	and.w	r3, r3, #3
 8006398:	2b03      	cmp	r3, #3
 800639a:	d817      	bhi.n	80063cc <UART_SetConfig+0xc4>
 800639c:	a201      	add	r2, pc, #4	; (adr r2, 80063a4 <UART_SetConfig+0x9c>)
 800639e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a2:	bf00      	nop
 80063a4:	080063b5 	.word	0x080063b5
 80063a8:	080063c1 	.word	0x080063c1
 80063ac:	080063bb 	.word	0x080063bb
 80063b0:	080063c7 	.word	0x080063c7
 80063b4:	2301      	movs	r3, #1
 80063b6:	76fb      	strb	r3, [r7, #27]
 80063b8:	e0e7      	b.n	800658a <UART_SetConfig+0x282>
 80063ba:	2302      	movs	r3, #2
 80063bc:	76fb      	strb	r3, [r7, #27]
 80063be:	e0e4      	b.n	800658a <UART_SetConfig+0x282>
 80063c0:	2304      	movs	r3, #4
 80063c2:	76fb      	strb	r3, [r7, #27]
 80063c4:	e0e1      	b.n	800658a <UART_SetConfig+0x282>
 80063c6:	2308      	movs	r3, #8
 80063c8:	76fb      	strb	r3, [r7, #27]
 80063ca:	e0de      	b.n	800658a <UART_SetConfig+0x282>
 80063cc:	2310      	movs	r3, #16
 80063ce:	76fb      	strb	r3, [r7, #27]
 80063d0:	e0db      	b.n	800658a <UART_SetConfig+0x282>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a88      	ldr	r2, [pc, #544]	; (80065f8 <UART_SetConfig+0x2f0>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d132      	bne.n	8006442 <UART_SetConfig+0x13a>
 80063dc:	4b85      	ldr	r3, [pc, #532]	; (80065f4 <UART_SetConfig+0x2ec>)
 80063de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063e2:	f003 030c 	and.w	r3, r3, #12
 80063e6:	2b0c      	cmp	r3, #12
 80063e8:	d828      	bhi.n	800643c <UART_SetConfig+0x134>
 80063ea:	a201      	add	r2, pc, #4	; (adr r2, 80063f0 <UART_SetConfig+0xe8>)
 80063ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f0:	08006425 	.word	0x08006425
 80063f4:	0800643d 	.word	0x0800643d
 80063f8:	0800643d 	.word	0x0800643d
 80063fc:	0800643d 	.word	0x0800643d
 8006400:	08006431 	.word	0x08006431
 8006404:	0800643d 	.word	0x0800643d
 8006408:	0800643d 	.word	0x0800643d
 800640c:	0800643d 	.word	0x0800643d
 8006410:	0800642b 	.word	0x0800642b
 8006414:	0800643d 	.word	0x0800643d
 8006418:	0800643d 	.word	0x0800643d
 800641c:	0800643d 	.word	0x0800643d
 8006420:	08006437 	.word	0x08006437
 8006424:	2300      	movs	r3, #0
 8006426:	76fb      	strb	r3, [r7, #27]
 8006428:	e0af      	b.n	800658a <UART_SetConfig+0x282>
 800642a:	2302      	movs	r3, #2
 800642c:	76fb      	strb	r3, [r7, #27]
 800642e:	e0ac      	b.n	800658a <UART_SetConfig+0x282>
 8006430:	2304      	movs	r3, #4
 8006432:	76fb      	strb	r3, [r7, #27]
 8006434:	e0a9      	b.n	800658a <UART_SetConfig+0x282>
 8006436:	2308      	movs	r3, #8
 8006438:	76fb      	strb	r3, [r7, #27]
 800643a:	e0a6      	b.n	800658a <UART_SetConfig+0x282>
 800643c:	2310      	movs	r3, #16
 800643e:	76fb      	strb	r3, [r7, #27]
 8006440:	e0a3      	b.n	800658a <UART_SetConfig+0x282>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a6d      	ldr	r2, [pc, #436]	; (80065fc <UART_SetConfig+0x2f4>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d120      	bne.n	800648e <UART_SetConfig+0x186>
 800644c:	4b69      	ldr	r3, [pc, #420]	; (80065f4 <UART_SetConfig+0x2ec>)
 800644e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006452:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006456:	2b30      	cmp	r3, #48	; 0x30
 8006458:	d013      	beq.n	8006482 <UART_SetConfig+0x17a>
 800645a:	2b30      	cmp	r3, #48	; 0x30
 800645c:	d814      	bhi.n	8006488 <UART_SetConfig+0x180>
 800645e:	2b20      	cmp	r3, #32
 8006460:	d009      	beq.n	8006476 <UART_SetConfig+0x16e>
 8006462:	2b20      	cmp	r3, #32
 8006464:	d810      	bhi.n	8006488 <UART_SetConfig+0x180>
 8006466:	2b00      	cmp	r3, #0
 8006468:	d002      	beq.n	8006470 <UART_SetConfig+0x168>
 800646a:	2b10      	cmp	r3, #16
 800646c:	d006      	beq.n	800647c <UART_SetConfig+0x174>
 800646e:	e00b      	b.n	8006488 <UART_SetConfig+0x180>
 8006470:	2300      	movs	r3, #0
 8006472:	76fb      	strb	r3, [r7, #27]
 8006474:	e089      	b.n	800658a <UART_SetConfig+0x282>
 8006476:	2302      	movs	r3, #2
 8006478:	76fb      	strb	r3, [r7, #27]
 800647a:	e086      	b.n	800658a <UART_SetConfig+0x282>
 800647c:	2304      	movs	r3, #4
 800647e:	76fb      	strb	r3, [r7, #27]
 8006480:	e083      	b.n	800658a <UART_SetConfig+0x282>
 8006482:	2308      	movs	r3, #8
 8006484:	76fb      	strb	r3, [r7, #27]
 8006486:	e080      	b.n	800658a <UART_SetConfig+0x282>
 8006488:	2310      	movs	r3, #16
 800648a:	76fb      	strb	r3, [r7, #27]
 800648c:	e07d      	b.n	800658a <UART_SetConfig+0x282>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a5b      	ldr	r2, [pc, #364]	; (8006600 <UART_SetConfig+0x2f8>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d120      	bne.n	80064da <UART_SetConfig+0x1d2>
 8006498:	4b56      	ldr	r3, [pc, #344]	; (80065f4 <UART_SetConfig+0x2ec>)
 800649a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800649e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80064a2:	2bc0      	cmp	r3, #192	; 0xc0
 80064a4:	d013      	beq.n	80064ce <UART_SetConfig+0x1c6>
 80064a6:	2bc0      	cmp	r3, #192	; 0xc0
 80064a8:	d814      	bhi.n	80064d4 <UART_SetConfig+0x1cc>
 80064aa:	2b80      	cmp	r3, #128	; 0x80
 80064ac:	d009      	beq.n	80064c2 <UART_SetConfig+0x1ba>
 80064ae:	2b80      	cmp	r3, #128	; 0x80
 80064b0:	d810      	bhi.n	80064d4 <UART_SetConfig+0x1cc>
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d002      	beq.n	80064bc <UART_SetConfig+0x1b4>
 80064b6:	2b40      	cmp	r3, #64	; 0x40
 80064b8:	d006      	beq.n	80064c8 <UART_SetConfig+0x1c0>
 80064ba:	e00b      	b.n	80064d4 <UART_SetConfig+0x1cc>
 80064bc:	2300      	movs	r3, #0
 80064be:	76fb      	strb	r3, [r7, #27]
 80064c0:	e063      	b.n	800658a <UART_SetConfig+0x282>
 80064c2:	2302      	movs	r3, #2
 80064c4:	76fb      	strb	r3, [r7, #27]
 80064c6:	e060      	b.n	800658a <UART_SetConfig+0x282>
 80064c8:	2304      	movs	r3, #4
 80064ca:	76fb      	strb	r3, [r7, #27]
 80064cc:	e05d      	b.n	800658a <UART_SetConfig+0x282>
 80064ce:	2308      	movs	r3, #8
 80064d0:	76fb      	strb	r3, [r7, #27]
 80064d2:	e05a      	b.n	800658a <UART_SetConfig+0x282>
 80064d4:	2310      	movs	r3, #16
 80064d6:	76fb      	strb	r3, [r7, #27]
 80064d8:	e057      	b.n	800658a <UART_SetConfig+0x282>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a49      	ldr	r2, [pc, #292]	; (8006604 <UART_SetConfig+0x2fc>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d125      	bne.n	8006530 <UART_SetConfig+0x228>
 80064e4:	4b43      	ldr	r3, [pc, #268]	; (80065f4 <UART_SetConfig+0x2ec>)
 80064e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064f2:	d017      	beq.n	8006524 <UART_SetConfig+0x21c>
 80064f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064f8:	d817      	bhi.n	800652a <UART_SetConfig+0x222>
 80064fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064fe:	d00b      	beq.n	8006518 <UART_SetConfig+0x210>
 8006500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006504:	d811      	bhi.n	800652a <UART_SetConfig+0x222>
 8006506:	2b00      	cmp	r3, #0
 8006508:	d003      	beq.n	8006512 <UART_SetConfig+0x20a>
 800650a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800650e:	d006      	beq.n	800651e <UART_SetConfig+0x216>
 8006510:	e00b      	b.n	800652a <UART_SetConfig+0x222>
 8006512:	2300      	movs	r3, #0
 8006514:	76fb      	strb	r3, [r7, #27]
 8006516:	e038      	b.n	800658a <UART_SetConfig+0x282>
 8006518:	2302      	movs	r3, #2
 800651a:	76fb      	strb	r3, [r7, #27]
 800651c:	e035      	b.n	800658a <UART_SetConfig+0x282>
 800651e:	2304      	movs	r3, #4
 8006520:	76fb      	strb	r3, [r7, #27]
 8006522:	e032      	b.n	800658a <UART_SetConfig+0x282>
 8006524:	2308      	movs	r3, #8
 8006526:	76fb      	strb	r3, [r7, #27]
 8006528:	e02f      	b.n	800658a <UART_SetConfig+0x282>
 800652a:	2310      	movs	r3, #16
 800652c:	76fb      	strb	r3, [r7, #27]
 800652e:	e02c      	b.n	800658a <UART_SetConfig+0x282>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a2d      	ldr	r2, [pc, #180]	; (80065ec <UART_SetConfig+0x2e4>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d125      	bne.n	8006586 <UART_SetConfig+0x27e>
 800653a:	4b2e      	ldr	r3, [pc, #184]	; (80065f4 <UART_SetConfig+0x2ec>)
 800653c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006540:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006544:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006548:	d017      	beq.n	800657a <UART_SetConfig+0x272>
 800654a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800654e:	d817      	bhi.n	8006580 <UART_SetConfig+0x278>
 8006550:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006554:	d00b      	beq.n	800656e <UART_SetConfig+0x266>
 8006556:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800655a:	d811      	bhi.n	8006580 <UART_SetConfig+0x278>
 800655c:	2b00      	cmp	r3, #0
 800655e:	d003      	beq.n	8006568 <UART_SetConfig+0x260>
 8006560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006564:	d006      	beq.n	8006574 <UART_SetConfig+0x26c>
 8006566:	e00b      	b.n	8006580 <UART_SetConfig+0x278>
 8006568:	2300      	movs	r3, #0
 800656a:	76fb      	strb	r3, [r7, #27]
 800656c:	e00d      	b.n	800658a <UART_SetConfig+0x282>
 800656e:	2302      	movs	r3, #2
 8006570:	76fb      	strb	r3, [r7, #27]
 8006572:	e00a      	b.n	800658a <UART_SetConfig+0x282>
 8006574:	2304      	movs	r3, #4
 8006576:	76fb      	strb	r3, [r7, #27]
 8006578:	e007      	b.n	800658a <UART_SetConfig+0x282>
 800657a:	2308      	movs	r3, #8
 800657c:	76fb      	strb	r3, [r7, #27]
 800657e:	e004      	b.n	800658a <UART_SetConfig+0x282>
 8006580:	2310      	movs	r3, #16
 8006582:	76fb      	strb	r3, [r7, #27]
 8006584:	e001      	b.n	800658a <UART_SetConfig+0x282>
 8006586:	2310      	movs	r3, #16
 8006588:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a17      	ldr	r2, [pc, #92]	; (80065ec <UART_SetConfig+0x2e4>)
 8006590:	4293      	cmp	r3, r2
 8006592:	f040 8087 	bne.w	80066a4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006596:	7efb      	ldrb	r3, [r7, #27]
 8006598:	2b08      	cmp	r3, #8
 800659a:	d837      	bhi.n	800660c <UART_SetConfig+0x304>
 800659c:	a201      	add	r2, pc, #4	; (adr r2, 80065a4 <UART_SetConfig+0x29c>)
 800659e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a2:	bf00      	nop
 80065a4:	080065c9 	.word	0x080065c9
 80065a8:	0800660d 	.word	0x0800660d
 80065ac:	080065d1 	.word	0x080065d1
 80065b0:	0800660d 	.word	0x0800660d
 80065b4:	080065d7 	.word	0x080065d7
 80065b8:	0800660d 	.word	0x0800660d
 80065bc:	0800660d 	.word	0x0800660d
 80065c0:	0800660d 	.word	0x0800660d
 80065c4:	080065df 	.word	0x080065df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065c8:	f7fe f968 	bl	800489c <HAL_RCC_GetPCLK1Freq>
 80065cc:	6178      	str	r0, [r7, #20]
        break;
 80065ce:	e022      	b.n	8006616 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065d0:	4b0d      	ldr	r3, [pc, #52]	; (8006608 <UART_SetConfig+0x300>)
 80065d2:	617b      	str	r3, [r7, #20]
        break;
 80065d4:	e01f      	b.n	8006616 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065d6:	f7fe f8c9 	bl	800476c <HAL_RCC_GetSysClockFreq>
 80065da:	6178      	str	r0, [r7, #20]
        break;
 80065dc:	e01b      	b.n	8006616 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065e2:	617b      	str	r3, [r7, #20]
        break;
 80065e4:	e017      	b.n	8006616 <UART_SetConfig+0x30e>
 80065e6:	bf00      	nop
 80065e8:	efff69f3 	.word	0xefff69f3
 80065ec:	40008000 	.word	0x40008000
 80065f0:	40013800 	.word	0x40013800
 80065f4:	40021000 	.word	0x40021000
 80065f8:	40004400 	.word	0x40004400
 80065fc:	40004800 	.word	0x40004800
 8006600:	40004c00 	.word	0x40004c00
 8006604:	40005000 	.word	0x40005000
 8006608:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800660c:	2300      	movs	r3, #0
 800660e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	76bb      	strb	r3, [r7, #26]
        break;
 8006614:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	2b00      	cmp	r3, #0
 800661a:	f000 80f1 	beq.w	8006800 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	685a      	ldr	r2, [r3, #4]
 8006622:	4613      	mov	r3, r2
 8006624:	005b      	lsls	r3, r3, #1
 8006626:	4413      	add	r3, r2
 8006628:	697a      	ldr	r2, [r7, #20]
 800662a:	429a      	cmp	r2, r3
 800662c:	d305      	bcc.n	800663a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006634:	697a      	ldr	r2, [r7, #20]
 8006636:	429a      	cmp	r2, r3
 8006638:	d902      	bls.n	8006640 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	76bb      	strb	r3, [r7, #26]
 800663e:	e0df      	b.n	8006800 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	4618      	mov	r0, r3
 8006644:	f04f 0100 	mov.w	r1, #0
 8006648:	f04f 0200 	mov.w	r2, #0
 800664c:	f04f 0300 	mov.w	r3, #0
 8006650:	020b      	lsls	r3, r1, #8
 8006652:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006656:	0202      	lsls	r2, r0, #8
 8006658:	6879      	ldr	r1, [r7, #4]
 800665a:	6849      	ldr	r1, [r1, #4]
 800665c:	0849      	lsrs	r1, r1, #1
 800665e:	4608      	mov	r0, r1
 8006660:	f04f 0100 	mov.w	r1, #0
 8006664:	1814      	adds	r4, r2, r0
 8006666:	eb43 0501 	adc.w	r5, r3, r1
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	461a      	mov	r2, r3
 8006670:	f04f 0300 	mov.w	r3, #0
 8006674:	4620      	mov	r0, r4
 8006676:	4629      	mov	r1, r5
 8006678:	f7fa fa38 	bl	8000aec <__aeabi_uldivmod>
 800667c:	4602      	mov	r2, r0
 800667e:	460b      	mov	r3, r1
 8006680:	4613      	mov	r3, r2
 8006682:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800668a:	d308      	bcc.n	800669e <UART_SetConfig+0x396>
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006692:	d204      	bcs.n	800669e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	693a      	ldr	r2, [r7, #16]
 800669a:	60da      	str	r2, [r3, #12]
 800669c:	e0b0      	b.n	8006800 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	76bb      	strb	r3, [r7, #26]
 80066a2:	e0ad      	b.n	8006800 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	69db      	ldr	r3, [r3, #28]
 80066a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066ac:	d15c      	bne.n	8006768 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80066ae:	7efb      	ldrb	r3, [r7, #27]
 80066b0:	2b08      	cmp	r3, #8
 80066b2:	d828      	bhi.n	8006706 <UART_SetConfig+0x3fe>
 80066b4:	a201      	add	r2, pc, #4	; (adr r2, 80066bc <UART_SetConfig+0x3b4>)
 80066b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ba:	bf00      	nop
 80066bc:	080066e1 	.word	0x080066e1
 80066c0:	080066e9 	.word	0x080066e9
 80066c4:	080066f1 	.word	0x080066f1
 80066c8:	08006707 	.word	0x08006707
 80066cc:	080066f7 	.word	0x080066f7
 80066d0:	08006707 	.word	0x08006707
 80066d4:	08006707 	.word	0x08006707
 80066d8:	08006707 	.word	0x08006707
 80066dc:	080066ff 	.word	0x080066ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066e0:	f7fe f8dc 	bl	800489c <HAL_RCC_GetPCLK1Freq>
 80066e4:	6178      	str	r0, [r7, #20]
        break;
 80066e6:	e013      	b.n	8006710 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066e8:	f7fe f8ee 	bl	80048c8 <HAL_RCC_GetPCLK2Freq>
 80066ec:	6178      	str	r0, [r7, #20]
        break;
 80066ee:	e00f      	b.n	8006710 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066f0:	4b49      	ldr	r3, [pc, #292]	; (8006818 <UART_SetConfig+0x510>)
 80066f2:	617b      	str	r3, [r7, #20]
        break;
 80066f4:	e00c      	b.n	8006710 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066f6:	f7fe f839 	bl	800476c <HAL_RCC_GetSysClockFreq>
 80066fa:	6178      	str	r0, [r7, #20]
        break;
 80066fc:	e008      	b.n	8006710 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006702:	617b      	str	r3, [r7, #20]
        break;
 8006704:	e004      	b.n	8006710 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006706:	2300      	movs	r3, #0
 8006708:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	76bb      	strb	r3, [r7, #26]
        break;
 800670e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d074      	beq.n	8006800 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	005a      	lsls	r2, r3, #1
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	085b      	lsrs	r3, r3, #1
 8006720:	441a      	add	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	fbb2 f3f3 	udiv	r3, r2, r3
 800672a:	b29b      	uxth	r3, r3
 800672c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	2b0f      	cmp	r3, #15
 8006732:	d916      	bls.n	8006762 <UART_SetConfig+0x45a>
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800673a:	d212      	bcs.n	8006762 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	b29b      	uxth	r3, r3
 8006740:	f023 030f 	bic.w	r3, r3, #15
 8006744:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	085b      	lsrs	r3, r3, #1
 800674a:	b29b      	uxth	r3, r3
 800674c:	f003 0307 	and.w	r3, r3, #7
 8006750:	b29a      	uxth	r2, r3
 8006752:	89fb      	ldrh	r3, [r7, #14]
 8006754:	4313      	orrs	r3, r2
 8006756:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	89fa      	ldrh	r2, [r7, #14]
 800675e:	60da      	str	r2, [r3, #12]
 8006760:	e04e      	b.n	8006800 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	76bb      	strb	r3, [r7, #26]
 8006766:	e04b      	b.n	8006800 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006768:	7efb      	ldrb	r3, [r7, #27]
 800676a:	2b08      	cmp	r3, #8
 800676c:	d827      	bhi.n	80067be <UART_SetConfig+0x4b6>
 800676e:	a201      	add	r2, pc, #4	; (adr r2, 8006774 <UART_SetConfig+0x46c>)
 8006770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006774:	08006799 	.word	0x08006799
 8006778:	080067a1 	.word	0x080067a1
 800677c:	080067a9 	.word	0x080067a9
 8006780:	080067bf 	.word	0x080067bf
 8006784:	080067af 	.word	0x080067af
 8006788:	080067bf 	.word	0x080067bf
 800678c:	080067bf 	.word	0x080067bf
 8006790:	080067bf 	.word	0x080067bf
 8006794:	080067b7 	.word	0x080067b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006798:	f7fe f880 	bl	800489c <HAL_RCC_GetPCLK1Freq>
 800679c:	6178      	str	r0, [r7, #20]
        break;
 800679e:	e013      	b.n	80067c8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067a0:	f7fe f892 	bl	80048c8 <HAL_RCC_GetPCLK2Freq>
 80067a4:	6178      	str	r0, [r7, #20]
        break;
 80067a6:	e00f      	b.n	80067c8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067a8:	4b1b      	ldr	r3, [pc, #108]	; (8006818 <UART_SetConfig+0x510>)
 80067aa:	617b      	str	r3, [r7, #20]
        break;
 80067ac:	e00c      	b.n	80067c8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067ae:	f7fd ffdd 	bl	800476c <HAL_RCC_GetSysClockFreq>
 80067b2:	6178      	str	r0, [r7, #20]
        break;
 80067b4:	e008      	b.n	80067c8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067ba:	617b      	str	r3, [r7, #20]
        break;
 80067bc:	e004      	b.n	80067c8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80067be:	2300      	movs	r3, #0
 80067c0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	76bb      	strb	r3, [r7, #26]
        break;
 80067c6:	bf00      	nop
    }

    if (pclk != 0U)
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d018      	beq.n	8006800 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	085a      	lsrs	r2, r3, #1
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	441a      	add	r2, r3
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	2b0f      	cmp	r3, #15
 80067e8:	d908      	bls.n	80067fc <UART_SetConfig+0x4f4>
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067f0:	d204      	bcs.n	80067fc <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	60da      	str	r2, [r3, #12]
 80067fa:	e001      	b.n	8006800 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800680c:	7ebb      	ldrb	r3, [r7, #26]
}
 800680e:	4618      	mov	r0, r3
 8006810:	3720      	adds	r7, #32
 8006812:	46bd      	mov	sp, r7
 8006814:	bdb0      	pop	{r4, r5, r7, pc}
 8006816:	bf00      	nop
 8006818:	00f42400 	.word	0x00f42400

0800681c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006828:	f003 0301 	and.w	r3, r3, #1
 800682c:	2b00      	cmp	r3, #0
 800682e:	d00a      	beq.n	8006846 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	430a      	orrs	r2, r1
 8006844:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684a:	f003 0302 	and.w	r3, r3, #2
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00a      	beq.n	8006868 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	430a      	orrs	r2, r1
 8006866:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686c:	f003 0304 	and.w	r3, r3, #4
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00a      	beq.n	800688a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	430a      	orrs	r2, r1
 8006888:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688e:	f003 0308 	and.w	r3, r3, #8
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00a      	beq.n	80068ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	430a      	orrs	r2, r1
 80068aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b0:	f003 0310 	and.w	r3, r3, #16
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d00a      	beq.n	80068ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	430a      	orrs	r2, r1
 80068cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d2:	f003 0320 	and.w	r3, r3, #32
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00a      	beq.n	80068f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	430a      	orrs	r2, r1
 80068ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d01a      	beq.n	8006932 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	430a      	orrs	r2, r1
 8006910:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006916:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800691a:	d10a      	bne.n	8006932 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	430a      	orrs	r2, r1
 8006930:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00a      	beq.n	8006954 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	430a      	orrs	r2, r1
 8006952:	605a      	str	r2, [r3, #4]
  }
}
 8006954:	bf00      	nop
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b086      	sub	sp, #24
 8006964:	af02      	add	r7, sp, #8
 8006966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006970:	f7fb ff3c 	bl	80027ec <HAL_GetTick>
 8006974:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 0308 	and.w	r3, r3, #8
 8006980:	2b08      	cmp	r3, #8
 8006982:	d10e      	bne.n	80069a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006984:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006988:	9300      	str	r3, [sp, #0]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2200      	movs	r2, #0
 800698e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 f82d 	bl	80069f2 <UART_WaitOnFlagUntilTimeout>
 8006998:	4603      	mov	r3, r0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d001      	beq.n	80069a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e023      	b.n	80069ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0304 	and.w	r3, r3, #4
 80069ac:	2b04      	cmp	r3, #4
 80069ae:	d10e      	bne.n	80069ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069b4:	9300      	str	r3, [sp, #0]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 f817 	bl	80069f2 <UART_WaitOnFlagUntilTimeout>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d001      	beq.n	80069ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069ca:	2303      	movs	r3, #3
 80069cc:	e00d      	b.n	80069ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2220      	movs	r2, #32
 80069d2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2220      	movs	r2, #32
 80069d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2200      	movs	r2, #0
 80069de:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b084      	sub	sp, #16
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	60f8      	str	r0, [r7, #12]
 80069fa:	60b9      	str	r1, [r7, #8]
 80069fc:	603b      	str	r3, [r7, #0]
 80069fe:	4613      	mov	r3, r2
 8006a00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a02:	e05e      	b.n	8006ac2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a0a:	d05a      	beq.n	8006ac2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a0c:	f7fb feee 	bl	80027ec <HAL_GetTick>
 8006a10:	4602      	mov	r2, r0
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	69ba      	ldr	r2, [r7, #24]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d302      	bcc.n	8006a22 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d11b      	bne.n	8006a5a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a30:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	689a      	ldr	r2, [r3, #8]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f022 0201 	bic.w	r2, r2, #1
 8006a40:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2220      	movs	r2, #32
 8006a46:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2220      	movs	r2, #32
 8006a4c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006a56:	2303      	movs	r3, #3
 8006a58:	e043      	b.n	8006ae2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 0304 	and.w	r3, r3, #4
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d02c      	beq.n	8006ac2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	69db      	ldr	r3, [r3, #28]
 8006a6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a76:	d124      	bne.n	8006ac2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a80:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a90:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	689a      	ldr	r2, [r3, #8]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f022 0201 	bic.w	r2, r2, #1
 8006aa0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2220      	movs	r2, #32
 8006aa6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2220      	movs	r2, #32
 8006aac:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2220      	movs	r2, #32
 8006ab2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	e00f      	b.n	8006ae2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	69da      	ldr	r2, [r3, #28]
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	4013      	ands	r3, r2
 8006acc:	68ba      	ldr	r2, [r7, #8]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	bf0c      	ite	eq
 8006ad2:	2301      	moveq	r3, #1
 8006ad4:	2300      	movne	r3, #0
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	461a      	mov	r2, r3
 8006ada:	79fb      	ldrb	r3, [r7, #7]
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d091      	beq.n	8006a04 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
	...

08006aec <__errno>:
 8006aec:	4b01      	ldr	r3, [pc, #4]	; (8006af4 <__errno+0x8>)
 8006aee:	6818      	ldr	r0, [r3, #0]
 8006af0:	4770      	bx	lr
 8006af2:	bf00      	nop
 8006af4:	20000014 	.word	0x20000014

08006af8 <__libc_init_array>:
 8006af8:	b570      	push	{r4, r5, r6, lr}
 8006afa:	4d0d      	ldr	r5, [pc, #52]	; (8006b30 <__libc_init_array+0x38>)
 8006afc:	4c0d      	ldr	r4, [pc, #52]	; (8006b34 <__libc_init_array+0x3c>)
 8006afe:	1b64      	subs	r4, r4, r5
 8006b00:	10a4      	asrs	r4, r4, #2
 8006b02:	2600      	movs	r6, #0
 8006b04:	42a6      	cmp	r6, r4
 8006b06:	d109      	bne.n	8006b1c <__libc_init_array+0x24>
 8006b08:	4d0b      	ldr	r5, [pc, #44]	; (8006b38 <__libc_init_array+0x40>)
 8006b0a:	4c0c      	ldr	r4, [pc, #48]	; (8006b3c <__libc_init_array+0x44>)
 8006b0c:	f000 fc4e 	bl	80073ac <_init>
 8006b10:	1b64      	subs	r4, r4, r5
 8006b12:	10a4      	asrs	r4, r4, #2
 8006b14:	2600      	movs	r6, #0
 8006b16:	42a6      	cmp	r6, r4
 8006b18:	d105      	bne.n	8006b26 <__libc_init_array+0x2e>
 8006b1a:	bd70      	pop	{r4, r5, r6, pc}
 8006b1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b20:	4798      	blx	r3
 8006b22:	3601      	adds	r6, #1
 8006b24:	e7ee      	b.n	8006b04 <__libc_init_array+0xc>
 8006b26:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b2a:	4798      	blx	r3
 8006b2c:	3601      	adds	r6, #1
 8006b2e:	e7f2      	b.n	8006b16 <__libc_init_array+0x1e>
 8006b30:	080074a0 	.word	0x080074a0
 8006b34:	080074a0 	.word	0x080074a0
 8006b38:	080074a0 	.word	0x080074a0
 8006b3c:	080074a4 	.word	0x080074a4

08006b40 <memset>:
 8006b40:	4402      	add	r2, r0
 8006b42:	4603      	mov	r3, r0
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d100      	bne.n	8006b4a <memset+0xa>
 8006b48:	4770      	bx	lr
 8006b4a:	f803 1b01 	strb.w	r1, [r3], #1
 8006b4e:	e7f9      	b.n	8006b44 <memset+0x4>

08006b50 <siprintf>:
 8006b50:	b40e      	push	{r1, r2, r3}
 8006b52:	b500      	push	{lr}
 8006b54:	b09c      	sub	sp, #112	; 0x70
 8006b56:	ab1d      	add	r3, sp, #116	; 0x74
 8006b58:	9002      	str	r0, [sp, #8]
 8006b5a:	9006      	str	r0, [sp, #24]
 8006b5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006b60:	4809      	ldr	r0, [pc, #36]	; (8006b88 <siprintf+0x38>)
 8006b62:	9107      	str	r1, [sp, #28]
 8006b64:	9104      	str	r1, [sp, #16]
 8006b66:	4909      	ldr	r1, [pc, #36]	; (8006b8c <siprintf+0x3c>)
 8006b68:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b6c:	9105      	str	r1, [sp, #20]
 8006b6e:	6800      	ldr	r0, [r0, #0]
 8006b70:	9301      	str	r3, [sp, #4]
 8006b72:	a902      	add	r1, sp, #8
 8006b74:	f000 f868 	bl	8006c48 <_svfiprintf_r>
 8006b78:	9b02      	ldr	r3, [sp, #8]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	701a      	strb	r2, [r3, #0]
 8006b7e:	b01c      	add	sp, #112	; 0x70
 8006b80:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b84:	b003      	add	sp, #12
 8006b86:	4770      	bx	lr
 8006b88:	20000014 	.word	0x20000014
 8006b8c:	ffff0208 	.word	0xffff0208

08006b90 <__ssputs_r>:
 8006b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b94:	688e      	ldr	r6, [r1, #8]
 8006b96:	429e      	cmp	r6, r3
 8006b98:	4682      	mov	sl, r0
 8006b9a:	460c      	mov	r4, r1
 8006b9c:	4690      	mov	r8, r2
 8006b9e:	461f      	mov	r7, r3
 8006ba0:	d838      	bhi.n	8006c14 <__ssputs_r+0x84>
 8006ba2:	898a      	ldrh	r2, [r1, #12]
 8006ba4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006ba8:	d032      	beq.n	8006c10 <__ssputs_r+0x80>
 8006baa:	6825      	ldr	r5, [r4, #0]
 8006bac:	6909      	ldr	r1, [r1, #16]
 8006bae:	eba5 0901 	sub.w	r9, r5, r1
 8006bb2:	6965      	ldr	r5, [r4, #20]
 8006bb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006bb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	444b      	add	r3, r9
 8006bc0:	106d      	asrs	r5, r5, #1
 8006bc2:	429d      	cmp	r5, r3
 8006bc4:	bf38      	it	cc
 8006bc6:	461d      	movcc	r5, r3
 8006bc8:	0553      	lsls	r3, r2, #21
 8006bca:	d531      	bpl.n	8006c30 <__ssputs_r+0xa0>
 8006bcc:	4629      	mov	r1, r5
 8006bce:	f000 fb47 	bl	8007260 <_malloc_r>
 8006bd2:	4606      	mov	r6, r0
 8006bd4:	b950      	cbnz	r0, 8006bec <__ssputs_r+0x5c>
 8006bd6:	230c      	movs	r3, #12
 8006bd8:	f8ca 3000 	str.w	r3, [sl]
 8006bdc:	89a3      	ldrh	r3, [r4, #12]
 8006bde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006be2:	81a3      	strh	r3, [r4, #12]
 8006be4:	f04f 30ff 	mov.w	r0, #4294967295
 8006be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bec:	6921      	ldr	r1, [r4, #16]
 8006bee:	464a      	mov	r2, r9
 8006bf0:	f000 fabe 	bl	8007170 <memcpy>
 8006bf4:	89a3      	ldrh	r3, [r4, #12]
 8006bf6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bfe:	81a3      	strh	r3, [r4, #12]
 8006c00:	6126      	str	r6, [r4, #16]
 8006c02:	6165      	str	r5, [r4, #20]
 8006c04:	444e      	add	r6, r9
 8006c06:	eba5 0509 	sub.w	r5, r5, r9
 8006c0a:	6026      	str	r6, [r4, #0]
 8006c0c:	60a5      	str	r5, [r4, #8]
 8006c0e:	463e      	mov	r6, r7
 8006c10:	42be      	cmp	r6, r7
 8006c12:	d900      	bls.n	8006c16 <__ssputs_r+0x86>
 8006c14:	463e      	mov	r6, r7
 8006c16:	4632      	mov	r2, r6
 8006c18:	6820      	ldr	r0, [r4, #0]
 8006c1a:	4641      	mov	r1, r8
 8006c1c:	f000 fab6 	bl	800718c <memmove>
 8006c20:	68a3      	ldr	r3, [r4, #8]
 8006c22:	6822      	ldr	r2, [r4, #0]
 8006c24:	1b9b      	subs	r3, r3, r6
 8006c26:	4432      	add	r2, r6
 8006c28:	60a3      	str	r3, [r4, #8]
 8006c2a:	6022      	str	r2, [r4, #0]
 8006c2c:	2000      	movs	r0, #0
 8006c2e:	e7db      	b.n	8006be8 <__ssputs_r+0x58>
 8006c30:	462a      	mov	r2, r5
 8006c32:	f000 fb6f 	bl	8007314 <_realloc_r>
 8006c36:	4606      	mov	r6, r0
 8006c38:	2800      	cmp	r0, #0
 8006c3a:	d1e1      	bne.n	8006c00 <__ssputs_r+0x70>
 8006c3c:	6921      	ldr	r1, [r4, #16]
 8006c3e:	4650      	mov	r0, sl
 8006c40:	f000 fabe 	bl	80071c0 <_free_r>
 8006c44:	e7c7      	b.n	8006bd6 <__ssputs_r+0x46>
	...

08006c48 <_svfiprintf_r>:
 8006c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c4c:	4698      	mov	r8, r3
 8006c4e:	898b      	ldrh	r3, [r1, #12]
 8006c50:	061b      	lsls	r3, r3, #24
 8006c52:	b09d      	sub	sp, #116	; 0x74
 8006c54:	4607      	mov	r7, r0
 8006c56:	460d      	mov	r5, r1
 8006c58:	4614      	mov	r4, r2
 8006c5a:	d50e      	bpl.n	8006c7a <_svfiprintf_r+0x32>
 8006c5c:	690b      	ldr	r3, [r1, #16]
 8006c5e:	b963      	cbnz	r3, 8006c7a <_svfiprintf_r+0x32>
 8006c60:	2140      	movs	r1, #64	; 0x40
 8006c62:	f000 fafd 	bl	8007260 <_malloc_r>
 8006c66:	6028      	str	r0, [r5, #0]
 8006c68:	6128      	str	r0, [r5, #16]
 8006c6a:	b920      	cbnz	r0, 8006c76 <_svfiprintf_r+0x2e>
 8006c6c:	230c      	movs	r3, #12
 8006c6e:	603b      	str	r3, [r7, #0]
 8006c70:	f04f 30ff 	mov.w	r0, #4294967295
 8006c74:	e0d1      	b.n	8006e1a <_svfiprintf_r+0x1d2>
 8006c76:	2340      	movs	r3, #64	; 0x40
 8006c78:	616b      	str	r3, [r5, #20]
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8006c7e:	2320      	movs	r3, #32
 8006c80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c84:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c88:	2330      	movs	r3, #48	; 0x30
 8006c8a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006e34 <_svfiprintf_r+0x1ec>
 8006c8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c92:	f04f 0901 	mov.w	r9, #1
 8006c96:	4623      	mov	r3, r4
 8006c98:	469a      	mov	sl, r3
 8006c9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c9e:	b10a      	cbz	r2, 8006ca4 <_svfiprintf_r+0x5c>
 8006ca0:	2a25      	cmp	r2, #37	; 0x25
 8006ca2:	d1f9      	bne.n	8006c98 <_svfiprintf_r+0x50>
 8006ca4:	ebba 0b04 	subs.w	fp, sl, r4
 8006ca8:	d00b      	beq.n	8006cc2 <_svfiprintf_r+0x7a>
 8006caa:	465b      	mov	r3, fp
 8006cac:	4622      	mov	r2, r4
 8006cae:	4629      	mov	r1, r5
 8006cb0:	4638      	mov	r0, r7
 8006cb2:	f7ff ff6d 	bl	8006b90 <__ssputs_r>
 8006cb6:	3001      	adds	r0, #1
 8006cb8:	f000 80aa 	beq.w	8006e10 <_svfiprintf_r+0x1c8>
 8006cbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cbe:	445a      	add	r2, fp
 8006cc0:	9209      	str	r2, [sp, #36]	; 0x24
 8006cc2:	f89a 3000 	ldrb.w	r3, [sl]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	f000 80a2 	beq.w	8006e10 <_svfiprintf_r+0x1c8>
 8006ccc:	2300      	movs	r3, #0
 8006cce:	f04f 32ff 	mov.w	r2, #4294967295
 8006cd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cd6:	f10a 0a01 	add.w	sl, sl, #1
 8006cda:	9304      	str	r3, [sp, #16]
 8006cdc:	9307      	str	r3, [sp, #28]
 8006cde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ce2:	931a      	str	r3, [sp, #104]	; 0x68
 8006ce4:	4654      	mov	r4, sl
 8006ce6:	2205      	movs	r2, #5
 8006ce8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cec:	4851      	ldr	r0, [pc, #324]	; (8006e34 <_svfiprintf_r+0x1ec>)
 8006cee:	f7f9 fa6f 	bl	80001d0 <memchr>
 8006cf2:	9a04      	ldr	r2, [sp, #16]
 8006cf4:	b9d8      	cbnz	r0, 8006d2e <_svfiprintf_r+0xe6>
 8006cf6:	06d0      	lsls	r0, r2, #27
 8006cf8:	bf44      	itt	mi
 8006cfa:	2320      	movmi	r3, #32
 8006cfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d00:	0711      	lsls	r1, r2, #28
 8006d02:	bf44      	itt	mi
 8006d04:	232b      	movmi	r3, #43	; 0x2b
 8006d06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d0a:	f89a 3000 	ldrb.w	r3, [sl]
 8006d0e:	2b2a      	cmp	r3, #42	; 0x2a
 8006d10:	d015      	beq.n	8006d3e <_svfiprintf_r+0xf6>
 8006d12:	9a07      	ldr	r2, [sp, #28]
 8006d14:	4654      	mov	r4, sl
 8006d16:	2000      	movs	r0, #0
 8006d18:	f04f 0c0a 	mov.w	ip, #10
 8006d1c:	4621      	mov	r1, r4
 8006d1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d22:	3b30      	subs	r3, #48	; 0x30
 8006d24:	2b09      	cmp	r3, #9
 8006d26:	d94e      	bls.n	8006dc6 <_svfiprintf_r+0x17e>
 8006d28:	b1b0      	cbz	r0, 8006d58 <_svfiprintf_r+0x110>
 8006d2a:	9207      	str	r2, [sp, #28]
 8006d2c:	e014      	b.n	8006d58 <_svfiprintf_r+0x110>
 8006d2e:	eba0 0308 	sub.w	r3, r0, r8
 8006d32:	fa09 f303 	lsl.w	r3, r9, r3
 8006d36:	4313      	orrs	r3, r2
 8006d38:	9304      	str	r3, [sp, #16]
 8006d3a:	46a2      	mov	sl, r4
 8006d3c:	e7d2      	b.n	8006ce4 <_svfiprintf_r+0x9c>
 8006d3e:	9b03      	ldr	r3, [sp, #12]
 8006d40:	1d19      	adds	r1, r3, #4
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	9103      	str	r1, [sp, #12]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	bfbb      	ittet	lt
 8006d4a:	425b      	neglt	r3, r3
 8006d4c:	f042 0202 	orrlt.w	r2, r2, #2
 8006d50:	9307      	strge	r3, [sp, #28]
 8006d52:	9307      	strlt	r3, [sp, #28]
 8006d54:	bfb8      	it	lt
 8006d56:	9204      	strlt	r2, [sp, #16]
 8006d58:	7823      	ldrb	r3, [r4, #0]
 8006d5a:	2b2e      	cmp	r3, #46	; 0x2e
 8006d5c:	d10c      	bne.n	8006d78 <_svfiprintf_r+0x130>
 8006d5e:	7863      	ldrb	r3, [r4, #1]
 8006d60:	2b2a      	cmp	r3, #42	; 0x2a
 8006d62:	d135      	bne.n	8006dd0 <_svfiprintf_r+0x188>
 8006d64:	9b03      	ldr	r3, [sp, #12]
 8006d66:	1d1a      	adds	r2, r3, #4
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	9203      	str	r2, [sp, #12]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	bfb8      	it	lt
 8006d70:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d74:	3402      	adds	r4, #2
 8006d76:	9305      	str	r3, [sp, #20]
 8006d78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006e44 <_svfiprintf_r+0x1fc>
 8006d7c:	7821      	ldrb	r1, [r4, #0]
 8006d7e:	2203      	movs	r2, #3
 8006d80:	4650      	mov	r0, sl
 8006d82:	f7f9 fa25 	bl	80001d0 <memchr>
 8006d86:	b140      	cbz	r0, 8006d9a <_svfiprintf_r+0x152>
 8006d88:	2340      	movs	r3, #64	; 0x40
 8006d8a:	eba0 000a 	sub.w	r0, r0, sl
 8006d8e:	fa03 f000 	lsl.w	r0, r3, r0
 8006d92:	9b04      	ldr	r3, [sp, #16]
 8006d94:	4303      	orrs	r3, r0
 8006d96:	3401      	adds	r4, #1
 8006d98:	9304      	str	r3, [sp, #16]
 8006d9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d9e:	4826      	ldr	r0, [pc, #152]	; (8006e38 <_svfiprintf_r+0x1f0>)
 8006da0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006da4:	2206      	movs	r2, #6
 8006da6:	f7f9 fa13 	bl	80001d0 <memchr>
 8006daa:	2800      	cmp	r0, #0
 8006dac:	d038      	beq.n	8006e20 <_svfiprintf_r+0x1d8>
 8006dae:	4b23      	ldr	r3, [pc, #140]	; (8006e3c <_svfiprintf_r+0x1f4>)
 8006db0:	bb1b      	cbnz	r3, 8006dfa <_svfiprintf_r+0x1b2>
 8006db2:	9b03      	ldr	r3, [sp, #12]
 8006db4:	3307      	adds	r3, #7
 8006db6:	f023 0307 	bic.w	r3, r3, #7
 8006dba:	3308      	adds	r3, #8
 8006dbc:	9303      	str	r3, [sp, #12]
 8006dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dc0:	4433      	add	r3, r6
 8006dc2:	9309      	str	r3, [sp, #36]	; 0x24
 8006dc4:	e767      	b.n	8006c96 <_svfiprintf_r+0x4e>
 8006dc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8006dca:	460c      	mov	r4, r1
 8006dcc:	2001      	movs	r0, #1
 8006dce:	e7a5      	b.n	8006d1c <_svfiprintf_r+0xd4>
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	3401      	adds	r4, #1
 8006dd4:	9305      	str	r3, [sp, #20]
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	f04f 0c0a 	mov.w	ip, #10
 8006ddc:	4620      	mov	r0, r4
 8006dde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006de2:	3a30      	subs	r2, #48	; 0x30
 8006de4:	2a09      	cmp	r2, #9
 8006de6:	d903      	bls.n	8006df0 <_svfiprintf_r+0x1a8>
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d0c5      	beq.n	8006d78 <_svfiprintf_r+0x130>
 8006dec:	9105      	str	r1, [sp, #20]
 8006dee:	e7c3      	b.n	8006d78 <_svfiprintf_r+0x130>
 8006df0:	fb0c 2101 	mla	r1, ip, r1, r2
 8006df4:	4604      	mov	r4, r0
 8006df6:	2301      	movs	r3, #1
 8006df8:	e7f0      	b.n	8006ddc <_svfiprintf_r+0x194>
 8006dfa:	ab03      	add	r3, sp, #12
 8006dfc:	9300      	str	r3, [sp, #0]
 8006dfe:	462a      	mov	r2, r5
 8006e00:	4b0f      	ldr	r3, [pc, #60]	; (8006e40 <_svfiprintf_r+0x1f8>)
 8006e02:	a904      	add	r1, sp, #16
 8006e04:	4638      	mov	r0, r7
 8006e06:	f3af 8000 	nop.w
 8006e0a:	1c42      	adds	r2, r0, #1
 8006e0c:	4606      	mov	r6, r0
 8006e0e:	d1d6      	bne.n	8006dbe <_svfiprintf_r+0x176>
 8006e10:	89ab      	ldrh	r3, [r5, #12]
 8006e12:	065b      	lsls	r3, r3, #25
 8006e14:	f53f af2c 	bmi.w	8006c70 <_svfiprintf_r+0x28>
 8006e18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e1a:	b01d      	add	sp, #116	; 0x74
 8006e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e20:	ab03      	add	r3, sp, #12
 8006e22:	9300      	str	r3, [sp, #0]
 8006e24:	462a      	mov	r2, r5
 8006e26:	4b06      	ldr	r3, [pc, #24]	; (8006e40 <_svfiprintf_r+0x1f8>)
 8006e28:	a904      	add	r1, sp, #16
 8006e2a:	4638      	mov	r0, r7
 8006e2c:	f000 f87a 	bl	8006f24 <_printf_i>
 8006e30:	e7eb      	b.n	8006e0a <_svfiprintf_r+0x1c2>
 8006e32:	bf00      	nop
 8006e34:	08007464 	.word	0x08007464
 8006e38:	0800746e 	.word	0x0800746e
 8006e3c:	00000000 	.word	0x00000000
 8006e40:	08006b91 	.word	0x08006b91
 8006e44:	0800746a 	.word	0x0800746a

08006e48 <_printf_common>:
 8006e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e4c:	4616      	mov	r6, r2
 8006e4e:	4699      	mov	r9, r3
 8006e50:	688a      	ldr	r2, [r1, #8]
 8006e52:	690b      	ldr	r3, [r1, #16]
 8006e54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	bfb8      	it	lt
 8006e5c:	4613      	movlt	r3, r2
 8006e5e:	6033      	str	r3, [r6, #0]
 8006e60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e64:	4607      	mov	r7, r0
 8006e66:	460c      	mov	r4, r1
 8006e68:	b10a      	cbz	r2, 8006e6e <_printf_common+0x26>
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	6033      	str	r3, [r6, #0]
 8006e6e:	6823      	ldr	r3, [r4, #0]
 8006e70:	0699      	lsls	r1, r3, #26
 8006e72:	bf42      	ittt	mi
 8006e74:	6833      	ldrmi	r3, [r6, #0]
 8006e76:	3302      	addmi	r3, #2
 8006e78:	6033      	strmi	r3, [r6, #0]
 8006e7a:	6825      	ldr	r5, [r4, #0]
 8006e7c:	f015 0506 	ands.w	r5, r5, #6
 8006e80:	d106      	bne.n	8006e90 <_printf_common+0x48>
 8006e82:	f104 0a19 	add.w	sl, r4, #25
 8006e86:	68e3      	ldr	r3, [r4, #12]
 8006e88:	6832      	ldr	r2, [r6, #0]
 8006e8a:	1a9b      	subs	r3, r3, r2
 8006e8c:	42ab      	cmp	r3, r5
 8006e8e:	dc26      	bgt.n	8006ede <_printf_common+0x96>
 8006e90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e94:	1e13      	subs	r3, r2, #0
 8006e96:	6822      	ldr	r2, [r4, #0]
 8006e98:	bf18      	it	ne
 8006e9a:	2301      	movne	r3, #1
 8006e9c:	0692      	lsls	r2, r2, #26
 8006e9e:	d42b      	bmi.n	8006ef8 <_printf_common+0xb0>
 8006ea0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ea4:	4649      	mov	r1, r9
 8006ea6:	4638      	mov	r0, r7
 8006ea8:	47c0      	blx	r8
 8006eaa:	3001      	adds	r0, #1
 8006eac:	d01e      	beq.n	8006eec <_printf_common+0xa4>
 8006eae:	6823      	ldr	r3, [r4, #0]
 8006eb0:	68e5      	ldr	r5, [r4, #12]
 8006eb2:	6832      	ldr	r2, [r6, #0]
 8006eb4:	f003 0306 	and.w	r3, r3, #6
 8006eb8:	2b04      	cmp	r3, #4
 8006eba:	bf08      	it	eq
 8006ebc:	1aad      	subeq	r5, r5, r2
 8006ebe:	68a3      	ldr	r3, [r4, #8]
 8006ec0:	6922      	ldr	r2, [r4, #16]
 8006ec2:	bf0c      	ite	eq
 8006ec4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ec8:	2500      	movne	r5, #0
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	bfc4      	itt	gt
 8006ece:	1a9b      	subgt	r3, r3, r2
 8006ed0:	18ed      	addgt	r5, r5, r3
 8006ed2:	2600      	movs	r6, #0
 8006ed4:	341a      	adds	r4, #26
 8006ed6:	42b5      	cmp	r5, r6
 8006ed8:	d11a      	bne.n	8006f10 <_printf_common+0xc8>
 8006eda:	2000      	movs	r0, #0
 8006edc:	e008      	b.n	8006ef0 <_printf_common+0xa8>
 8006ede:	2301      	movs	r3, #1
 8006ee0:	4652      	mov	r2, sl
 8006ee2:	4649      	mov	r1, r9
 8006ee4:	4638      	mov	r0, r7
 8006ee6:	47c0      	blx	r8
 8006ee8:	3001      	adds	r0, #1
 8006eea:	d103      	bne.n	8006ef4 <_printf_common+0xac>
 8006eec:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ef4:	3501      	adds	r5, #1
 8006ef6:	e7c6      	b.n	8006e86 <_printf_common+0x3e>
 8006ef8:	18e1      	adds	r1, r4, r3
 8006efa:	1c5a      	adds	r2, r3, #1
 8006efc:	2030      	movs	r0, #48	; 0x30
 8006efe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f02:	4422      	add	r2, r4
 8006f04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f0c:	3302      	adds	r3, #2
 8006f0e:	e7c7      	b.n	8006ea0 <_printf_common+0x58>
 8006f10:	2301      	movs	r3, #1
 8006f12:	4622      	mov	r2, r4
 8006f14:	4649      	mov	r1, r9
 8006f16:	4638      	mov	r0, r7
 8006f18:	47c0      	blx	r8
 8006f1a:	3001      	adds	r0, #1
 8006f1c:	d0e6      	beq.n	8006eec <_printf_common+0xa4>
 8006f1e:	3601      	adds	r6, #1
 8006f20:	e7d9      	b.n	8006ed6 <_printf_common+0x8e>
	...

08006f24 <_printf_i>:
 8006f24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f28:	460c      	mov	r4, r1
 8006f2a:	4691      	mov	r9, r2
 8006f2c:	7e27      	ldrb	r7, [r4, #24]
 8006f2e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006f30:	2f78      	cmp	r7, #120	; 0x78
 8006f32:	4680      	mov	r8, r0
 8006f34:	469a      	mov	sl, r3
 8006f36:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f3a:	d807      	bhi.n	8006f4c <_printf_i+0x28>
 8006f3c:	2f62      	cmp	r7, #98	; 0x62
 8006f3e:	d80a      	bhi.n	8006f56 <_printf_i+0x32>
 8006f40:	2f00      	cmp	r7, #0
 8006f42:	f000 80d8 	beq.w	80070f6 <_printf_i+0x1d2>
 8006f46:	2f58      	cmp	r7, #88	; 0x58
 8006f48:	f000 80a3 	beq.w	8007092 <_printf_i+0x16e>
 8006f4c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006f50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f54:	e03a      	b.n	8006fcc <_printf_i+0xa8>
 8006f56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f5a:	2b15      	cmp	r3, #21
 8006f5c:	d8f6      	bhi.n	8006f4c <_printf_i+0x28>
 8006f5e:	a001      	add	r0, pc, #4	; (adr r0, 8006f64 <_printf_i+0x40>)
 8006f60:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006f64:	08006fbd 	.word	0x08006fbd
 8006f68:	08006fd1 	.word	0x08006fd1
 8006f6c:	08006f4d 	.word	0x08006f4d
 8006f70:	08006f4d 	.word	0x08006f4d
 8006f74:	08006f4d 	.word	0x08006f4d
 8006f78:	08006f4d 	.word	0x08006f4d
 8006f7c:	08006fd1 	.word	0x08006fd1
 8006f80:	08006f4d 	.word	0x08006f4d
 8006f84:	08006f4d 	.word	0x08006f4d
 8006f88:	08006f4d 	.word	0x08006f4d
 8006f8c:	08006f4d 	.word	0x08006f4d
 8006f90:	080070dd 	.word	0x080070dd
 8006f94:	08007001 	.word	0x08007001
 8006f98:	080070bf 	.word	0x080070bf
 8006f9c:	08006f4d 	.word	0x08006f4d
 8006fa0:	08006f4d 	.word	0x08006f4d
 8006fa4:	080070ff 	.word	0x080070ff
 8006fa8:	08006f4d 	.word	0x08006f4d
 8006fac:	08007001 	.word	0x08007001
 8006fb0:	08006f4d 	.word	0x08006f4d
 8006fb4:	08006f4d 	.word	0x08006f4d
 8006fb8:	080070c7 	.word	0x080070c7
 8006fbc:	680b      	ldr	r3, [r1, #0]
 8006fbe:	1d1a      	adds	r2, r3, #4
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	600a      	str	r2, [r1, #0]
 8006fc4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006fc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e0a3      	b.n	8007118 <_printf_i+0x1f4>
 8006fd0:	6825      	ldr	r5, [r4, #0]
 8006fd2:	6808      	ldr	r0, [r1, #0]
 8006fd4:	062e      	lsls	r6, r5, #24
 8006fd6:	f100 0304 	add.w	r3, r0, #4
 8006fda:	d50a      	bpl.n	8006ff2 <_printf_i+0xce>
 8006fdc:	6805      	ldr	r5, [r0, #0]
 8006fde:	600b      	str	r3, [r1, #0]
 8006fe0:	2d00      	cmp	r5, #0
 8006fe2:	da03      	bge.n	8006fec <_printf_i+0xc8>
 8006fe4:	232d      	movs	r3, #45	; 0x2d
 8006fe6:	426d      	negs	r5, r5
 8006fe8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fec:	485e      	ldr	r0, [pc, #376]	; (8007168 <_printf_i+0x244>)
 8006fee:	230a      	movs	r3, #10
 8006ff0:	e019      	b.n	8007026 <_printf_i+0x102>
 8006ff2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006ff6:	6805      	ldr	r5, [r0, #0]
 8006ff8:	600b      	str	r3, [r1, #0]
 8006ffa:	bf18      	it	ne
 8006ffc:	b22d      	sxthne	r5, r5
 8006ffe:	e7ef      	b.n	8006fe0 <_printf_i+0xbc>
 8007000:	680b      	ldr	r3, [r1, #0]
 8007002:	6825      	ldr	r5, [r4, #0]
 8007004:	1d18      	adds	r0, r3, #4
 8007006:	6008      	str	r0, [r1, #0]
 8007008:	0628      	lsls	r0, r5, #24
 800700a:	d501      	bpl.n	8007010 <_printf_i+0xec>
 800700c:	681d      	ldr	r5, [r3, #0]
 800700e:	e002      	b.n	8007016 <_printf_i+0xf2>
 8007010:	0669      	lsls	r1, r5, #25
 8007012:	d5fb      	bpl.n	800700c <_printf_i+0xe8>
 8007014:	881d      	ldrh	r5, [r3, #0]
 8007016:	4854      	ldr	r0, [pc, #336]	; (8007168 <_printf_i+0x244>)
 8007018:	2f6f      	cmp	r7, #111	; 0x6f
 800701a:	bf0c      	ite	eq
 800701c:	2308      	moveq	r3, #8
 800701e:	230a      	movne	r3, #10
 8007020:	2100      	movs	r1, #0
 8007022:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007026:	6866      	ldr	r6, [r4, #4]
 8007028:	60a6      	str	r6, [r4, #8]
 800702a:	2e00      	cmp	r6, #0
 800702c:	bfa2      	ittt	ge
 800702e:	6821      	ldrge	r1, [r4, #0]
 8007030:	f021 0104 	bicge.w	r1, r1, #4
 8007034:	6021      	strge	r1, [r4, #0]
 8007036:	b90d      	cbnz	r5, 800703c <_printf_i+0x118>
 8007038:	2e00      	cmp	r6, #0
 800703a:	d04d      	beq.n	80070d8 <_printf_i+0x1b4>
 800703c:	4616      	mov	r6, r2
 800703e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007042:	fb03 5711 	mls	r7, r3, r1, r5
 8007046:	5dc7      	ldrb	r7, [r0, r7]
 8007048:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800704c:	462f      	mov	r7, r5
 800704e:	42bb      	cmp	r3, r7
 8007050:	460d      	mov	r5, r1
 8007052:	d9f4      	bls.n	800703e <_printf_i+0x11a>
 8007054:	2b08      	cmp	r3, #8
 8007056:	d10b      	bne.n	8007070 <_printf_i+0x14c>
 8007058:	6823      	ldr	r3, [r4, #0]
 800705a:	07df      	lsls	r7, r3, #31
 800705c:	d508      	bpl.n	8007070 <_printf_i+0x14c>
 800705e:	6923      	ldr	r3, [r4, #16]
 8007060:	6861      	ldr	r1, [r4, #4]
 8007062:	4299      	cmp	r1, r3
 8007064:	bfde      	ittt	le
 8007066:	2330      	movle	r3, #48	; 0x30
 8007068:	f806 3c01 	strble.w	r3, [r6, #-1]
 800706c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007070:	1b92      	subs	r2, r2, r6
 8007072:	6122      	str	r2, [r4, #16]
 8007074:	f8cd a000 	str.w	sl, [sp]
 8007078:	464b      	mov	r3, r9
 800707a:	aa03      	add	r2, sp, #12
 800707c:	4621      	mov	r1, r4
 800707e:	4640      	mov	r0, r8
 8007080:	f7ff fee2 	bl	8006e48 <_printf_common>
 8007084:	3001      	adds	r0, #1
 8007086:	d14c      	bne.n	8007122 <_printf_i+0x1fe>
 8007088:	f04f 30ff 	mov.w	r0, #4294967295
 800708c:	b004      	add	sp, #16
 800708e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007092:	4835      	ldr	r0, [pc, #212]	; (8007168 <_printf_i+0x244>)
 8007094:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007098:	6823      	ldr	r3, [r4, #0]
 800709a:	680e      	ldr	r6, [r1, #0]
 800709c:	061f      	lsls	r7, r3, #24
 800709e:	f856 5b04 	ldr.w	r5, [r6], #4
 80070a2:	600e      	str	r6, [r1, #0]
 80070a4:	d514      	bpl.n	80070d0 <_printf_i+0x1ac>
 80070a6:	07d9      	lsls	r1, r3, #31
 80070a8:	bf44      	itt	mi
 80070aa:	f043 0320 	orrmi.w	r3, r3, #32
 80070ae:	6023      	strmi	r3, [r4, #0]
 80070b0:	b91d      	cbnz	r5, 80070ba <_printf_i+0x196>
 80070b2:	6823      	ldr	r3, [r4, #0]
 80070b4:	f023 0320 	bic.w	r3, r3, #32
 80070b8:	6023      	str	r3, [r4, #0]
 80070ba:	2310      	movs	r3, #16
 80070bc:	e7b0      	b.n	8007020 <_printf_i+0xfc>
 80070be:	6823      	ldr	r3, [r4, #0]
 80070c0:	f043 0320 	orr.w	r3, r3, #32
 80070c4:	6023      	str	r3, [r4, #0]
 80070c6:	2378      	movs	r3, #120	; 0x78
 80070c8:	4828      	ldr	r0, [pc, #160]	; (800716c <_printf_i+0x248>)
 80070ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80070ce:	e7e3      	b.n	8007098 <_printf_i+0x174>
 80070d0:	065e      	lsls	r6, r3, #25
 80070d2:	bf48      	it	mi
 80070d4:	b2ad      	uxthmi	r5, r5
 80070d6:	e7e6      	b.n	80070a6 <_printf_i+0x182>
 80070d8:	4616      	mov	r6, r2
 80070da:	e7bb      	b.n	8007054 <_printf_i+0x130>
 80070dc:	680b      	ldr	r3, [r1, #0]
 80070de:	6826      	ldr	r6, [r4, #0]
 80070e0:	6960      	ldr	r0, [r4, #20]
 80070e2:	1d1d      	adds	r5, r3, #4
 80070e4:	600d      	str	r5, [r1, #0]
 80070e6:	0635      	lsls	r5, r6, #24
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	d501      	bpl.n	80070f0 <_printf_i+0x1cc>
 80070ec:	6018      	str	r0, [r3, #0]
 80070ee:	e002      	b.n	80070f6 <_printf_i+0x1d2>
 80070f0:	0671      	lsls	r1, r6, #25
 80070f2:	d5fb      	bpl.n	80070ec <_printf_i+0x1c8>
 80070f4:	8018      	strh	r0, [r3, #0]
 80070f6:	2300      	movs	r3, #0
 80070f8:	6123      	str	r3, [r4, #16]
 80070fa:	4616      	mov	r6, r2
 80070fc:	e7ba      	b.n	8007074 <_printf_i+0x150>
 80070fe:	680b      	ldr	r3, [r1, #0]
 8007100:	1d1a      	adds	r2, r3, #4
 8007102:	600a      	str	r2, [r1, #0]
 8007104:	681e      	ldr	r6, [r3, #0]
 8007106:	6862      	ldr	r2, [r4, #4]
 8007108:	2100      	movs	r1, #0
 800710a:	4630      	mov	r0, r6
 800710c:	f7f9 f860 	bl	80001d0 <memchr>
 8007110:	b108      	cbz	r0, 8007116 <_printf_i+0x1f2>
 8007112:	1b80      	subs	r0, r0, r6
 8007114:	6060      	str	r0, [r4, #4]
 8007116:	6863      	ldr	r3, [r4, #4]
 8007118:	6123      	str	r3, [r4, #16]
 800711a:	2300      	movs	r3, #0
 800711c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007120:	e7a8      	b.n	8007074 <_printf_i+0x150>
 8007122:	6923      	ldr	r3, [r4, #16]
 8007124:	4632      	mov	r2, r6
 8007126:	4649      	mov	r1, r9
 8007128:	4640      	mov	r0, r8
 800712a:	47d0      	blx	sl
 800712c:	3001      	adds	r0, #1
 800712e:	d0ab      	beq.n	8007088 <_printf_i+0x164>
 8007130:	6823      	ldr	r3, [r4, #0]
 8007132:	079b      	lsls	r3, r3, #30
 8007134:	d413      	bmi.n	800715e <_printf_i+0x23a>
 8007136:	68e0      	ldr	r0, [r4, #12]
 8007138:	9b03      	ldr	r3, [sp, #12]
 800713a:	4298      	cmp	r0, r3
 800713c:	bfb8      	it	lt
 800713e:	4618      	movlt	r0, r3
 8007140:	e7a4      	b.n	800708c <_printf_i+0x168>
 8007142:	2301      	movs	r3, #1
 8007144:	4632      	mov	r2, r6
 8007146:	4649      	mov	r1, r9
 8007148:	4640      	mov	r0, r8
 800714a:	47d0      	blx	sl
 800714c:	3001      	adds	r0, #1
 800714e:	d09b      	beq.n	8007088 <_printf_i+0x164>
 8007150:	3501      	adds	r5, #1
 8007152:	68e3      	ldr	r3, [r4, #12]
 8007154:	9903      	ldr	r1, [sp, #12]
 8007156:	1a5b      	subs	r3, r3, r1
 8007158:	42ab      	cmp	r3, r5
 800715a:	dcf2      	bgt.n	8007142 <_printf_i+0x21e>
 800715c:	e7eb      	b.n	8007136 <_printf_i+0x212>
 800715e:	2500      	movs	r5, #0
 8007160:	f104 0619 	add.w	r6, r4, #25
 8007164:	e7f5      	b.n	8007152 <_printf_i+0x22e>
 8007166:	bf00      	nop
 8007168:	08007475 	.word	0x08007475
 800716c:	08007486 	.word	0x08007486

08007170 <memcpy>:
 8007170:	440a      	add	r2, r1
 8007172:	4291      	cmp	r1, r2
 8007174:	f100 33ff 	add.w	r3, r0, #4294967295
 8007178:	d100      	bne.n	800717c <memcpy+0xc>
 800717a:	4770      	bx	lr
 800717c:	b510      	push	{r4, lr}
 800717e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007182:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007186:	4291      	cmp	r1, r2
 8007188:	d1f9      	bne.n	800717e <memcpy+0xe>
 800718a:	bd10      	pop	{r4, pc}

0800718c <memmove>:
 800718c:	4288      	cmp	r0, r1
 800718e:	b510      	push	{r4, lr}
 8007190:	eb01 0402 	add.w	r4, r1, r2
 8007194:	d902      	bls.n	800719c <memmove+0x10>
 8007196:	4284      	cmp	r4, r0
 8007198:	4623      	mov	r3, r4
 800719a:	d807      	bhi.n	80071ac <memmove+0x20>
 800719c:	1e43      	subs	r3, r0, #1
 800719e:	42a1      	cmp	r1, r4
 80071a0:	d008      	beq.n	80071b4 <memmove+0x28>
 80071a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80071aa:	e7f8      	b.n	800719e <memmove+0x12>
 80071ac:	4402      	add	r2, r0
 80071ae:	4601      	mov	r1, r0
 80071b0:	428a      	cmp	r2, r1
 80071b2:	d100      	bne.n	80071b6 <memmove+0x2a>
 80071b4:	bd10      	pop	{r4, pc}
 80071b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80071be:	e7f7      	b.n	80071b0 <memmove+0x24>

080071c0 <_free_r>:
 80071c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071c2:	2900      	cmp	r1, #0
 80071c4:	d048      	beq.n	8007258 <_free_r+0x98>
 80071c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071ca:	9001      	str	r0, [sp, #4]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f1a1 0404 	sub.w	r4, r1, #4
 80071d2:	bfb8      	it	lt
 80071d4:	18e4      	addlt	r4, r4, r3
 80071d6:	f000 f8d3 	bl	8007380 <__malloc_lock>
 80071da:	4a20      	ldr	r2, [pc, #128]	; (800725c <_free_r+0x9c>)
 80071dc:	9801      	ldr	r0, [sp, #4]
 80071de:	6813      	ldr	r3, [r2, #0]
 80071e0:	4615      	mov	r5, r2
 80071e2:	b933      	cbnz	r3, 80071f2 <_free_r+0x32>
 80071e4:	6063      	str	r3, [r4, #4]
 80071e6:	6014      	str	r4, [r2, #0]
 80071e8:	b003      	add	sp, #12
 80071ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80071ee:	f000 b8cd 	b.w	800738c <__malloc_unlock>
 80071f2:	42a3      	cmp	r3, r4
 80071f4:	d90b      	bls.n	800720e <_free_r+0x4e>
 80071f6:	6821      	ldr	r1, [r4, #0]
 80071f8:	1862      	adds	r2, r4, r1
 80071fa:	4293      	cmp	r3, r2
 80071fc:	bf04      	itt	eq
 80071fe:	681a      	ldreq	r2, [r3, #0]
 8007200:	685b      	ldreq	r3, [r3, #4]
 8007202:	6063      	str	r3, [r4, #4]
 8007204:	bf04      	itt	eq
 8007206:	1852      	addeq	r2, r2, r1
 8007208:	6022      	streq	r2, [r4, #0]
 800720a:	602c      	str	r4, [r5, #0]
 800720c:	e7ec      	b.n	80071e8 <_free_r+0x28>
 800720e:	461a      	mov	r2, r3
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	b10b      	cbz	r3, 8007218 <_free_r+0x58>
 8007214:	42a3      	cmp	r3, r4
 8007216:	d9fa      	bls.n	800720e <_free_r+0x4e>
 8007218:	6811      	ldr	r1, [r2, #0]
 800721a:	1855      	adds	r5, r2, r1
 800721c:	42a5      	cmp	r5, r4
 800721e:	d10b      	bne.n	8007238 <_free_r+0x78>
 8007220:	6824      	ldr	r4, [r4, #0]
 8007222:	4421      	add	r1, r4
 8007224:	1854      	adds	r4, r2, r1
 8007226:	42a3      	cmp	r3, r4
 8007228:	6011      	str	r1, [r2, #0]
 800722a:	d1dd      	bne.n	80071e8 <_free_r+0x28>
 800722c:	681c      	ldr	r4, [r3, #0]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	6053      	str	r3, [r2, #4]
 8007232:	4421      	add	r1, r4
 8007234:	6011      	str	r1, [r2, #0]
 8007236:	e7d7      	b.n	80071e8 <_free_r+0x28>
 8007238:	d902      	bls.n	8007240 <_free_r+0x80>
 800723a:	230c      	movs	r3, #12
 800723c:	6003      	str	r3, [r0, #0]
 800723e:	e7d3      	b.n	80071e8 <_free_r+0x28>
 8007240:	6825      	ldr	r5, [r4, #0]
 8007242:	1961      	adds	r1, r4, r5
 8007244:	428b      	cmp	r3, r1
 8007246:	bf04      	itt	eq
 8007248:	6819      	ldreq	r1, [r3, #0]
 800724a:	685b      	ldreq	r3, [r3, #4]
 800724c:	6063      	str	r3, [r4, #4]
 800724e:	bf04      	itt	eq
 8007250:	1949      	addeq	r1, r1, r5
 8007252:	6021      	streq	r1, [r4, #0]
 8007254:	6054      	str	r4, [r2, #4]
 8007256:	e7c7      	b.n	80071e8 <_free_r+0x28>
 8007258:	b003      	add	sp, #12
 800725a:	bd30      	pop	{r4, r5, pc}
 800725c:	20000098 	.word	0x20000098

08007260 <_malloc_r>:
 8007260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007262:	1ccd      	adds	r5, r1, #3
 8007264:	f025 0503 	bic.w	r5, r5, #3
 8007268:	3508      	adds	r5, #8
 800726a:	2d0c      	cmp	r5, #12
 800726c:	bf38      	it	cc
 800726e:	250c      	movcc	r5, #12
 8007270:	2d00      	cmp	r5, #0
 8007272:	4606      	mov	r6, r0
 8007274:	db01      	blt.n	800727a <_malloc_r+0x1a>
 8007276:	42a9      	cmp	r1, r5
 8007278:	d903      	bls.n	8007282 <_malloc_r+0x22>
 800727a:	230c      	movs	r3, #12
 800727c:	6033      	str	r3, [r6, #0]
 800727e:	2000      	movs	r0, #0
 8007280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007282:	f000 f87d 	bl	8007380 <__malloc_lock>
 8007286:	4921      	ldr	r1, [pc, #132]	; (800730c <_malloc_r+0xac>)
 8007288:	680a      	ldr	r2, [r1, #0]
 800728a:	4614      	mov	r4, r2
 800728c:	b99c      	cbnz	r4, 80072b6 <_malloc_r+0x56>
 800728e:	4f20      	ldr	r7, [pc, #128]	; (8007310 <_malloc_r+0xb0>)
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	b923      	cbnz	r3, 800729e <_malloc_r+0x3e>
 8007294:	4621      	mov	r1, r4
 8007296:	4630      	mov	r0, r6
 8007298:	f000 f862 	bl	8007360 <_sbrk_r>
 800729c:	6038      	str	r0, [r7, #0]
 800729e:	4629      	mov	r1, r5
 80072a0:	4630      	mov	r0, r6
 80072a2:	f000 f85d 	bl	8007360 <_sbrk_r>
 80072a6:	1c43      	adds	r3, r0, #1
 80072a8:	d123      	bne.n	80072f2 <_malloc_r+0x92>
 80072aa:	230c      	movs	r3, #12
 80072ac:	6033      	str	r3, [r6, #0]
 80072ae:	4630      	mov	r0, r6
 80072b0:	f000 f86c 	bl	800738c <__malloc_unlock>
 80072b4:	e7e3      	b.n	800727e <_malloc_r+0x1e>
 80072b6:	6823      	ldr	r3, [r4, #0]
 80072b8:	1b5b      	subs	r3, r3, r5
 80072ba:	d417      	bmi.n	80072ec <_malloc_r+0x8c>
 80072bc:	2b0b      	cmp	r3, #11
 80072be:	d903      	bls.n	80072c8 <_malloc_r+0x68>
 80072c0:	6023      	str	r3, [r4, #0]
 80072c2:	441c      	add	r4, r3
 80072c4:	6025      	str	r5, [r4, #0]
 80072c6:	e004      	b.n	80072d2 <_malloc_r+0x72>
 80072c8:	6863      	ldr	r3, [r4, #4]
 80072ca:	42a2      	cmp	r2, r4
 80072cc:	bf0c      	ite	eq
 80072ce:	600b      	streq	r3, [r1, #0]
 80072d0:	6053      	strne	r3, [r2, #4]
 80072d2:	4630      	mov	r0, r6
 80072d4:	f000 f85a 	bl	800738c <__malloc_unlock>
 80072d8:	f104 000b 	add.w	r0, r4, #11
 80072dc:	1d23      	adds	r3, r4, #4
 80072de:	f020 0007 	bic.w	r0, r0, #7
 80072e2:	1ac2      	subs	r2, r0, r3
 80072e4:	d0cc      	beq.n	8007280 <_malloc_r+0x20>
 80072e6:	1a1b      	subs	r3, r3, r0
 80072e8:	50a3      	str	r3, [r4, r2]
 80072ea:	e7c9      	b.n	8007280 <_malloc_r+0x20>
 80072ec:	4622      	mov	r2, r4
 80072ee:	6864      	ldr	r4, [r4, #4]
 80072f0:	e7cc      	b.n	800728c <_malloc_r+0x2c>
 80072f2:	1cc4      	adds	r4, r0, #3
 80072f4:	f024 0403 	bic.w	r4, r4, #3
 80072f8:	42a0      	cmp	r0, r4
 80072fa:	d0e3      	beq.n	80072c4 <_malloc_r+0x64>
 80072fc:	1a21      	subs	r1, r4, r0
 80072fe:	4630      	mov	r0, r6
 8007300:	f000 f82e 	bl	8007360 <_sbrk_r>
 8007304:	3001      	adds	r0, #1
 8007306:	d1dd      	bne.n	80072c4 <_malloc_r+0x64>
 8007308:	e7cf      	b.n	80072aa <_malloc_r+0x4a>
 800730a:	bf00      	nop
 800730c:	20000098 	.word	0x20000098
 8007310:	2000009c 	.word	0x2000009c

08007314 <_realloc_r>:
 8007314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007316:	4607      	mov	r7, r0
 8007318:	4614      	mov	r4, r2
 800731a:	460e      	mov	r6, r1
 800731c:	b921      	cbnz	r1, 8007328 <_realloc_r+0x14>
 800731e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007322:	4611      	mov	r1, r2
 8007324:	f7ff bf9c 	b.w	8007260 <_malloc_r>
 8007328:	b922      	cbnz	r2, 8007334 <_realloc_r+0x20>
 800732a:	f7ff ff49 	bl	80071c0 <_free_r>
 800732e:	4625      	mov	r5, r4
 8007330:	4628      	mov	r0, r5
 8007332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007334:	f000 f830 	bl	8007398 <_malloc_usable_size_r>
 8007338:	42a0      	cmp	r0, r4
 800733a:	d20f      	bcs.n	800735c <_realloc_r+0x48>
 800733c:	4621      	mov	r1, r4
 800733e:	4638      	mov	r0, r7
 8007340:	f7ff ff8e 	bl	8007260 <_malloc_r>
 8007344:	4605      	mov	r5, r0
 8007346:	2800      	cmp	r0, #0
 8007348:	d0f2      	beq.n	8007330 <_realloc_r+0x1c>
 800734a:	4631      	mov	r1, r6
 800734c:	4622      	mov	r2, r4
 800734e:	f7ff ff0f 	bl	8007170 <memcpy>
 8007352:	4631      	mov	r1, r6
 8007354:	4638      	mov	r0, r7
 8007356:	f7ff ff33 	bl	80071c0 <_free_r>
 800735a:	e7e9      	b.n	8007330 <_realloc_r+0x1c>
 800735c:	4635      	mov	r5, r6
 800735e:	e7e7      	b.n	8007330 <_realloc_r+0x1c>

08007360 <_sbrk_r>:
 8007360:	b538      	push	{r3, r4, r5, lr}
 8007362:	4d06      	ldr	r5, [pc, #24]	; (800737c <_sbrk_r+0x1c>)
 8007364:	2300      	movs	r3, #0
 8007366:	4604      	mov	r4, r0
 8007368:	4608      	mov	r0, r1
 800736a:	602b      	str	r3, [r5, #0]
 800736c:	f7fb f842 	bl	80023f4 <_sbrk>
 8007370:	1c43      	adds	r3, r0, #1
 8007372:	d102      	bne.n	800737a <_sbrk_r+0x1a>
 8007374:	682b      	ldr	r3, [r5, #0]
 8007376:	b103      	cbz	r3, 800737a <_sbrk_r+0x1a>
 8007378:	6023      	str	r3, [r4, #0]
 800737a:	bd38      	pop	{r3, r4, r5, pc}
 800737c:	20000334 	.word	0x20000334

08007380 <__malloc_lock>:
 8007380:	4801      	ldr	r0, [pc, #4]	; (8007388 <__malloc_lock+0x8>)
 8007382:	f000 b811 	b.w	80073a8 <__retarget_lock_acquire_recursive>
 8007386:	bf00      	nop
 8007388:	2000033c 	.word	0x2000033c

0800738c <__malloc_unlock>:
 800738c:	4801      	ldr	r0, [pc, #4]	; (8007394 <__malloc_unlock+0x8>)
 800738e:	f000 b80c 	b.w	80073aa <__retarget_lock_release_recursive>
 8007392:	bf00      	nop
 8007394:	2000033c 	.word	0x2000033c

08007398 <_malloc_usable_size_r>:
 8007398:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800739c:	1f18      	subs	r0, r3, #4
 800739e:	2b00      	cmp	r3, #0
 80073a0:	bfbc      	itt	lt
 80073a2:	580b      	ldrlt	r3, [r1, r0]
 80073a4:	18c0      	addlt	r0, r0, r3
 80073a6:	4770      	bx	lr

080073a8 <__retarget_lock_acquire_recursive>:
 80073a8:	4770      	bx	lr

080073aa <__retarget_lock_release_recursive>:
 80073aa:	4770      	bx	lr

080073ac <_init>:
 80073ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ae:	bf00      	nop
 80073b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073b2:	bc08      	pop	{r3}
 80073b4:	469e      	mov	lr, r3
 80073b6:	4770      	bx	lr

080073b8 <_fini>:
 80073b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ba:	bf00      	nop
 80073bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073be:	bc08      	pop	{r3}
 80073c0:	469e      	mov	lr, r3
 80073c2:	4770      	bx	lr
